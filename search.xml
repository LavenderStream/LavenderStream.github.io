<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Android -- Android 组件化编程</title>
      <link href="/2017/10/11/Android-Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>/2017/10/11/Android-Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>昨天看了篇博客，讲的是Android面向组件化编程。深受启发，按照博客上的思路，自己实现了一下。</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-02cb3da698109d4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程"></p><p>1、gradle.config：   配置文件 gradle的配置文件，版本的配置统一写在这个文件下<br>2、Libraries ：          项目的基础架构、通用的资源、三方库等<br>3、Components ：  组件类，所有的组件依赖于这个模块<br>4、Framework ：     将所有的组件包装，主项目只以来与这个模块，使用android studio 3.0 的gradle依赖，让Components  模块去暴露api接口<br>5、app ：                 应用主项目</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-355f02e5f1628b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>ComponentManager ： 组件的管理类，所以的组件通过这个类来管理<br>IApp ： 所有的都要实现这个接口，主要把组件添加到上面管理类中<br>IComponent ： 组件中需要在这个模块中注册，并且组件实现这个接口，提供给主程序暴露的方法，主程序通过拿到这个接口和组件之间进行通讯</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-f07595d65db72ec9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>已登入组件为例：</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c168ee01642907d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>App 实现 IApp接口， 将接口和其实现注册进管理类</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-fa9535c828754109.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>实现ILogon 接口</p><p>总结：ComponentManager 用用于管理组件的类，逐渐的持有者需要把组件注册进去，而组件需要吧对依赖者暴露的方法注册进去</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-9fec7653dca6fd8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>用使用我们管理类，拿到组件进行调用</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- 使用7zip压缩apk优化包大小</title>
      <link href="/2017/09/22/Android-%E4%BD%BF%E7%94%A87zip%E5%8E%8B%E7%BC%A9apk%E4%BC%98%E5%8C%96%E5%8C%85%E5%A4%A7%E5%B0%8F/"/>
      <url>/2017/09/22/Android-%E4%BD%BF%E7%94%A87zip%E5%8E%8B%E7%BC%A9apk%E4%BC%98%E5%8C%96%E5%8C%85%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>解压 apk ： 7z x -tzip $1<br>压缩 apk ： 7z a -tzip target.apk * </p>]]></content>
      
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android -- FBReader 阅读笔记 （二）</title>
      <link href="/2017/06/14/Android-FBReader-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2017/06/14/Android-FBReader-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="给简书写没纸了，在弄一个新页吧"><a href="#给简书写没纸了，在弄一个新页吧" class="headerlink" title="给简书写没纸了，在弄一个新页吧"></a>给简书写没纸了，在弄一个新页吧</h1><hr><h2 id="十二、绘制逻辑"><a href="#十二、绘制逻辑" class="headerlink" title="十二、绘制逻辑"></a>十二、绘制逻辑</h2><p>估计了解阅读器原理的人会说， 怎么先说绘制，为什么fbreader 怎么生成的Model，并且怎么计算的排版的为什么不写在前面？</p><p>之前不了解阅读器，我还以为是在做绘制的时候进行的排版处理呢，蜜汁尴尬啊！</p><p>fbreader的主要绘制流程实在ZLTextView里，这个类叫view，但是，他其实不是继承自Android的view类。只是叫这个名字而已。</p><p>首先，我们还是看FBReader 的  openBook 方法。并一路跟下去在FBReaderApp的openBookInternal方法中会调用 setView(BookTextView);</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-61a9080306a57029.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>调用了widget 的 repaint 方法，这个weight是ZLAndroidWidget<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLAndroidWidget::repaint()</span><br></pre></td></tr></table></figure></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">repaint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      postInvalidate();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>就这一句，那就看onDraw吧<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ZLAndroidWidget:</span>:onDraw(<span class="keyword">final</span> Canvas canvas)</span><br></pre></td></tr></table></figure></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="keyword">final</span> Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context context = getContext();</span><br><span class="line">    <span class="keyword">if</span> (context <span class="keyword">instanceof</span> FBReader) &#123;</span><br><span class="line">        ((FBReader) context).createWakeLock();<span class="comment">// 开启不断重绘自身的定时器</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">"A surprise: view's context is not an FBReader"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getAnimationProvider().inProgress()) &#123;</span><br><span class="line">        onDrawInScrolling(canvas);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onDrawStatic(canvas);</span><br><span class="line">        ZLApplication.Instance().onRepaintFinished();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最重要的也就是onDrawStatic(canvas);这个了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-503e37ed6ab681bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们看选中的这一句</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-ccba34786efd4723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这里执行了myWidget的drawOnBitmap方法</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-158b673635604874.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>调用了paint方法<br>这个view是ZLView的一个子类，直接看ZLTextView的paint</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLTextView::paint(ZLPaintContext context, PageIndex pageIndex)</span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绘制阅读界面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="keyword">void</span> paint(ZLPaintContext context, PageIndex pageIndex) &#123;</span><br><span class="line">        setContext(context);</span><br><span class="line">        <span class="comment">// 壁纸</span></span><br><span class="line">        <span class="keyword">final</span> ZLFile wallpaper = getWallpaperFile();</span><br><span class="line">        <span class="keyword">if</span> (wallpaper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.clear(wallpaper, getFillMode());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.clear(getBackgroundColor());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断文章为空的情况</span></span><br><span class="line">        <span class="keyword">if</span> (myModel == <span class="keyword">null</span> || myModel.getParagraphsNumber() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ZLTextPage page;</span><br><span class="line">        LogUtils.d(<span class="string">"ZLTextView -&gt; paint pageIndex: "</span> + pageIndex);</span><br><span class="line">        <span class="keyword">switch</span> (pageIndex) &#123;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">case</span> current:</span><br><span class="line">                page = myCurrentPage;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> previous:</span><br><span class="line">                page = myPreviousPage;</span><br><span class="line">                <span class="keyword">if</span> (myPreviousPage.PaintState == PaintStateEnum.NOTHING_TO_PAINT) &#123;</span><br><span class="line">                    preparePaintInfo(myCurrentPage);</span><br><span class="line">                    myPreviousPage.EndCursor.setCursor(myCurrentPage.StartCursor);</span><br><span class="line">                    myPreviousPage.PaintState = PaintStateEnum.END_IS_KNOWN;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> next:</span><br><span class="line">                page = myNextPage;</span><br><span class="line">                <span class="keyword">if</span> (myNextPage.PaintState == PaintStateEnum.NOTHING_TO_PAINT) &#123;</span><br><span class="line">                    preparePaintInfo(myCurrentPage);</span><br><span class="line">                    myNextPage.StartCursor.setCursor(myCurrentPage.EndCursor);</span><br><span class="line">                    myNextPage.PaintState = PaintStateEnum.START_IS_KNOWN;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        page.TextElementMap.clear();</span><br><span class="line">        <span class="comment">// 进行绘制之前的准备</span></span><br><span class="line">        preparePaintInfo(page);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (page.StartCursor.isNull() || page.EndCursor.isNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;ZLTextLineInfo&gt; lineInfos = page.LineInfos;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] labels = <span class="keyword">new</span> <span class="keyword">int</span>[lineInfos.size() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> x = getLeftMargin();</span><br><span class="line">        <span class="keyword">int</span> y = getTopMargin();</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">        ZLTextLineInfo previousInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (ZLTextLineInfo info : lineInfos) &#123;</span><br><span class="line">            info.adjust(previousInfo);</span><br><span class="line">            prepareTextLine(page, info, x, y);</span><br><span class="line">            y += info.Height + info.Descent + info.VSpaceAfter;</span><br><span class="line">            labels[++<span class="keyword">index</span>] = page.TextElementMap.size();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">index</span> == page.Column0Height) &#123;</span><br><span class="line">                y = getTopMargin();</span><br><span class="line">                x += page.getTextWidth() + getSpaceBetweenColumns();</span><br><span class="line">            &#125;</span><br><span class="line">            previousInfo = info;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x = getLeftMargin();</span><br><span class="line">        y = getTopMargin();</span><br><span class="line">        <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ZLTextLineInfo info : lineInfos) &#123;</span><br><span class="line">            drawHighlightings(page, info, labels[<span class="keyword">index</span>], labels[<span class="keyword">index</span> + <span class="number">1</span>], x, y);</span><br><span class="line">            y += info.Height + info.Descent + info.VSpaceAfter;</span><br><span class="line">            ++<span class="keyword">index</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">index</span> == page.Column0Height) &#123;</span><br><span class="line">                y = getTopMargin();</span><br><span class="line">                x += page.getTextWidth() + getSpaceBetweenColumns();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绘制这行文字</span></span><br><span class="line">        x = getLeftMargin();</span><br><span class="line">        y = getTopMargin();</span><br><span class="line">        <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ZLTextLineInfo info : lineInfos) &#123;</span><br><span class="line">            drawTextLine(page, info, labels[<span class="keyword">index</span>], labels[<span class="keyword">index</span> + <span class="number">1</span>]);</span><br><span class="line">            y += info.Height + info.Descent + info.VSpaceAfter;</span><br><span class="line">            ++<span class="keyword">index</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">index</span> == page.Column0Height) &#123;</span><br><span class="line">                y = getTopMargin();</span><br><span class="line">                x += page.getTextWidth() + getSpaceBetweenColumns();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制被选择的文字的区域</span></span><br><span class="line">        <span class="keyword">final</span> ZLTextRegion selectedElementRegion = getSelectedRegion(page);</span><br><span class="line">        <span class="keyword">if</span> (selectedElementRegion != <span class="keyword">null</span> &amp;&amp; myHighlightSelectedRegion) &#123;</span><br><span class="line">            selectedElementRegion.draw(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制选择文字时左右两个拖动柄</span></span><br><span class="line">        drawSelectionCursor(context, getSelectionCursorPoint(page, ZLTextSelectionCursor.Left));</span><br><span class="line">        drawSelectionCursor(context, getSelectionCursorPoint(page, ZLTextSelectionCursor.Right));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看到了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我也是这个时候才发现，原来，阅读器是先解析文件，然后进行排版（姑且叫他排版吧），然后进行绘制，是一条线下来的</span><br><span class="line"></span><br><span class="line">## 十三、排版资源</span><br><span class="line"></span><br><span class="line">fbreader解析epub的部分看了没啥意思，也就是按照epub格式进行解析。网上有很多想这样的库。所以，忘记这个， 直接看Model是怎么生成的吧！</span><br><span class="line"></span><br><span class="line">在绘制的时候，绘制文字调用了ZLTextView这个类的drawTextLine这个方法</span><br><span class="line">从代码上来看，绘制的时候取得了paragraph.getElement(wordIndex)进行绘制</span><br><span class="line">paragraph是通过info.ParagraphCursor 得到的 ， info是上面的lineInfos循环得到的子项的对象, 而lineInfos是page.LineInfos 得到的,而page是构造的时候new 出来的， 知道paint调用的时候经过了preparePaintInfo()方法的调用，才会赋值。</span><br><span class="line"></span><br><span class="line">有点乱， 想直接分析```paint```方法，在preparePaintInfo(page);方法之前，参数page还是一个初始化的状态，看没有看到相关的书的信息。那么给page复制时一定就是这个方法起到了作用。</span><br><span class="line"></span><br><span class="line">最重要的方法就是```ZLTextView::preparePaintInfo(ZLTextPage page)```其中的核心方法是```ZLTextView::buildInfos(ZLTextPage page, ZLTextWordCursor start, ZLTextWordCursor result)```代码比较负责，我理解的不是很透彻。只能说个大概：</span><br><span class="line">* 先绘制当前页</span><br><span class="line">* 绘制下一页的时候，将当前页的最后的指针给下一页</span><br><span class="line">* 绘制上一页的时候，将上一页的尾指针给当前页的头指针</span><br><span class="line">* 排版满一行获取下一行的信息</span><br><span class="line">* 排版满一页获取下一页的信息</span><br><span class="line"></span><br><span class="line">这里会存在一个问题，但我在绘制的时候，其实我是只知道当前也的文字，全本书是看不到的，fbreader是当每次翻页的时候才会排版绘制。并且，排版完之后就进行绘制。</span><br><span class="line"></span><br><span class="line">## 十四、绘制当前页所在的章节数</span><br><span class="line"></span><br><span class="line">正如上面一段说的， 在绘制的时候。其实是拿不到整章的数据的。看了一个下午。发现fbreader中提供了一个这样的方法</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/1285832-6e3656c319f29696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">这段代码在ZLTextView::buildInfos中。可以看到它但排版完一页之后，会判断了一下这不是这一章的结束。如果他们判断出是不是这一样的结束，那一定就有办法判断当前页属于那一章。</span><br><span class="line"></span><br><span class="line">这个方法存在与ZLTextParagraphCursor类中，那么我在绘制的时候可以拿到当前页，我们可以看一下它的bean。</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/1285832-ddbef323be1ff5ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">EndCursor这个指针就代表当前页的之后尾指针，我们要判断它是不是这一章的末尾。</span><br></pre></td></tr></table></figure></p><p>ZLTextParagraphCursor::isEndOfSection<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isEndOfSection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Model.getParagraph(Index).getKind() == ZLTextParagraph.Kind.END_OF_SECTION_PARAGRAPH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要是判断Model 的 getParagraph的之的kind，再继续跟getParagraph方法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLTextPlainMode<span class="variable">l:</span>:getParagraph(<span class="keyword">int</span> <span class="built_in">index</span>)</span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ZLTextParagraph getParagraph(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span> kind = myParagraphKinds[<span class="keyword">index</span>];</span><br><span class="line">    <span class="keyword">return</span> (kind == ZLTextParagraph.Kind.TEXT_PARAGRAPH) ?</span><br><span class="line">            <span class="keyword">new</span> ZLTextParagraphImpl(<span class="keyword">this</span>, <span class="keyword">index</span>) :</span><br><span class="line">            <span class="keyword">new</span> ZLTextSpecialParagraphImpl(kind, <span class="keyword">this</span>, <span class="keyword">index</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找了myParagraphKinds的index个元素， 然后构建了一个ZLTextParagraph 。<br>虽然我现在还不知道myParagraphKinds和index的具体意义。但我要是将当前页之前的所有Index之前的元素一一判断是不是isEndOfSection，然后手动计数，我就可以知道他是第几章的。问题就是我要遍历myParagraphKinds，而且越到后面，代价越大。但是这也是我相出来的唯一办法。先有在好，满足需求吧！（我从网上下了一本书，大概有一百多章，一万两千多页，这个Index会达到六十多万，手动滑稽）</p><p>思路有了开始动手，在ZLTextParagraphCursor类中增加一段</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-9460220164d03ff9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在绘制的时候，拿到当前页page<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int chapterIndex</span> = page.EndCursor.getParagraphCursor().getChapterIndex();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android -- FBReader 阅读笔记 （一）</title>
      <link href="/2017/06/07/Android-FBReader-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/06/07/Android-FBReader-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="FBREADER-源码阅读笔记"><a href="#FBREADER-源码阅读笔记" class="headerlink" title="FBREADER 源码阅读笔记"></a>FBREADER 源码阅读笔记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是我在读源码时候的笔记。是我的一个习惯吧！在阅读源码的时候会记录一下思路，省得自己会忘记，相当于“保护现场”了吧。由于是一边看代码一边记录，一定会有很多的错误，请大家见谅。</p><h2 id="一、代码导入"><a href="#一、代码导入" class="headerlink" title="一、代码导入"></a>一、代码导入</h2><p>在 <a href="https://github.com/geometer/FBReaderJ" target="_blank" rel="noopener">https://github.com/geometer/FBReaderJ</a> 这个地址上就是fbreader的java项目。</p><p>版本库上面的项目是eclipse编写的，所以第一步，想办法把这个项目变成AS上开发的</p><p>（因为种种原因，我并没有clone github上的源码，在我们svn存在着之前的一个fbreader版本，是2.0的）</p><h3 id="1、目的"><a href="#1、目的" class="headerlink" title="1、目的"></a>1、目的</h3><p>导入fbreader这个项目是想在自己的程序中加入阅读器的功能。但从头开始开发时间长，并且没做过。所以参考了fbreader，在源码的基础上做二次开发。</p><p>代码同步下来之后，发现。fbreader并不是一个开源库（SDK）,而是一个完整的项目，部分功能使用了jni开发，并且支持插件化，通过aidl，进行组件之间的通讯</p><p>因为要导入现有的项目（重构ing），想法是将fbreader整个项目编译成aar，然后导入现有项目。因为时间短，起初可以先把整个fbreader导入，之后对fbreader研究之后，或去掉相应模块或者重新开发</p><h3 id="2、导入"><a href="#2、导入" class="headerlink" title="2、导入"></a>2、导入</h3><p>导入过程比较繁琐，又没什么技术含量。主要就是将之前ant构建的项目换成gradle构建。</p><p>这里设计jni和aidl的目录结构有所变化，按照android studio上面的结构统一创建就好</p><p>（这里我犯了一个错误，fbreader的主项目千万别改报名，就按照之前的来，否则要改掉很多文件的import，相当费事儿。千万别改，千万别改，千万别改）</p><h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><p>先用ndk-build编出so， 然后在导入或者直接用android studio 带c++ 一起编， 都可以。反正 studio 也支持编译c语言了。</p><p>这里我直接使用ndk-build 编出so库，然后将so库添加到我的项目中去。省着clean项目的时候还要去重新编译，挺耗时间的。</p><h2 id="二、源码目录"><a href="#二、源码目录" class="headerlink" title="二、源码目录"></a>二、源码目录</h2><p>源码中的目录结构，其实我是在公司的svn里看到的，不知道谁写的，看时间，写这个文章的时候我刚上大学。</p><p>我就直接撸过来了。<br><img src="http://upload-images.jianshu.io/upload_images/1285832-b85eda8375ed7eba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>用红笔画掉的是fbreader的一些三方以来，fbreader是主要的源码目录，</p><p>app 是我用来模仿公司的主项目的，其实就是一句startActivity。</p><p>以下是源码的一些目录<br><img src="http://upload-images.jianshu.io/upload_images/1285832-64150c323157d15b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>jni 的文件目录</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-5f91e1961d40a697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>整个项目的， 大概看一看</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-fef31aaa09c24d3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="三、无目的的瞎看"><a href="#三、无目的的瞎看" class="headerlink" title="三、无目的的瞎看"></a>三、无目的的瞎看</h2><p>网上的资源不是很多，项目也较老了。再加上从未接触过阅读相关的项目。扎铁了老心。没有头绪就从头看代码吧。</p><p>再 AndroidManifest 能知道应用的主activity是 <strong>org.geometerplus.android.fbreader.FBReader</strong></p><p>(这里强插一句， 想运行fbreader这个项目，application是要继承自FBReaderApplication；还要修改FBReaderIntents类的第一行的包名，保持与项目的包名一致)</p><p>在FBReader先无目的看一下 <strong>FBReader::onCreate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">        <span class="comment">// 捕获错误</span></span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> UncaughtExceptionHandler(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        bindService(</span><br><span class="line">                <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DataService.class),</span><br><span class="line">                DataConnection,</span><br><span class="line">                DataService.BIND_AUTO_CREATE</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Config config = Config.Instance();</span><br><span class="line">        config.runOnConnect(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                config.requestAllValuesForGroup(<span class="string">"Options"</span>);</span><br><span class="line">                config.requestAllValuesForGroup(<span class="string">"Style"</span>);</span><br><span class="line">                config.requestAllValuesForGroup(<span class="string">"LookNFeel"</span>);</span><br><span class="line">                config.requestAllValuesForGroup(<span class="string">"Fonts"</span>);</span><br><span class="line">                config.requestAllValuesForGroup(<span class="string">"Colors"</span>);</span><br><span class="line">                config.requestAllValuesForGroup(<span class="string">"Files"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ZLAndroidLibrary zlibrary = getZLibrary();</span><br><span class="line">        myShowStatusBarFlag = zlibrary.ShowStatusBarOption.getValue();</span><br><span class="line"></span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line">        myRootView = (RelativeLayout) findViewById(R.id.root_view);</span><br><span class="line">        myMainView = (ZLAndroidWidget) findViewById(R.id.main_view);</span><br><span class="line">        <span class="comment">// setting keyboard default mode</span></span><br><span class="line">        setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);</span><br><span class="line"></span><br><span class="line">        zlibrary.setActivity(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        myFBReaderApp = (FBReaderApp) FBReaderApp.Instance();</span><br><span class="line">        <span class="keyword">if</span> (myFBReaderApp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            myFBReaderApp = <span class="keyword">new</span> FBReaderApp(<span class="keyword">new</span> BookCollectionShadow());</span><br><span class="line">        &#125;</span><br><span class="line">        getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">null</span>);</span><br><span class="line">        myBook = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.setWindow(<span class="keyword">this</span>);</span><br><span class="line">        myFBReaderApp.initWindow();</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.setExternalFileOpener(<span class="keyword">new</span> ExternalFileOpener(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        getWindow().setFlags(</span><br><span class="line">                WindowManager.LayoutParams.FLAG_FULLSCREEN,</span><br><span class="line">                myShowStatusBarFlag ? <span class="number">0</span> : WindowManager.LayoutParams.FLAG_FULLSCREEN</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (myFBReaderApp.getPopupById(TextSearchPopup.ID) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> TextSearchPopup(myFBReaderApp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (myFBReaderApp.getPopupById(NavigationPopup.ID) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> NavigationPopup(myFBReaderApp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (myFBReaderApp.getPopupById(SelectionPopup.ID) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> SelectionPopup(myFBReaderApp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_LIBRARY, <span class="keyword">new</span> ShowLibraryAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_PREFERENCES, <span class="keyword">new</span> ShowPreferencesAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_BOOK_INFO, <span class="keyword">new</span> ShowBookInfoAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_TOC, <span class="keyword">new</span> ShowTOCAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_BOOKMARKS, <span class="keyword">new</span> ShowBookmarksAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_NETWORK_LIBRARY, <span class="keyword">new</span> ShowNetworkLibraryAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_MENU, <span class="keyword">new</span> ShowMenuAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_NAVIGATION, <span class="keyword">new</span> ShowNavigationAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SEARCH, <span class="keyword">new</span> SearchAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHARE_BOOK, <span class="keyword">new</span> ShareBookAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SELECTION_SHOW_PANEL, <span class="keyword">new</span> SelectionShowPanelAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SELECTION_HIDE_PANEL, <span class="keyword">new</span> SelectionHidePanelAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SELECTION_COPY_TO_CLIPBOARD, <span class="keyword">new</span> SelectionCopyAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SELECTION_SHARE, <span class="keyword">new</span> SelectionShareAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SELECTION_TRANSLATE, <span class="keyword">new</span> SelectionTranslateAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SELECTION_BOOKMARK, <span class="keyword">new</span> SelectionBookmarkAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.addAction(ActionCode.PROCESS_HYPERLINK, <span class="keyword">new</span> ProcessHyperlinkAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.OPEN_VIDEO, <span class="keyword">new</span> OpenVideoAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SHOW_CANCEL_MENU, <span class="keyword">new</span> ShowCancelMenuAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line"></span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SET_SCREEN_ORIENTATION_SYSTEM, <span class="keyword">new</span> SetScreenOrientationAction(<span class="keyword">this</span>, myFBReaderApp, ZLibrary.SCREEN_ORIENTATION_SYSTEM));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SET_SCREEN_ORIENTATION_SENSOR, <span class="keyword">new</span> SetScreenOrientationAction(<span class="keyword">this</span>, myFBReaderApp, ZLibrary.SCREEN_ORIENTATION_SENSOR));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SET_SCREEN_ORIENTATION_PORTRAIT, <span class="keyword">new</span> SetScreenOrientationAction(<span class="keyword">this</span>, myFBReaderApp, ZLibrary.SCREEN_ORIENTATION_PORTRAIT));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.SET_SCREEN_ORIENTATION_LANDSCAPE, <span class="keyword">new</span> SetScreenOrientationAction(<span class="keyword">this</span>, myFBReaderApp, ZLibrary.SCREEN_ORIENTATION_LANDSCAPE));</span><br><span class="line">        <span class="keyword">if</span> (ZLibrary.Instance().supportsAllOrientations()) &#123;</span><br><span class="line">            myFBReaderApp.addAction(ActionCode.SET_SCREEN_ORIENTATION_REVERSE_PORTRAIT, <span class="keyword">new</span> SetScreenOrientationAction(<span class="keyword">this</span>, myFBReaderApp, ZLibrary.SCREEN_ORIENTATION_REVERSE_PORTRAIT));</span><br><span class="line">            myFBReaderApp.addAction(ActionCode.SET_SCREEN_ORIENTATION_REVERSE_LANDSCAPE, <span class="keyword">new</span> SetScreenOrientationAction(<span class="keyword">this</span>, myFBReaderApp, ZLibrary.SCREEN_ORIENTATION_REVERSE_LANDSCAPE));</span><br><span class="line">        &#125;</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.OPEN_WEB_HELP, <span class="keyword">new</span> OpenWebHelpAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line">        myFBReaderApp.addAction(ActionCode.INSTALL_PLUGINS, <span class="keyword">new</span> InstallPluginsAction(<span class="keyword">this</span>, myFBReaderApp));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Intent intent = getIntent();</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line"></span><br><span class="line">        myOpenBookIntent = intent;</span><br><span class="line">        <span class="keyword">if</span> ((intent.getFlags() &amp; Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FBReaderIntents.Action.CLOSE.equals(action)) &#123;</span><br><span class="line">                myCancelIntent = intent;</span><br><span class="line">                myOpenBookIntent = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FBReaderIntents.Action.PLUGIN_CRASH.equals(action)) &#123;</span><br><span class="line">                myFBReaderApp.ExternalBook = <span class="keyword">null</span>;</span><br><span class="line">                myOpenBookIntent = <span class="keyword">null</span>;</span><br><span class="line">                getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        myFBReaderApp.openBook(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>onCreate的代码好长一堆，还什么都看不懂。最后一段貌似是openBook 的操作， 但是intent和action 都是空的，根本不执行FBReader也不存在父类，只能是在<strong>onResume()</strong>中了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FBReader::onResume()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line"></span><br><span class="line">    SyncOperations.enableSync(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    myStartTimer = <span class="keyword">true</span>;</span><br><span class="line">    Config.Instance().runOnConnect(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> brightnessLevel =</span><br><span class="line">                    getZLibrary().ScreenBrightnessLevelOption.getValue();</span><br><span class="line">            <span class="keyword">if</span> (brightnessLevel != <span class="number">0</span>) &#123;</span><br><span class="line">                setScreenBrightness(brightnessLevel);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setScreenBrightnessAuto();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (getZLibrary().DisableButtonLightsOption.getValue()) &#123;</span><br><span class="line">                setButtonLight(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            getCollection().bindToService(FBReader.<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">final</span> BookModel model = myFBReaderApp.Model;</span><br><span class="line">                    <span class="keyword">if</span> (model == <span class="keyword">null</span> || model.Book == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    onPreferencesUpdate(myFBReaderApp.Collection.getBookById(model.Book.getId()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    registerReceiver(myBatteryInfoReceiver, <span class="keyword">new</span> IntentFilter(Intent.ACTION_BATTERY_CHANGED));</span><br><span class="line">    IsPaused = <span class="keyword">false</span>;</span><br><span class="line">    myResumeTimestamp = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span> (OnResumeAction != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Runnable action = OnResumeAction;</span><br><span class="line">        OnResumeAction = <span class="keyword">null</span>;</span><br><span class="line">        action.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    registerReceiver(mySyncUpdateReceiver, <span class="keyword">new</span> IntentFilter(SyncOperations.UPDATED));</span><br><span class="line"></span><br><span class="line">    SetScreenOrientationAction.setOrientation(<span class="keyword">this</span>, ZLibrary.Instance().getOrientationOption().getValue());</span><br><span class="line"></span><br><span class="line">    LogUtils.d(<span class="string">"FBReader -&gt; onResume cancelIntent: "</span> + myCancelIntent);</span><br><span class="line">    LogUtils.d(<span class="string">"FBReader -&gt; onResume myOpenBookIntent: "</span> + myOpenBookIntent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (myCancelIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Intent intent = myCancelIntent;</span><br><span class="line">        myCancelIntent = <span class="keyword">null</span>;</span><br><span class="line">        getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                runCancelAction(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (myOpenBookIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// it's maybe run here</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = myOpenBookIntent;</span><br><span class="line">        myOpenBookIntent = <span class="keyword">null</span>;</span><br><span class="line">        getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                openBook(intent, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (myFBReaderApp.getCurrentServerBook() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                myFBReaderApp.useSyncInfo(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (myFBReaderApp.Model == <span class="keyword">null</span> &amp;&amp; myFBReaderApp.ExternalBook != <span class="keyword">null</span>) &#123;</span><br><span class="line">        getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                myFBReaderApp.openBook(myFBReaderApp.ExternalBook, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                myFBReaderApp.useSyncInfo(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PopupPanel.restoreVisibilities(myFBReaderApp);</span><br><span class="line">    ApiServerImplementation.sendEvent(<span class="keyword">this</span>, ApiListener.EVENT_READ_MODE_OPENED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一顿的输出log并且debug代码，发现执行了onResume中最后的几个分支语句的第二个分支。</p><p>bindToService 这个是什么？ 先不管它，往下看</p><p>接下来调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FBReader::openBook(Intent intent, <span class="keyword">final</span> Runnable action, <span class="keyword">boolean</span> force)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">openBook</span><span class="params">(Intent intent, <span class="keyword">final</span> Runnable action, <span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!force &amp;&amp; myBook != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myBook = FBReaderIntents.getBookExtra(intent);</span><br><span class="line">        <span class="keyword">final</span> Bookmark bookmark = FBReaderIntents.getBookmarkExtra(intent);</span><br><span class="line">        LogUtils.d(<span class="string">"FBReader -&gt; openBook myBook: "</span> + myBook);</span><br><span class="line">        <span class="keyword">if</span> (myBook == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Uri data = intent.getData();</span><br><span class="line">            LogUtils.d(<span class="string">"FBReader -&gt; openBook data: "</span> + data);</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                myBook = createBookForFile(ZLFile.createFileByPath(data.getPath()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (myBook != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ZLFile file = myBook.File;</span><br><span class="line">            LogUtils.d(<span class="string">"FBReader -&gt; openBook file path: "</span> + file.getPath());</span><br><span class="line">            LogUtils.d(<span class="string">"FBReader -&gt; openBook file exists: "</span> + file.exists());</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.getPhysicalFile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    file = file.getPhysicalFile();</span><br><span class="line">                &#125;</span><br><span class="line">                UIUtil.showErrorMessage(<span class="keyword">this</span>, <span class="string">"fileNotFound"</span>, file.getPath());</span><br><span class="line">                myBook = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开app 时 正常myBook为空 intent.getData 为空</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 在主线程运行</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 正常打开时myBook， bookmark， action 三个参数都是空</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">        Config.Instance().runOnConnect(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                LogUtils.d(<span class="string">"FBReader -&gt; openBook run thread: "</span> + Thread.currentThread());</span><br><span class="line">                LogUtils.d(<span class="string">"FBReader -&gt; openBook run myBook: "</span> + myBook);</span><br><span class="line">                LogUtils.d(<span class="string">"FBReader -&gt; openBook run bookmark: "</span> + bookmark);</span><br><span class="line">                LogUtils.d(<span class="string">"FBReader -&gt; openBook run action: "</span> + action);</span><br><span class="line">                myFBReaderApp.openBook(myBook, bookmark, action);</span><br><span class="line">                AndroidFontUtil.clearFontCache();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>直接能跟到最后几行的 <strong>myFBReaderApp.openBook(myBook, bookmark, action);</strong> 这一句</p><p>log输出，这三个参数都是空的。执行了FBReaderApp的openBook方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FBReaderApp::(Book book, <span class="keyword">final</span> Bookmark bookmark, Runnable postAction)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openBook</span><span class="params">(Book book, <span class="keyword">final</span> Bookmark bookmark, Runnable postAction)</span> </span>&#123;</span><br><span class="line">LogUtils.d(<span class="string">"FBReaderApp -&gt; openBook: "</span> + Model);</span><br><span class="line"><span class="keyword">if</span> (Model != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (book == <span class="keyword">null</span> || bookmark == <span class="keyword">null</span> &amp;&amp; book.File.equals(Model.Book.File)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (book == <span class="keyword">null</span>) &#123;</span><br><span class="line">book = getCurrentServerBook();</span><br><span class="line"><span class="keyword">if</span> (book == <span class="keyword">null</span>) &#123;</span><br><span class="line">showBookNotFoundMessage();</span><br><span class="line">book = Collection.getRecentBook(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (book == <span class="keyword">null</span> || !book.File.exists()) &#123;</span><br><span class="line"><span class="comment">// get helpfile</span></span><br><span class="line">book = Collection.getBookByFile(BookUtil.getHelpFile());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (book == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Book bookToOpen = book;</span><br><span class="line">bookToOpen.addLabel(Book.READ_LABEL);</span><br><span class="line">Collection.saveBook(bookToOpen);</span><br><span class="line"></span><br><span class="line">LogUtils.d(<span class="string">"FBReaderApp -&gt; openBook bookToOpen: "</span> + bookToOpen);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> SynchronousExecutor executor = createExecutor(<span class="string">"loadingBook"</span>);</span><br><span class="line">executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">openBookInternal(bookToOpen, bookmark, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, postAction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个参数，大体上能猜测出是什么意思，但是，并不是很清晰。<br>执行到getCurrentServerBook一句时，但我们第一次启动应用是，此时的book对象是空，即使是getCurrentServerBook执行完之后还是空的。之后便去找到这个帮助文档getHelpFile。 然后转化成book对象。<br>之后，貌似创建了线程。</p><p>SynchronousExecutor这个东西是个接口由<strong>ZLApplication:: createExecutor(String key)</strong> 创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLApplication:: createExecutor(String key)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> SynchronousExecutor <span class="title">createExecutor</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (myWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> myWindow.createExecutor(key);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> myDummyExecutor;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里调用了myWindow的createExecutor方法，myWindow（ZLApplicationWindow）是 一个接口，FBReader实现了这个接口。<br>接着，调用了UIUtil的createExecutor方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIUtil::createExecutor(<span class="keyword">final</span> Activity activity, <span class="keyword">final</span> String key)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ZLApplication.<span class="function">SynchronousExecutor <span class="title">createExecutor</span><span class="params">(<span class="keyword">final</span> Activity activity, <span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ZLApplication.SynchronousExecutor() &#123;</span><br><span class="line">        <span class="comment">// 获得相应的文字资源</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ZLResource myResource =</span><br><span class="line">                ZLResource.resource(<span class="string">"dialog"</span>).getResource(<span class="string">"waitMessage"</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String myMessage = myResource.getResource(key).getValue();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> ProgressDialog myProgress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable action, <span class="keyword">final</span> Runnable uiPostAction)</span> </span>&#123;</span><br><span class="line">            activity.runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 在ui线程中创建一个对话框</span></span><br><span class="line">                    myProgress = ProgressDialog.show(activity, <span class="keyword">null</span>, myMessage, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">// 在线程中执行第一个参数</span></span><br><span class="line">                    <span class="keyword">final</span> Thread runner = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// 在线程中运行第一个参数，也就是打开图书（在）</span></span><br><span class="line">                            action.run();</span><br><span class="line">                            <span class="comment">// 执行完之后，关闭这个对话框</span></span><br><span class="line">                            activity.runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        myProgress.dismiss();</span><br><span class="line">                                        myProgress = <span class="keyword">null</span>;</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                        e.printStackTrace();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (uiPostAction != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        uiPostAction.run();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    runner.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">                    runner.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(<span class="keyword">final</span> ProgressDialog progress, <span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (progress == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            activity.runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    progress.setMessage(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAux</span><span class="params">(String key, Runnable runnable)</span> </span>&#123;</span><br><span class="line">            setMessage(myProgress, myResource.getResource(key).getValue());</span><br><span class="line">            runnable.run();</span><br><span class="line">            setMessage(myProgress, myMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看execute方法，这里先显示一个进度框，然后执行第一个参数<strong>action</strong>，然后关闭进度框，这个action 就是在 <strong>FBReaderApp::openBook(Book book, final Bookmark bookmark, Runnable postAction)</strong>中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FBReaderApp::openBookInternal(bookToOpen, bookmark, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开内部的图书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">openBookInternal</span><span class="params">(Book book, Bookmark bookmark, <span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可能是跳转书签, 书签为空</span></span><br><span class="line">    LogUtils.d(<span class="string">"FBReaderApp -&gt; openBookInternal bookmark: "</span> + bookmark);</span><br><span class="line">    <span class="keyword">if</span> (!force &amp;&amp; Model != <span class="keyword">null</span> &amp;&amp; book.equals(Model.Book)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bookmark != <span class="keyword">null</span>) &#123;</span><br><span class="line">            gotoBookmark(bookmark, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onViewChanged();</span><br><span class="line">    storePosition();</span><br><span class="line"></span><br><span class="line">    BookTextView.setModel(<span class="keyword">null</span>);</span><br><span class="line">    FootnoteView.setModel(<span class="keyword">null</span>);</span><br><span class="line">    clearTextCaches();</span><br><span class="line">    Model = <span class="keyword">null</span>;</span><br><span class="line">    ExternalBook = <span class="keyword">null</span>;</span><br><span class="line">    System.gc();</span><br><span class="line">    System.gc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 猜测是根据book，加载一个用来读取这个book的插件</span></span><br><span class="line">    <span class="keyword">final</span> FormatPlugin plugin = book.getPluginOrNull();</span><br><span class="line">    <span class="comment">// 此时，阅读默认帮助文档时，插件为fb2</span></span><br><span class="line">    LogUtils.d(<span class="string">"FBReaderApp -&gt; openBookInternal plugin: "</span> + plugin);</span><br><span class="line">    <span class="keyword">if</span> (plugin <span class="keyword">instanceof</span> ExternalFormatPlugin) &#123;</span><br><span class="line">        ExternalBook = book;</span><br><span class="line">        <span class="keyword">final</span> Bookmark bm;</span><br><span class="line">        <span class="keyword">if</span> (bookmark != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bm = bookmark;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ZLTextPosition pos = getStoredPosition(book);</span><br><span class="line">            <span class="keyword">if</span> (pos == <span class="keyword">null</span>) &#123;</span><br><span class="line">                pos = <span class="keyword">new</span> ZLTextFixedPosition(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bm = <span class="keyword">new</span> Bookmark(book, <span class="string">""</span>, pos, pos, <span class="string">""</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        myExternalFileOpener.openFile((ExternalFormatPlugin) plugin, book, bm);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个BookModel， 通过判断插件的type</span></span><br><span class="line">        Model = BookModel.createModel(book);</span><br><span class="line">        <span class="comment">// BookCollectionShadow 暂时不懂</span></span><br><span class="line">        Collection.saveBook(book);</span><br><span class="line">        ZLTextHyphenator.Instance().load(book.getLanguage());</span><br><span class="line">        <span class="comment">// 设置显示时的一些属性</span></span><br><span class="line">        BookTextView.setModel(Model.getTextModel());</span><br><span class="line">        setBookmarkHighlightings(BookTextView, <span class="keyword">null</span>);</span><br><span class="line">        gotoStoredPosition();</span><br><span class="line">        <span class="keyword">if</span> (bookmark == <span class="keyword">null</span>) &#123;</span><br><span class="line">            setView(BookTextView);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            gotoBookmark(bookmark, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Collection.addBookToRecentList(book);</span><br><span class="line">        <span class="keyword">final</span> StringBuilder title = <span class="keyword">new</span> StringBuilder(book.getTitle());</span><br><span class="line">        <span class="keyword">if</span> (!book.authors().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> first = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (Author a : book.authors()) &#123;</span><br><span class="line">                title.append(first ? <span class="string">" ("</span> : <span class="string">", "</span>);</span><br><span class="line">                title.append(a.DisplayName);</span><br><span class="line">                first = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            title.append(<span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setTitle(title.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BookReadingException e) &#123;</span><br><span class="line">        processException(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getViewWidget().reset();</span><br><span class="line">    getViewWidget().repaint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (FileEncryptionInfo info : book.getPlugin().readEncryptionInfos(book)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; !EncryptionMethod.isSupported(info.Method)) &#123;</span><br><span class="line">                showErrorMessage(<span class="string">"unsupportedEncryptionMethod"</span>, book.File.getPath());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BookReadingException e) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前能读懂的都在注释上，貌似在执行 <strong>setView(BookTextView)</strong>时，就会进行渲染的操作了</p><p>把帮助文档当成图书的话， 第一次出现对书的解析应该就是在BookUtil的getHelpFile的方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookUtil::getHelpFile()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZLResourceFile <span class="title">getHelpFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Locale locale = Locale.getDefault();</span><br><span class="line"><span class="comment">// 获取local，取得帮助文档</span></span><br><span class="line">ZLResourceFile file = ZLResourceFile.createResourceFile(</span><br><span class="line"><span class="string">"data/help/MiniHelp."</span> + locale.getLanguage() + <span class="string">"_"</span> + locale.getCountry() + <span class="string">".fb2"</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file = ZLResourceFile.createResourceFile(</span><br><span class="line"><span class="string">"data/help/MiniHelp."</span> + locale.getLanguage() + <span class="string">".fb2"</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ZLResourceFile.createResourceFile(<span class="string">"data/help/MiniHelp.en.fb2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过固定的路径，调用了ZLResourceFile 的 createResourceFile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLResourceFile :: createResourceFile(String path)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZLResourceFile <span class="title">createResourceFile</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">ZLResourceFile file = ourCache.get(path);</span><br><span class="line"><span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">file = ZLibrary.Instance().createResourceFile(path);</span><br><span class="line">ourCache.put(path, file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个简单的缓存，然后调用了ZLibrary的createResourceFile方法。ZLibrary是个抽象类，ZLAndroidLibrary 实现了它， 并在application中进行了初始化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLAndroidLibrary::createResourceFile(String path)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ZLResourceFile <span class="title">createResourceFile</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> AndroidAssetsFile(path);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里，通过文件的路径，创建了一个AndroidAssetsFile。AndroidAssetsFile继承了ZLResourceFile，是ZLFile的子类。</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-9f467aaa18ed9b94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>ZLFile 是fbreader对所有文件的同意描述。上图是继承树。</p><p>以下是从网络上摘取的资料</p><ul><li><p>ResourceFile类专门用来处理资源文件，这一章中要解析的assets文件夹下的资源文件都可以ZLResourceFile类来处理</p></li><li><p>ZLResourceFile类专门用来处理资源文件，这一章中要解析的assets文件夹下的资源文件都可以ZLResourceFile类来处理。</p></li><li><p>ZLPhysicalFile类专门用来处理普通文件，eoub文件就可以用一个ZLPhysicalFile类来代表。</p></li><li><p>ZLZipEntryFile类用来处理epub文件内部的xml文件，这个类会在第五章“epub文件处理 – 解压epub文件”中出现。</p></li></ul><p>这三个文件类都实现了getInputStream抽象方法，不用的文件类会通过这个方法获得针对当前文件类的字节流类。</p><p>AndroidAssetsFile类（ZLResourceFile类的子类）的getInputStream方法会返回AssetInputStream类，这个类可以将资源文件转换成byte数组。</p><p>ZLPhysicalFile类的getInputStream方法会返回FileInputStream类，这个类可以将普通的文件转换成byte数组。</p><p>ZLZipEntryFile类的getInputStream方法会返回FileInputStream类，这个类可以将epub内部压缩过的xml文件转换成可以正常解析的byte数组</p><p>下面看一下AndroidAssetsFile的getInputStream方法。可以猜测，读取帮助文档的时候调用getInputStream会返回这个文件的InputStream</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AndroidAssetsFile:: getInputStream()</span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> myApplication.getAssets().open(getPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到ZLResourceFile 对象之后，我们回到<strong>FBReaderApp::openBook</strong> 这个方法中。<br>可以看到通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book = Collection.getBookByFile(BookUtil.getHelpFile());</span><br></pre></td></tr></table></figure><p>将ZLResourceFile对象转成了Book 对象了。<br>Collection是一个接口IBookCollection， 这里是BookCollectionShadow实现了这个接口，在FBReaderApp的onCreate方法，我们可以看到这句</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-0f11ada01dfdcc4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>BookCollectionShadow又是什么呢？我们还要往下分析</p><p>上面的代码中创建了一个FBReaderApp对象， 至于这个对象是干什么的，现在还不知道。<br>接下来，getCollection 并 调用了 bindToService方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FBReader::getCollection()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> BookCollectionShadow <span class="title">getCollection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (BookCollectionShadow) myFBReaderApp.Collection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用的正是这个主activity的一个方法。返回的对象是FBReaderApp 的 Collection变量，这个正式刚才创建的BookCollectionShadow 实现了IBookCollection接口。</p><p>接着调用了BookCollectionShadow的bindToService方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookCollectionShadow::bindToService(Context context, Runnable onBindAction)</span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public synchronized <span class="keyword">void</span> bindToService(Context <span class="keyword">context</span>, Runnable onBindAction) &#123;</span><br><span class="line">       <span class="keyword">if</span> (myInterface != <span class="literal">null</span> &amp;&amp; myContext == <span class="keyword">context</span>) &#123;</span><br><span class="line"><span class="comment">// not first connect</span></span><br><span class="line"><span class="keyword">if</span> (onBindAction != <span class="literal">null</span>) &#123;</span><br><span class="line">Config<span class="variable">.Instance</span>()<span class="variable">.runOnConnect</span>(onBindAction);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// first connect</span></span><br><span class="line"><span class="keyword">if</span> (onBindAction != <span class="literal">null</span>) &#123;</span><br><span class="line">myOnBindActions<span class="variable">.add</span>(onBindAction);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">context</span><span class="variable">.bindService</span>(</span><br><span class="line">FBReaderIntents<span class="variable">.internalIntent</span>(FBReaderIntents<span class="variable">.Action</span><span class="variable">.LIBRARY_SERVICE</span>),</span><br><span class="line"><span class="keyword">this</span>,</span><br><span class="line">LibraryService<span class="variable">.BIND_AUTO_CREATE</span></span><br><span class="line">);</span><br><span class="line">myContext = <span class="keyword">context</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里执行了一句很熟悉的<strong>context.bindService</strong>方法，这里用到了aidl。这方面的问题就不记录了，跟主向无关。<br>bindService方法有三个参数，第二个参数传了BookCollectionShadow本身， 我们知道，bindService的第二个参数传的是ServiceConnection接口，在这里面， 我们可以调用aidl文件生命的方法，进行跨进程的通讯。也不知道fbreader为什么弄这么多进程是想干什么。</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c99fa50150a7cae8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>果然BookCollectionShadow实现了ServiceConnection，并且myInterface真是那个aidl的全局变量， 我们可以通过它，完成与服务端的沟通。</p><hr><h2 id="四、怎样获得book对象"><a href="#四、怎样获得book对象" class="headerlink" title="四、怎样获得book对象"></a>四、怎样获得book对象</h2><p>经过一下午的瞎看，大致的熟悉了一下fbreader的源码。</p><p>带着问题学习总是最快的，那么，fbreader到底是怎样解析epub文件的呢。我们得找一个入口。在项目中，长按菜单键，会弹出一个功能列表，会看到一个本地书柜，一顿操作之后，我们可以找到一个我事先导入的一个电子书</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-536bb4e37ccc3d4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>最后我们会来到这个界面</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-fce1a35e1d34fcca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在茫茫码海中怎么找到这个activity，用这样一条命令<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity <span class="built_in">top</span> | <span class="type">grep</span> ACTIVITY --color</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-61bf63d9a9c654d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在这个activitiy中， mybook是通过intent传入的，所以找上个页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/1285832-748d5e53cba5441a.png)</span><br><span class="line"></span><br><span class="line">ListActivity是什么？ 没用过，TreeActivity自己写的， 太复杂。想着在LibraryActivity中能找到一些方法</span><br></pre></td></tr></table></figure></p><p>LibraryActivity::onListItemClick(ListView listView, View view, int position, long rowId)<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView listView, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> rowId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LibraryTree tree = (LibraryTree)getListAdapter().getItem(position);</span><br><span class="line">    <span class="keyword">final</span> Book book = tree.getBook();</span><br><span class="line">    LogUtils.d(<span class="string">"LibraryActivity -&gt; onListItemClick book: "</span> + book);</span><br><span class="line">    <span class="keyword">if</span> (book != <span class="keyword">null</span>) &#123;</span><br><span class="line">        showBookInfo(book);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        openTree(tree);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个方法中， 是通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">public Book getBook() &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这尼玛返回空！！！<br> tree是LibraryTree的一个实例，在TreeAdapter的getItem(int position) 方法中得到的<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FBTree getItem(<span class="keyword">int</span> <span class="built_in">position</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> myItems.<span class="built_in">get</span>(<span class="built_in">position</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>存放在了叫<figure class="highlight plain"><figcaption><span>final List<fbtree> myItems;```这样的一个list之中。</fbtree></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一路尾随，不是跟踪myItems， 看一下TreeAdapter的replaceAll方法</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/1285832-34f72c5912915c2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">根据名字我们能判断。得到现在树的子树，然后添加到myItem中去的。那么我们知道现在的树， 或者现在树的子树是什么，应该就可以得到答案了。</span><br><span class="line"></span><br><span class="line">现在的树集成关系是这样的</span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/1285832-5bb780b3dd24cca2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">又在onListItemClick方法中强装成LibraryTree， 我们只需关注LibraryTree的之类就行了</span><br><span class="line"></span><br><span class="line">这个树通过getTreeByKey得到</span><br></pre></td></tr></table></figure></p><p>LibraryActivity::getTreeByKey(FBTree.Key key)<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function">LibraryTree <span class="title">getTreeByKey</span><span class="params">(FBTree.Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key != <span class="keyword">null</span> ? myRootTree.getLibraryTree(key) : myRootTree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">deleteRootTree</span><span class="params">()</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><p>最后我们要找的这棵树实际跟<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myRootTree在onCreate的时候创建</span><br></pre></td></tr></table></figure></p><p>LibraryActivity::onCreate(Bundle icicle)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>@Override<br>protected void onCreate(Bundle icicle) {<br>    super.onCreate(icicle);<br>    Log.d(TAG, “start onCreate function: “);<br>    mySelectedBook = FBReaderIntents.getBookExtra(getIntent());<br>    new LibraryTreeAdapter(this);<br>    getListView().setTextFilterEnabled(true);<br>    getListView().setOnCreateContextMenuListener(this);<br>    deleteRootTree();<br>    myCollection.bindToService(this, new Runnable() {<br>        public void run() {<br>            setProgressBarIndeterminateVisibility(!myCollection.status().IsCompleted);<br>            myRootTree = new RootTree(myCollection);<br>            myCollection.addListener(LibraryActivity.this);<br>            init(getIntent());<br>        }<br>    });<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在倒数第二行add的接口的回掉在这里</span><br><span class="line"></span><br><span class="line">![](http:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-60b8eb000aceeeb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line">在```onBookEvent中一定是这个树的来源```，看来我们要去另一个进程里看看了</span><br><span class="line"></span><br><span class="line">这个服务和之前的一样LibraryService。我们跟进LibraryService</span><br></pre></td></tr></table></figure></p><p>@Override<br>public IBinder onBind(Intent intent) {<br>    return myLibrary;<br>}<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">返回的真是<span class="selector-tag">aidl</span>的一个接口</span><br><span class="line"></span><br><span class="line">!<span class="selector-attr">[]</span>(<span class="attribute">http</span>:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-89620d920299568d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line">以上是接口创建的一部分代码</span><br><span class="line"></span><br><span class="line">![](<span class="attribute">http</span>:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-1c0cd3f0f572740c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line">在reset中搞了一个Config.Instance().runOnConnect不知道是干嘛用的，反正是调用了以下的方法</span><br><span class="line"></span><br><span class="line">![](<span class="attribute">http</span>:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-a28e8fafc6062a50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line">我注意到底下的两个广播，很明显是做进程间通讯。然后， 我在BookCollectionShadow中找到了这个广播的接收者</span><br></pre></td></tr></table></figure></p><p>private final BroadcastReceiver myReceiver = new BroadcastReceiver() {<br>    public void onReceive(Context context, Intent intent) {<br>        if (!hasListeners()) {<br>            return;<br>        }<br>        try {<br>            final String type = intent.getStringExtra(“type”);<br>            LogUtils.d(“BookCollectionShadow -&gt; onReceive type: “ + type);<br>            if (LibraryService.BOOK_EVENT_ACTION.equals(intent.getAction())) {<br>                final Book book = SerializerUtil.deserializeBook(intent.getStringExtra(“book”));<br>                fireBookEvent(BookEvent.valueOf(type), book);<br>            } else {<br>                fireBuildEvent(Status.valueOf(type));<br>            }<br>        } catch (Exception e) {<br>            // ignore<br>        }<br>    }<br>};<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">接下来看log</span><br><span class="line"></span><br><span class="line">![](http:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-06ada923f3db31b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line">通过这个&lt;entry xmlns:dc=<span class="string">"http://purl.org/dc/elements/1.1/"</span> xmlns:calibre=<span class="string">"http://calibre.kovidgoyal.net/2009/metadata"</span>&gt; 搞成一本书？？？</span><br><span class="line"></span><br><span class="line">这个先别管，我的疑惑是tree.getBook() 怎么返回空？</span><br><span class="line"></span><br><span class="line">经过上面的弯路， 我们知道了最后回掉的是```LibraryActivity:: onBookEvent(BookEvent event, Book book)```这个方法</span><br></pre></td></tr></table></figure></p><p>@Override<br>public void onBookEvent(BookEvent event, Book book) {<br>    if (getCurrentTree().onBookEvent(event, book)) {<br>        getListAdapter().replaceAll(getCurrentTree().subtrees(), true);<br>    }<br>}<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再跟一下里面的方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> onBookEvent(BookEvent event, Book book) &#123;</span><br><span class="line"><span class="keyword">switch</span> (event) &#123;</span><br><span class="line"><span class="symbol">default:</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">Added:</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">Removed:</span></span><br><span class="line"><span class="keyword">return</span> removeBook(book);</span><br><span class="line"><span class="keyword">case</span> <span class="string">Updated:</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">boolean</span> changed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (FBTree <span class="string">tree :</span> <span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (tree <span class="keyword">instanceof</span> BookTree) &#123;</span><br><span class="line"><span class="keyword">final</span> Book b = ((BookTree)tree).Book;</span><br><span class="line"><span class="keyword">if</span> (b.equals(book)) &#123;</span><br><span class="line">b.updateFrom(book);</span><br><span class="line">changed = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们看到了booktree这个东西，原来我们正经使用的是booktree的getBook，所以get得到的肯定是一本书</p><h3 id="这里留一个问题，-这个booktree是怎么来的？-先不着急分析他"><a href="#这里留一个问题，-这个booktree是怎么来的？-先不着急分析他" class="headerlink" title="这里留一个问题， 这个booktree是怎么来的？ 先不着急分析他"></a>这里留一个问题， 这个booktree是怎么来的？ 先不着急分析他</h3><p>我们发现book 是从booktree 得到的， 而booktree中的book 是构造是传进来的。</p><p>而这些又是在FilteredTree的抽象发方法createSubtree， 得到的</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-8ba92e761ff95a45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>接着往上看FilteredTree这个类<br><img src="http://upload-images.jianshu.io/upload_images/1285832-494b2e8a2f176862.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>终于找到主进程里的book了， 原来是调用进程里的 Collection.books(query);方法， 来获得一个book的列表。</p><h2 id="五、怎么跳转到Fbreader这个activity"><a href="#五、怎么跳转到Fbreader这个activity" class="headerlink" title="五、怎么跳转到Fbreader这个activity"></a>五、怎么跳转到Fbreader这个activity</h2><p>本来想看看怎么解析epub的，但是感觉目前还消化不了。</p><p>我们要把这个完整的项目当成一个sdk来使用，虽然说整个加到工程中fbreader的5M左右了，但是没有办法，时间紧任务重。我倒是很赞同自己去写个阅读器，但是条件不允许。</p><p>我们要使用这个项目， 就得找到一个书， 然后跳转到这个activity让他显示。</p><p>经过以上的分析， 可以看到，在查找书的时候 已经就装成book对象了。反正要是我写，我肯定在查找文件的时候返回的url， 然后根据这个去解析成book的对象。</p><p>记得最早之前分析过，在FBReader的onResume是启动的关键<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> openBook(Intent intent, <span class="keyword">final</span> Runnable action, <span class="keyword">boolean</span> force) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!force &amp;&amp; myBook != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myBook = FBReaderIntents.getBookExtra(intent);</span><br><span class="line">        <span class="keyword">final</span> Bookmark bookmark = FBReaderIntents.getBookmarkExtra(intent);</span><br><span class="line">        LogUtils.d(<span class="string">"FBReader -&gt; openBook myBook: "</span> + myBook);</span><br><span class="line">        <span class="keyword">if</span> (myBook == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Uri data = intent.getData();</span><br><span class="line">            LogUtils.d(<span class="string">"FBReader -&gt; openBook data: "</span> + data);</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                myBook = createBookForFile(ZLFile.createFileByPath(data.getPath()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (myBook != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ZLFile <span class="keyword">file</span> = myBook.<span class="keyword">File</span>;</span><br><span class="line">            LogUtils.d(<span class="string">"FBReader -&gt; openBook file path: "</span> + <span class="keyword">file</span>.getPath());</span><br><span class="line">            LogUtils.d(<span class="string">"FBReader -&gt; openBook file exists: "</span> + <span class="keyword">file</span>.exists());</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">file</span>.getPhysicalFile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">file</span> = <span class="keyword">file</span>.getPhysicalFile();</span><br><span class="line">                &#125;</span><br><span class="line">                UIUtil.showErrorMessage(<span class="keyword">this</span>, <span class="string">"fileNotFound"</span>, <span class="keyword">file</span>.getPath());</span><br><span class="line">                myBook = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这里，但书为空的时时候，在intent.getData去 拿到url， 传到ZLFile里去。也就是说，我在start这个activity 传一个url 进去， 于是我这样写了一段<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开一本电子书</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path    epub 资源的绝对路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">openBookActivity</span><span class="params">(Context context, String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(context, FBReader.class)</span><br><span class="line">            .setAction(FBReaderIntents.Action.VIEW)</span><br><span class="line">            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">    intent.setData(Uri.parse(path));</span><br><span class="line">    context.startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以了。 我翻了几页之后， 默认就会保存阅读的位置。那么我想重新阅读这个文章应该怎么办。继续撸代码</p><p>在<figure class="highlight plain"><figcaption><span>book, Bookmark bookmark, boolean force)```方法中，第一次打开书是会执行```gotoStoredPosition();```这样一个方法，从字面的意思是去到存储的位置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">具体的方法是这样的</span><br></pre></td></tr></table></figure></p><p>FBReaderApp::gotoStoredPosition()<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">gotoStoredPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    myStoredPositionBook = Model != <span class="keyword">null</span> ? Model.Book : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (myStoredPositionBook == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    myStoredPosition = getStoredPosition(myStoredPositionBook);</span><br><span class="line">    BookTextView.gotoPosition(myStoredPosition);</span><br><span class="line">    savePosition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是调用了BookTextView的gotoPosition这个方法。那我们看看能否在FBReader这个类上搞点事情。在openBook方法中<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> openBook(Intent intent, <span class="keyword">final</span> Runnable action, <span class="keyword">boolean</span> force) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!force &amp;&amp; myBook != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       myBook = FBReaderIntents.getBookExtra(intent);</span><br><span class="line">       <span class="keyword">final</span> Bookmark bookmark = FBReaderIntents.getBookmarkExtra(intent);</span><br><span class="line">       LogUtils.d(<span class="string">"FBReader -&gt; openBook myBook: "</span> + myBook);</span><br><span class="line">       <span class="keyword">if</span> (myBook == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> Uri data = intent.getData();</span><br><span class="line">           LogUtils.d(<span class="string">"FBReader -&gt; openBook data: "</span> + data);</span><br><span class="line">           <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">               myBook = createBookForFile(ZLFile.createFileByPath(data.getPath()));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       LogUtils.d(<span class="string">"FBReader -&gt; openBook mybook: "</span> + myBook);</span><br><span class="line">       <span class="keyword">if</span> (myBook != <span class="keyword">null</span>) &#123;</span><br><span class="line">           ZLFile <span class="keyword">file</span> = myBook.<span class="keyword">File</span>;</span><br><span class="line">           LogUtils.d(<span class="string">"FBReader -&gt; openBook file path: "</span> + <span class="keyword">file</span>.getPath());</span><br><span class="line">           LogUtils.d(<span class="string">"FBReader -&gt; openBook file exists: "</span> + <span class="keyword">file</span>.exists());</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">file</span>.getPhysicalFile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">file</span> = <span class="keyword">file</span>.getPhysicalFile();</span><br><span class="line">               &#125;</span><br><span class="line">               UIUtil.showErrorMessage(<span class="keyword">this</span>, <span class="string">"fileNotFound"</span>, <span class="keyword">file</span>.getPath());</span><br><span class="line">               myBook = <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 打开app 时 正常myBook为空 intent.getData 为空</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 在主线程运行</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 正常打开时myBook， bookmark， action 三个参数都是空</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">       Config.Instance().runOnConnect(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">               LogUtils.d(<span class="string">"FBReader -&gt; openBook run thread: "</span> + Thread.currentThread());</span><br><span class="line">               LogUtils.d(<span class="string">"FBReader -&gt; openBook run myBook: "</span> + myBook);</span><br><span class="line">               LogUtils.d(<span class="string">"FBReader -&gt; openBook run bookmark: "</span> + bookmark);</span><br><span class="line">               LogUtils.d(<span class="string">"FBReader -&gt; openBook run action: "</span> + action);</span><br><span class="line">               myFBReaderApp.openBook(myBook, bookmark, action);</span><br><span class="line">               <span class="comment">// // <span class="doctag">TODO:</span> 6/7/2017 回到首页</span></span><br><span class="line">               myFBReaderApp.BookTextView.gotoHome();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>在最后一句，这个activity中可以拿到myFBReaderApp，猜想是用来控制整个阅读器的类， 调用gotohome， 竟然可以了。通过这个就可以控制是否继续阅读还是从头开始</p><h2 id="六、跳转到固定章节"><a href="#六、跳转到固定章节" class="headerlink" title="六、跳转到固定章节"></a>六、跳转到固定章节</h2><p>一本书有很多章节，跳转到固定章节的时候不可能进行一步步的翻页操作。碰巧fbreader提供这样的功能，而且还有快速翻看</p><p>找打开一本书之后Model 字段就会赋值， ‘弹幕’一下这个字段， 看到里面确实存在了章节的信息</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-9d1fe7bbd2f273e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>我知道了章节，然后怎么去跳转，我们看下面这一段代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOCActivity::openBookText(TOCTree tree)</span><br></pre></td></tr></table></figure></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void openBookText(TOCTree tree) &#123;</span><br><span class="line">final TOCTree.Reference reference = tree.getReference()<span class="comment">;</span></span><br><span class="line">if (reference != null) &#123;</span><br><span class="line">finish()<span class="comment">;</span></span><br><span class="line">final FBReaderApp fbreader = (FBReaderApp)ZLApplication.<span class="keyword">Instance();</span></span><br><span class="line"><span class="keyword"></span>fbreader.<span class="keyword">addInvisibleBookmark();</span></span><br><span class="line"><span class="keyword"></span>fbreader.<span class="keyword">BookTextView.gotoPosition(reference.ParagraphIndex, </span><span class="number">0</span>, <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">fbreader.<span class="keyword">showBookTextView();</span></span><br><span class="line"><span class="keyword"></span>fbreader.storePosition()<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到reference对象的ParagraphIndex， 然后去调用BookTextView的gotoPosition</p><p>在FBReaderApp中这样写试试</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-8f2047c238f09216.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这样是可以达到预期效果的，但是有一定要值得注意：<br>在第一次读取书时，获取书的操作是个异步的， 也就是说，这个时候Model可能为空，所以在以后开发中，最好是用接口，将获取书的情况反到activity中， 这样，当书加载完成时再去做相应的跳转操作。</p><h2 id="七、字体加大与缩小"><a href="#七、字体加大与缩小" class="headerlink" title="七、字体加大与缩小"></a>七、字体加大与缩小</h2><p>源码中，改变字体大小的就在菜单的按键中</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-da2718c32da2c4c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>点击按键监听再这里，这么搞也是特殊，从未见过啊，不知道干嘛弄的这么复杂。像这样可以实现这个功能了。</p><p>这样只是增加与减少，万一需求上是给定几个固定的字号，然后调节怎么办？所以开始得看看源码</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-293224e691cf1053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>跟进去发现，最终的action是存在于这个map， 实在主activity创建时put的，所以所有的操作都会交给ZLAction的子类去处理</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-6db0ded4df8dd286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>也就是上面选中的这个类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeFontSizeAction</span> <span class="keyword">extends</span> <span class="title">FBAction</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> int myDelta;</span><br><span class="line"></span><br><span class="line"><span class="type">ChangeFontSizeAction</span>(<span class="type">FBReaderApp</span> fbreader, int delta) &#123;</span><br><span class="line"><span class="keyword">super</span>(fbreader);</span><br><span class="line">myDelta = delta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> void run(<span class="type">Object</span> ... params) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ZLIntegerRangeOption</span> option =</span><br><span class="line"><span class="type">Reader</span>.<span class="type">ViewOptions</span>.getTextStyleCollection().getBaseStyle().<span class="type">FontSizeOption</span>;</span><br><span class="line">option.setValue(option.getValue() + myDelta);</span><br><span class="line"></span><br><span class="line">        <span class="type">LogUtils</span>.d(<span class="string">"ChangeFontSizeAction -&gt; run: "</span> + option.getValue());</span><br><span class="line">        <span class="type">Reader</span>.clearTextCaches();</span><br><span class="line"><span class="type">Reader</span>.getViewWidget().repaint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行run方法后会设置字号，这里的option.setValue(option.getValue() + myDelta);就是对字号的设置。要是愿意的话可以复写FBAction或者直接使用run方法中的参数进行传值，当然，后一种要好一点。</p><h2 id="八、音量键功能"><a href="#八、音量键功能" class="headerlink" title="八、音量键功能"></a>八、音量键功能</h2><p>一个功能完整的阅读器，音量键也都会派上用场。fbreader音量键也不例外</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ZLAndroidWidget::@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> onKeyDown(<span class="built_in">int</span> <span class="built_in">keyCode</span>, KeyEvent event) &#123;</span><br><span class="line"><span class="keyword">final</span> ZLApplication application = ZLApplication.Instance();</span><br><span class="line"><span class="keyword">final</span> ZLKeyBindings bindings = application.keyBindings();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bindings.hasBinding(<span class="built_in">keyCode</span>, <span class="keyword">true</span>)</span><br><span class="line">|| bindings.hasBinding(<span class="built_in">keyCode</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (myKeyUnderTracking != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (myKeyUnderTracking == <span class="built_in">keyCode</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">myKeyUnderTracking = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bindings.hasBinding(<span class="built_in">keyCode</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">myKeyUnderTracking = <span class="built_in">keyCode</span>;</span><br><span class="line">myTrackingStartTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> application.runActionByKey(<span class="built_in">keyCode</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">boolean</span> runActionByKey(<span class="built_in">int</span> <span class="built_in">key</span>, <span class="built_in">boolean</span> longPress) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> actionId = keyBindings().getBinding(<span class="built_in">key</span>, longPress);</span><br><span class="line">    <span class="keyword">if</span> (actionId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ZLAction action = myIdToActionMap.<span class="built_in">get</span>(actionId);</span><br><span class="line">        <span class="keyword">return</span> action != <span class="keyword">null</span> &amp;&amp; action.checkAndRun();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序在runActionByKey方法中控制这按键</p><p>key 是当前案件的键码，会对所有按键处理，如果你接键盘的话。<br>longPress 字面意思是是否长按，但是我试过永远的短按，永远的false</p><p>以后处理案件就可在这里处理，或者深入到action里面进行处理。</p><h2 id="九、更换背景，字体颜色"><a href="#九、更换背景，字体颜色" class="headerlink" title="九、更换背景，字体颜色"></a>九、更换背景，字体颜色</h2><p>更换背景以及字体颜色，也是实现夜间模式的一个套路。首先我们定位到PreferenceActivity，冷不丁一看，我去，这不是系统里的settings嘛。这么长的init至于么？<br><img src="http://upload-images.jianshu.io/upload_images/1285832-aad6afda339e53dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这么长的代码就不全粘贴了，大概在400多行，有这么一段。是添加背景和墙纸的<br>我们跟到这个类中BackgroundPreference</p><p>在onBindView下面是跳转到颜色选择器的代码，在PreferenceActivity中的onActivityResult方法中返回</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> void onActivityResult(int requestCode, int resultCode, Intent <span class="keyword">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (myNetworkContext.onActivityResult(requestCode, resultCode, <span class="keyword">data</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resultCode != RESULT_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (BACKGROUND_REQUEST_CODE == requestCode) &#123;</span><br><span class="line">        <span class="keyword">if</span> (myBackgroundPreference != <span class="literal">null</span>) &#123;</span><br><span class="line">            myBackgroundPreference.update(<span class="keyword">data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    myChooserCollection.update(requestCode, <span class="keyword">data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间部分， 调用了yBackgroundPreference.update(data);</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> update(Intent data) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> value = data.getStringExtra(VALUE_KEY);</span><br><span class="line">    LogUtils.d(<span class="string">"BackgroundPreference -&gt; update: "</span> + value);</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">myProfile.WallpaperOption.setValue(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">color</span> = data.getIntExtra(COLOR_KEY, <span class="number">-1</span>);</span><br><span class="line">    LogUtils.d(<span class="string">"BackgroundPreference -&gt; update: "</span> + <span class="built_in">color</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">color</span> != <span class="number">-1</span>) &#123;</span><br><span class="line">myProfile.BackgroundOption.setValue(<span class="keyword">new</span> ZLColor(<span class="built_in">color</span>));</span><br><span class="line">&#125;</span><br><span class="line">notifyChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往里跟，方向设置颜色或者是壁纸图片， 只是设置了WallpaperOption的value。我们能在ColorProfile类中找到这些参数，那么我们怎么在主activity获取并且改变它呢</p><p>还是最重要的<figure class="highlight plain"><figcaption><span>的实例 ViewOptions，通过它我们就能拿到ColorProfile， 图下设置背景为红色</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"> myFBReaderApp.ViewOptions.getColorProfile().BackgroundOption.setValue(new ZLColor(255, 0, 0));</span><br></pre></td></tr></table></figure></p><p>但是直接这么写，没有变化，仔细想想。我只设置了颜色，但是没有通知重绘，自然就没有变化。</p><p>那么，颜色选择怎么通知到这个activity的呢，只能是Intent传的，我们看下FBReader 的onActivityResult(int requestCode, int resultCode, Intent data)<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> REQUEST_PREFERENCES:</span><br><span class="line">            <span class="keyword">if</span> (resultCode != RESULT_DO_NOTHING &amp;&amp; data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> Book book = FBReaderIntents.getBookExtra(data);</span><br><span class="line">                <span class="keyword">if</span> (book != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    getCollection().bindToService(<span class="keyword">this</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            onPreferencesUpdate(book);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REQUEST_CANCEL_MENU:</span><br><span class="line">            runCancelAction(data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ok, 确实有我需要的东西，这个方法调用了onPreferencesUpdate<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">private</span> void onPreferencesUpdate(<span class="keyword">Book </span><span class="keyword">book) </span>&#123;</span><br><span class="line">     <span class="keyword">AndroidFontUtil.clearFontCache();</span></span><br><span class="line"><span class="keyword"> </span>    myFBReaderApp.onBookUpdated(<span class="keyword">book);</span></span><br><span class="line"><span class="keyword"> </span>&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">\    <span class="keyword">public</span> void onBookUpdated(Book book) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Model == <span class="literal">null</span> || Model.Book == <span class="literal">null</span> || !Model.Book.equals(book)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final <span class="keyword">String</span> <span class="keyword">new</span><span class="type">Encoding</span> = book.getEncodingNoDetection();</span><br><span class="line">        final <span class="keyword">String</span> oldEncoding = Model.Book.getEncodingNoDetection();</span><br><span class="line"></span><br><span class="line">        Model.Book.updateFrom(book);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Encoding</span> != <span class="literal">null</span> &amp;&amp; !<span class="keyword">new</span><span class="type">Encoding</span>.equals(oldEncoding)) &#123;</span><br><span class="line">            reloadBook();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ZLTextHyphenator.Instance().load(Model.Book.getLanguage());</span><br><span class="line">            clearTextCaches();</span><br><span class="line">            getViewWidget().repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>起到决定性作用的就行最后一句 getViewWidget().repaint();</p><p>那么，更改背景颜色就是<br>（上面的代码都是等书加载完毕之后，显示在view中在去设置的， 不然书都没加载完，自然也就设置不了）</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-84ea417bf7ba3a04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>BackgroundOption 是背景色<br>RegularTextOption 是文字的颜色</p><h2 id="十、动画类型"><a href="#十、动画类型" class="headerlink" title="十、动画类型"></a>十、动画类型</h2><p>下面开始研究应用的翻页动画。<br>我们修改颜色实际上是修改了ZLAndroidWidget。我们可以跟进这个类看一下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLAndroidWidget::getAnimationProvider()</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">AnimationProvider</span> getAnimationProvider() &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">ZLView</span>.<span class="type">Animation</span> <span class="class"><span class="keyword">type</span> </span>= <span class="type">ZLApplication</span>.<span class="type">Instance</span>().getCurrentView()</span><br><span class="line">.getAnimationType();</span><br><span class="line"><span class="keyword">if</span> (myAnimationProvider == <span class="literal">null</span> || myAnimationType != <span class="class"><span class="keyword">type</span>) </span>&#123;</span><br><span class="line">myAnimationType = <span class="class"><span class="keyword">type</span></span>;</span><br><span class="line">switch (<span class="class"><span class="keyword">type</span>) </span>&#123;</span><br><span class="line"><span class="keyword">case</span> none:</span><br><span class="line">myAnimationProvider = <span class="keyword">new</span> <span class="type">NoneAnimationProvider</span>(myBitmapManager);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> curl:</span><br><span class="line">myAnimationProvider = <span class="keyword">new</span> <span class="type">CurlAnimationProvider</span>(myBitmapManager);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> slide:</span><br><span class="line">myAnimationProvider = <span class="keyword">new</span> <span class="type">SlideAnimationProvider</span>(</span><br><span class="line">myBitmapManager);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> shift:</span><br><span class="line">myAnimationProvider = <span class="keyword">new</span> <span class="type">ShiftAnimationProvider</span>(</span><br><span class="line">myBitmapManager);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> left2right:</span><br><span class="line">myAnimationProvider = <span class="keyword">new</span> <span class="type">Left2RightAnimationProvider</span>(</span><br><span class="line">myBitmapManager);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> simulation:</span><br><span class="line"><span class="comment">// myAnimationProvider = new SimulateAnimationProvider(</span></span><br><span class="line"><span class="comment">// myBitmapManager);</span></span><br><span class="line">myAnimationProvider = <span class="keyword">new</span> <span class="type">EmulateAnimationProvider</span>(</span><br><span class="line">myBitmapManager);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> myAnimationProvider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码跟你的不一样，正常，这个我改过了。<br>在绘制动画的时候，也就是onDrawInScrolling(Canvas canvas)这个方法被调用的时候，都会获取一下当前的动画。</p><p>那么在设置动画的时候调用的是PreferenceActivity这个activity，再init一堆东西里看以看到，这样一句话</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c4dbe0cfdaebc3d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>原来是改变的是pageTurningOptions这个东西，我们再看主activity中能不能找到这个对象。回到FBReader当中。我们可以这样设置动画<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">myFBReaderApp</span><span class="selector-class">.PageTurningOptions</span><span class="selector-class">.Animation</span><span class="selector-class">.setValue</span>(<span class="selector-tag">ZLView</span><span class="selector-class">.Animation</span><span class="selector-class">.left2right</span>);</span><br></pre></td></tr></table></figure></p><p>因为是执行每一次翻页的动作都会get一下当前的动画，所以也就不需要重绘当前页面，写这样一句就好。</p><h2 id="十一、点击区域"><a href="#十一、点击区域" class="headerlink" title="十一、点击区域"></a>十一、点击区域</h2><p>市场上的阅读类应用。基本都是点击左面上一页，右面下一页。中间会弹出一个设置菜单。<br>我发现我的这个version的代码，点击中间是没有任何反应的，所以。继续撸码。</p><p>关于点击时间， 首先去看ZLAndroidWidget的onTouchEvent方法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLAndroidWidget::onTouchEvent(MotionEvent event)</span><br></pre></td></tr></table></figure></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> onTouchEvent(MotionEvent event) &#123;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"><span class="keyword">final</span> ZLView view = ZLApplication.Instance().getCurrentView();</span><br><span class="line"><span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line"><span class="keyword">case</span> MotionEvent.<span class="string">ACTION_UP:</span></span><br><span class="line"><span class="keyword">if</span> (myPendingDoubleTap) &#123;</span><br><span class="line">            view.onFingerDoubleTap(x, y);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (myLongClickPerformed) &#123;</span><br><span class="line">            view.onFingerReleaseAfterLongPress(x, y);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (myPendingLongClickRunnable != <span class="literal">null</span>) &#123;</span><br><span class="line">removeCallbacks(myPendingLongClickRunnable);</span><br><span class="line">myPendingLongClickRunnable = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (myPendingPress) &#123;</span><br><span class="line"><span class="keyword">if</span> (view.isDoubleTapSupported()) &#123;</span><br><span class="line"><span class="keyword">if</span> (myPendingShortClickRunnable == <span class="literal">null</span>) &#123;</span><br><span class="line">myPendingShortClickRunnable = <span class="keyword">new</span> ShortClickRunnable();</span><br><span class="line">&#125;</span><br><span class="line">postDelayed(myPendingShortClickRunnable,</span><br><span class="line">ViewConfiguration.getDoubleTapTimeout());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    view.onFingerSingleTap(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">view.onFingerRelease(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myPendingDoubleTap = <span class="literal">false</span>;</span><br><span class="line">myPendingPress = <span class="literal">false</span>;</span><br><span class="line">myScreenIsTouched = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MotionEvent.<span class="string">ACTION_DOWN:</span></span><br><span class="line"><span class="keyword">if</span> (myPendingShortClickRunnable != <span class="literal">null</span>) &#123;</span><br><span class="line">removeCallbacks(myPendingShortClickRunnable);</span><br><span class="line">myPendingShortClickRunnable = <span class="literal">null</span>;</span><br><span class="line">myPendingDoubleTap = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">postLongClickRunnable();</span><br><span class="line">myPendingPress = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">myScreenIsTouched = <span class="literal">true</span>;</span><br><span class="line">myPressedX = x;</span><br><span class="line">myPressedY = y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MotionEvent.<span class="string">ACTION_MOVE:</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> slop = ViewConfiguration.get(getContext())</span><br><span class="line">.getScaledTouchSlop();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isAMove = Math.abs(myPressedX - x) &gt; slop</span><br><span class="line">|| Math.abs(myPressedY - y) &gt; slop;</span><br><span class="line"><span class="keyword">if</span> (isAMove) &#123;</span><br><span class="line">myPendingDoubleTap = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (myLongClickPerformed) &#123;</span><br><span class="line">view.onFingerMoveAfterLongPress(x, y);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (myPendingPress) &#123;</span><br><span class="line"><span class="keyword">if</span> (isAMove) &#123;</span><br><span class="line"><span class="keyword">if</span> (myPendingShortClickRunnable != <span class="literal">null</span>) &#123;</span><br><span class="line">removeCallbacks(myPendingShortClickRunnable);</span><br><span class="line">myPendingShortClickRunnable = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (myPendingLongClickRunnable != <span class="literal">null</span>) &#123;</span><br><span class="line">removeCallbacks(myPendingLongClickRunnable);</span><br><span class="line">&#125;</span><br><span class="line">view.onFingerPress(myPressedX, myPressedY);</span><br><span class="line">myPendingPress = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!myPendingPress) &#123;</span><br><span class="line">view.onFingerMove(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当按键抬起的时候， 将手指的位置传给了     view.onFingerSingleTap(x, y);<br>view就是FBView这个类。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onFingerSingleTap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">super</span>.onFingerSingleTap(x, y)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ZLTextRegion hyperlinkRegion = findRegion(x, y, MAX_SELECTION_DISTANCE, ZLTextRegion.HyperlinkFilter);</span><br><span class="line">    <span class="keyword">if</span> (hyperlinkRegion != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// click link</span></span><br><span class="line">        selectRegion(hyperlinkRegion);</span><br><span class="line">        myReader.getViewWidget().reset();</span><br><span class="line">        myReader.getViewWidget().repaint();</span><br><span class="line">        myReader.runAction(ActionCode.PROCESS_HYPERLINK);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ZLTextRegion videoRegion = findRegion(x, y, <span class="number">0</span>, ZLTextRegion.VideoFilter);</span><br><span class="line">    <span class="keyword">if</span> (videoRegion != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// click video</span></span><br><span class="line">        selectRegion(videoRegion);</span><br><span class="line">        myReader.getViewWidget().reset();</span><br><span class="line">        myReader.getViewWidget().repaint();</span><br><span class="line">        myReader.runAction(ActionCode.OPEN_VIDEO, (ZLTextVideoRegionSoul) videoRegion.getSoul());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ZLTextHighlighting highlighting = findHighlighting(x, y, MAX_SELECTION_DISTANCE);</span><br><span class="line">    <span class="keyword">if</span> (highlighting <span class="keyword">instanceof</span> BookmarkHighlighting) &#123;</span><br><span class="line">        myReader.runAction(</span><br><span class="line">                ActionCode.SELECTION_BOOKMARK,</span><br><span class="line">                ((BookmarkHighlighting) highlighting).Bookmark</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String actionId = getZoneMap()</span><br><span class="line">            .getActionByCoordinates(x, y, getContextWidth(), getContextHeight(),</span><br><span class="line">                    isDoubleTapSupported() ? TapZoneMap.Tap.singleNotDoubleTap : TapZoneMap.Tap.singleTap);</span><br><span class="line">    myReader.runAction(actionId, x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段的最后一句就是或坐标的区域</p><p>一路跟下去， 发现<figure class="highlight plain"><figcaption><span>这样一个类，看它的构造</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">private TapZoneMap(String name) &#123;</span><br><span class="line">Name = name;</span><br><span class="line">myOptionGroupName = &quot;TapZones:&quot; + name;</span><br><span class="line"></span><br><span class="line">        LogUtils.d(&quot;TapZoneMap -&gt; TapZoneMap: &quot; + name);</span><br><span class="line">        myHeight = new ZLIntegerRangeOption(myOptionGroupName, &quot;Height&quot;, 2, 5, 3);</span><br><span class="line">myWidth = new ZLIntegerRangeOption(myOptionGroupName, &quot;Width&quot;, 2, 5, 3);</span><br><span class="line">final ZLFile mapFile = ZLFile.createFileByPath(</span><br><span class="line">&quot;default/tapzones/&quot; + name.toLowerCase() + &quot;.xml&quot;</span><br><span class="line">);</span><br><span class="line">new Reader().readQuietly(mapFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是读了一个文件，我们在资源文件中找下</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-74a9c42083f5c1fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>果然在这里躺着一堆的文件，应该是按照屏幕的方向 选择默认的配置文件，这里默认的就是right_to_left.xml，我们打开看看。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tapZones</span> <span class="attr">v</span>=<span class="string">"3"</span> <span class="attr">h</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">action</span>=<span class="string">"previousPage"</span> <span class="attr">action2</span>=<span class="string">"navigate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"1"</span> <span class="attr">action</span>=<span class="string">"previousPage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"2"</span> <span class="attr">action</span>=<span class="string">"previousPage"</span> <span class="attr">action2</span>=<span class="string">"menu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"1"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">action2</span>=<span class="string">"navigate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"1"</span> <span class="attr">y</span>=<span class="string">"1"</span> <span class="attr">action2</span>=<span class="string">"menu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"1"</span> <span class="attr">y</span>=<span class="string">"2"</span> <span class="attr">action2</span>=<span class="string">"menu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"2"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">action</span>=<span class="string">"nextPage"</span> <span class="attr">action2</span>=<span class="string">"navigate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"2"</span> <span class="attr">y</span>=<span class="string">"1"</span> <span class="attr">action</span>=<span class="string">"nextPage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span> <span class="attr">x</span>=<span class="string">"2"</span> <span class="attr">y</span>=<span class="string">"2"</span> <span class="attr">action</span>=<span class="string">"nextPage"</span> <span class="attr">action2</span>=<span class="string">"menu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tapZones</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-73fff0f4033aa646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>猜测一下，fbreader应该是把屏幕分成3 x 3的区域，大概就是上面图片的意思。用这个坐标代表，我要点击屏幕中间的，自然我就加了一个1，1的坐标。</p><p>得到区域后，执行了<figure class="highlight plain"><figcaption><span>myReader.runAction(actionId, x, y);``` 这个方法。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跟音量键的一样，他会把事件分发的```ShowMenuAction```这个类里面。</span><br></pre></td></tr></table></figure></p><p>class ShowMenuAction extends FBAndroidAction {<br>    ShowMenuAction(FBReader baseActivity, FBReaderApp fbreader) {<br>        super(baseActivity, fbreader);<br>    }</p><pre><code>@Overrideprotected void run(Object ... params) {    BaseActivity.openOptionsMenu();    //BaseActivity.menu();}</code></pre><p>}<br><code>`</code><br>源码里调用的是openOptionsMenu，这个baseactivity就是我们的FBReader这个类。我改成自己的方法， 就可以定制自己的菜单栏了，然后抛弃源码提供的菜单栏。</p><p>ps：代码看到这里差不多可以进行定制了， 但是，代码里确实是有些无用的东西， 要是能把这些东西去掉的话，做一下精简。应该会更好。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AndroidStudio -- 自动生成ViewModel的IDE插件</title>
      <link href="/2017/05/19/AndroidStudio-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90ViewModel%E7%9A%84IDE%E6%8F%92%E4%BB%B6/"/>
      <url>/2017/05/19/AndroidStudio-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90ViewModel%E7%9A%84IDE%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>使用了Databinding，就不可避免的要创建Observable Objects</p><p>正如google所提供的那样，创建Observable Objects有两种方式：第一是在setter，getter方法加上注解；二是使用ObservableFields 创建一个public final 的字段。</p><p>最后一种方式因为是公有，可能会带来一些问题，还是偏向于第一种方式，使用第一种方式代码会像如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   <span class="meta">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       notifyPropertyChanged(BR.firstName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">       notifyPropertyChanged(BR.lastName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要是字段多，修改每一个getter，setter会显得非常困难，这里提供一种简单的修改方式，使用一个android studio 插件 <a href="https://plugins.jetbrains.com/plugin/9296-dbsetter" target="_blank" rel="noopener">DbSetter</a></p><p>源码地址在这里<br><a href="https://github.com/LavenderStream/DbSetter" target="_blank" rel="noopener">https://github.com/LavenderStream/DbSetter</a><br>下载地址<br><a href="https://plugins.jetbrains.com/plugin/9296-dbsetter" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/9296-dbsetter</a></p><p>使用方法<br>在BaseObservable子类中调出Generate菜单（右键）,会看到DatabindingSetter这个选项，选择生成字段， 自动填充</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c4041bd671b76040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-7590288d0578fa39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- 自动生成Getter/Setter</title>
      <link href="/2017/05/19/Android-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90Getter-Setter/"/>
      <url>/2017/05/19/Android-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90Getter-Setter/</url>
      
        <content type="html"><![CDATA[<h3 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h3><p> 库是一个使用java注解，自动生成getter和setter方法的库<br>官网 <a href="https://projectlombok.org/" target="_blank" rel="noopener">https://projectlombok.org/</a><br>github <a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok</a></p><p>导入和使用都非常简单<br> <figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">provided files(<span class="symbol">'libs</span>/lombok.jar')</span><br><span class="line">provided  <span class="symbol">'org</span>.glassfish:javax.annotation:<span class="number">10.0</span>-b28'</span><br></pre></td></tr></table></figure></p><p>在studio 的android 项目中没有javax.annotation包，第二个依赖是用来添加javax包。编译之后，lombok能成功编译class文件，但在studio中没办法使用，还需下载一个lombok的插件</p><p>引入lombok这个时候，项目增加了1.3M<br>另外JakeWharton大神并不建议使用<a href="https://www.reddit.com/r/androiddev/comments/2nneo7/anyone_using_project_lombok/" target="_blank" rel="noopener">https://www.reddit.com/r/androiddev/comments/2nneo7/anyone_using_project_lombok/</a></p><h3 id="AutoValue"><a href="#AutoValue" class="headerlink" title="AutoValue"></a>AutoValue</h3><p>JakeWharton提到了AutoValue，并没有简化太多代码</p><h3 id="kotlin"><a href="#kotlin" class="headerlink" title="kotlin"></a>kotlin</h3><p>使用kotlin是我了解到的简化代码最有效的途径<br>一是代码够简单<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data <span class="keyword">class</span> Dog(<span class="keyword">var</span> <span class="keyword">name</span>: <span class="keyword">String</span>)</span><br></pre></td></tr></table></figure></p><p>才外不必为apk增加太大的空间占用，打了一个包测试了一下，会增加大概不到100kb左右的大小还是可以接受的</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Git -- git commit hook</title>
      <link href="/2017/05/17/GIt-git-commit-hook/"/>
      <url>/2017/05/17/GIt-git-commit-hook/</url>
      
        <content type="html"><![CDATA[<p>团队合作项目，使用git时会发生这种情况 ： 每个人的代码格式不同，对比工具再做对比的时候常常会当作冲突来处理，虽然有些工具会有明显的提示，但还是会占用自己太多时间。同时，一个团队保持一致的代码风格和规范，甚至是工具，都是有必要的。</p><p>经过一顿 google 之后， 发现git 的 hook pre-commit这个脚本可以指定，再commit之前插入一些脚本执行，要是再这个脚本中加上对代码的格式化，就解决了这个问题。</p><p>1、代码的格式化工具我选择了google提供的代码格式化工具。<br>项目地址在这里  <a href="https://github.com/google/google-java-format" target="_blank" rel="noopener">https://github.com/google/google-java-format</a><br>通过文档给的方式，在android studio下载一个插件</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-3dd63ea9d8e0023b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>再设置中配置，这里的style我选的是 aosp 的style，因为是android 项目，并没有直接使用默认的。配置好之后，我再对代码进行格式化的时候，就使用了google-java-format，不再是之前再ide中配置的那个了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-282c18e562dfa9f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>2、接下来写shell<br> 我们在项目根目录中可以找到.git 下的hooks文件夹。里面存在一堆文件，就像这样。<br><img src="http://upload-images.jianshu.io/upload_images/1285832-3ab997a5eb96622c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>可以创建一个空文件，名字为pre-commit。这里我直接贴上一段代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">array=`git diff-index --name-only HEAD`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;array&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    extension=<span class="variable">$&#123;name##*.&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;extension&#125;</span> == <span class="string">"java"</span> || <span class="variable">$&#123;extension&#125;</span> == <span class="string">"xml"</span> || <span class="variable">$&#123;extension&#125;</span> == <span class="string">"kt"</span> ]];<span class="keyword">then</span></span><br><span class="line">      D:\\Applications\\tiny-tool\\formatjava.cmd <span class="variable">$&#123;name&#125;</span></span><br><span class="line">      <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"format ok"</span> <span class="variable">$&#123;name&#125;</span></span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> git add ./</span><br></pre></td></tr></table></figure></p><p>大兄弟，别的都好说， <figure class="highlight plain"><figcaption><span>$&#123;name&#125; ```有点看不明白，那是因为还差一个文件没有贴上来。就是formatjava.cmd这个文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">@ECHO OFF</span><br><span class="line">java -jar D:\Applications\tiny-tool\google-java-format-1.3-all-deps.jar --replace %*</span><br><span class="line">@ECHO ON</span><br></pre></td></tr></table></figure></p><p>看这个工具还挺好用，可以直接格式化java代码，直接写一个cmd放到系统path中去，平时也能使用。</p><p>这样，再git commit 之后，会自动将提交的java文件进行格式化。这样就在本地和远程都使用同一套代码规范了。</p><p>ps：有个问题，google-java-format-1.3-all-deps.jar这个版本的会把java doc 也格式化了， 蛋疼， 还好有广大网友的帮助<br><a href="https://github.com/Kurt-Bonatz/google-java-format/tree/skip_javadoc_formatting" target="_blank" rel="noopener">https://github.com/Kurt-Bonatz/google-java-format/tree/skip_javadoc_formatting</a><br>这个提交已经添加到了google的代码中了， 就等着google更新， 或者直接把代码撸下来编译</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-6aa2d6812f99467e.gif?imageMogr2/auto-orient/strip" alt="c2adb464jw1edbze0mbitg2064064kjb.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android -- 自定义注解学习笔记</title>
      <link href="/2017/05/08/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/05/08/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>参考文章<br><a href="http://blog.csdn.net/johnny901114/article/details/52662376" target="_blank" rel="noopener">http://blog.csdn.net/johnny901114/article/details/52662376</a><br><a href="http://blog.csdn.net/johnny901114/article/details/52664112" target="_blank" rel="noopener">http://blog.csdn.net/johnny901114/article/details/52664112</a><br><a href="http://blog.csdn.net/johnny901114/article/details/52672188" target="_blank" rel="noopener">http://blog.csdn.net/johnny901114/article/details/52672188</a><br><a href="http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html" target="_blank" rel="noopener">http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html</a></p><p>这个demo没有在项目中涉及，只是用来理解java的注解及使用，并不是一个完整的框架。通过这个demo，能掌握注解的相关知识，并且提高了自己的逼格，O__O “…主要是提高了逼格。</p><hr><h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p>在项目中用到了mvp，封装了一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditorActivity</span> <span class="keyword">extends</span> <span class="title">BindingActivity</span>&lt;<span class="title">ActivityEditorBinding</span>, <span class="title">EditorPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">EditorContract</span>.<span class="title">View</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> EditorPresenter <span class="title">createPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EditorPresenter(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">createLayoutId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_editor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        GlobalToast.show(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面创建了一个简单的activity， 再createPresenter方法中创建了Presenter在createLayoutId方法中传入了布局的id。每个activity都要有这两个方法，写起来还挺繁琐的。有没有更好的方法呢？</p><p>要是像butterknife和dragger一样通过注解注入该多好</p><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>一个叫刀一个剑的，这个demo的名字就叫fork把，和butterknife一样，都和吃有关系</p><p>先看一下完成之后的activity<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ForkLayoutId</span>(<span class="type">R</span>.layout.activity_main)</span><br><span class="line"><span class="meta">@ForkPresenter</span>(<span class="type">MainPresenter</span>.<span class="keyword">class</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ForkActivity&lt;ActivityMainBinding</span>, <span class="title">MainPresenter&gt;</span> <span class="title">implements</span> <span class="title">MainContract</span>.<span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="type">Fork</span>.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        binding.rvText.setText(<span class="string">"haha"</span>);</span><br><span class="line">        mvpPresenter.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void showMessage(<span class="type">String</span> message) &#123;</span><br><span class="line">        <span class="type">Toast</span>.makeText(<span class="keyword">this</span>, message, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>费了大半天的劲，少了俩方法，呵呵</p><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p>说了一堆废话，记录一下实现吧！</p><p>1、首先再android studio 中创建一个java library（一定要是java 项目，不然android项目可找不到项目需要的包）<br>module 名字就叫 fork-annotations 吧，这里准备主要放用到的注解</p><p>首先，创建今天的第一个注解 名字叫ForkLayoutId<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line">public <span class="variable">@interface</span> ForkLayoutId &#123;</span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注解跟普通的java接口的定义很像，但接口是给程序员看的，而注解是给计算机看的，所以这里的interface前面加上了一个@</p><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>是用来标记这个注解的生命周期，有以下几种</p><ul><li>RetentionPolicy.SOURCE  : 注解只保留在源文件中</li><li>RetentionPolicy.CLASS  : 注解保留在class文件中，在加载到JVM虚拟机时丢弃</li><li>RetentionPolicy.RUNTIME  : 注解保留在程序运行期间，此时可以通过反射获得定义在某个类上的所有注解。</li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>是用来标记注解所修饰的属性</p><ul><li>ElementType.TYPE：说明该注解只能被声明在一个类前。</li><li>ElementType.FIELD：说明该注解只能被声明在一个类的字段前。</li><li>ElementType.METHOD：说明该注解只能被声明在一个类的方法前。</li><li>ElementType.PARAMETER：说明该注解只能被声明在一个方法参数前。</li><li>ElementType.CONSTRUCTOR：说明该注解只能声明在一个类的构造方法前。</li><li>ElementType.LOCAL_VARIABLE：说明该注解只能声明在一个局部变量前。</li><li>ElementType.ANNOTATION_TYPE：说明该注解只能声明在一个注解类型前。</li><li>ElementType.PACKAGE：说明该注解只能声明在一个包名前。</li></ul><h3 id="int-value"><a href="#int-value" class="headerlink" title="int value();"></a>int value();</h3><p>这个就是接口的参数了</p><p>再定义另一个接口，不， 注解！</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line">public <span class="variable">@interface</span> ForkPresenter &#123;</span><br><span class="line">    <span class="selector-tag">Class</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<br>两个注解定义完之后，接下来就是最重要的类 <figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在程序编译时，就通过 ```     public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span><br></pre></td></tr></table></figure></p><p>这个方法，处理我们的注解</p><p>处理的过程看似复杂，其实很简单。获得我们需要的值，动态生成java代码，生成代码也是一个库javapoet，就直接贴代码吧，更直观些。（javapoet的用法这里就不说了）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@SupportedAnnotationTypes(&#123;<span class="string">"org.fork.annotation.ForkLayoutId"</span>, <span class="string">"org.fork.annotation.ForkPresenter"</span>&#125;)</span><br><span class="line">@SupportedSourceVersion(SourceVersion.RELEASE_7)</span><br><span class="line">@SuppressWarnings(<span class="string">"All"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ForkProcessor <span class="keyword">extends</span> AbstractProcessor &#123;</span><br><span class="line">    <span class="keyword">private</span> String packageName;</span><br><span class="line">    <span class="keyword">private</span> String activityName;</span><br><span class="line">    <span class="keyword">private</span> TypeMirror activityClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> layoutId;</span><br><span class="line">    <span class="keyword">private</span> String presenterName;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> process(Set&lt;? <span class="keyword">extends</span> TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123;</span><br><span class="line">        <span class="keyword">if</span> (annotations.<span class="keyword">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            parseBindViews(annotations, roundEnv);</span><br><span class="line">            javaPoet();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> javaPoet() &#123;</span><br><span class="line">        MethodSpec getPresenter = MethodSpec.methodBuilder(<span class="string">"getPresenter"</span>)</span><br><span class="line">                .addModifiers(Modifier.<span class="keyword">PUBLIC</span>, Modifier.<span class="keyword">FINAL</span>)</span><br><span class="line">                .returns(Object.<span class="keyword">class</span>)</span><br><span class="line">                .addParameter(TypeName.OBJECT, <span class="string">"activity"</span>)</span><br><span class="line">                .addStatement(<span class="string">"return new "</span> + presenterName + <span class="string">"(("</span> + activityName + <span class="string">")activity)"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        MethodSpec getLayoutId = MethodSpec.methodBuilder(<span class="string">"getLayoutId"</span>)</span><br><span class="line">                .addModifiers(Modifier.<span class="keyword">PUBLIC</span>, Modifier.<span class="keyword">FINAL</span>)</span><br><span class="line">                .returns(<span class="keyword">int</span>.<span class="keyword">class</span>)</span><br><span class="line">                .addStatement(<span class="string">"return "</span> + layoutId)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        TypeSpec clazz = TypeSpec.classBuilder(activityName + <span class="string">"$$Provider"</span>)</span><br><span class="line">                .addModifiers(Modifier.<span class="keyword">PUBLIC</span>, Modifier.<span class="keyword">FINAL</span>)</span><br><span class="line">                .addSuperinterface(Provider.<span class="keyword">class</span>)</span><br><span class="line">                .addMethod(getPresenter)</span><br><span class="line">                .addMethod(getLayoutId)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        JavaFile.Builder builder = JavaFile</span><br><span class="line">                .builder(packageName, clazz);</span><br><span class="line">        JavaFile javaFile = builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            javaFile.writeTo(processingEnv.getFiler());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> parseBindViews(Set&lt;? <span class="keyword">extends</span> TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : roundEnv.getElementsAnnotatedWith(ForkLayoutId.<span class="keyword">class</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.getKind() == ElementKind.<span class="keyword">CLASS</span>) &#123;</span><br><span class="line">                layoutId = element.getAnnotation(ForkLayoutId.<span class="keyword">class</span>).value();</span><br><span class="line">                activityName = element.getSimpleName().toString();</span><br><span class="line">                activityClass = element.asType();</span><br><span class="line">                packageName = element.toString().replace(<span class="string">"."</span> + activityName, <span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element element : roundEnv.getElementsAnnotatedWith(ForkPresenter.<span class="keyword">class</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.getKind() == ElementKind.<span class="keyword">CLASS</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    presenterName = element.getAnnotation(ForkPresenter.<span class="keyword">class</span>).value().getSimpleName().toString();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MirroredTypeException mte) &#123;</span><br><span class="line">                    presenterName = mte.getTypeMirror().toString().replace(packageName + <span class="string">"."</span>, <span class="string">""</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@SupportedAnnotationTypes 用来指定这里会处理的注解</li><li>@SupportedSourceVersion(SourceVersion.RELEASE_7) 指定java版本，网上贴子说，这个写成注解兼容性更好，当然，class开头的两句，也可以使用java代码来声明</li><li>注意，再这个java库的build.gradle中，我们还要配置一遍java环境<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sourceCompatibility</span> = <span class="string">"1.7"</span></span><br><span class="line"><span class="attr">targetCompatibility</span> = <span class="string">"1.7"</span></span><br></pre></td></tr></table></figure></li></ul><p>3、这些都写完了，还要加上一个配置文件<br>再与java 同级，添加 resources / META_INF / services / javax.annotation.processing.Processor 这样一个文件</p><p>填写里面的内容<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org<span class="selector-class">.fork</span><span class="selector-class">.annotation</span><span class="selector-class">.ForkProcessor</span></span><br></pre></td></tr></table></figure></p><p>这是完整的目录结构</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-7ca08ca4c50932ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>ForkProcessor这个文件会报错，但是没什么影响。可能是android studio支持不够好吧，再IntelliJ中不会报错</p><p>通过javapoet，编译之后会生成如下代码，当然生成什么都是自己控制的。下面就详细的说一下生成的这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.demo.tiny;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"><span class="keyword">import</span> org.fork.annotation.Provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span>$$<span class="title">Provider</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">getPresenter</span><span class="params">(Object activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MainPersenter((MainActivity)activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getLayoutId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2130968603</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再activity使用注解，将pressenter的字节码文件和layout的id传入。</p><p>我们通过注解能拿到这个activity的名字，也就是上面的<figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">加上final 防止复写方法。getLayoutId没什么说的，getPresenter的强转有些蛋疼，一会儿再说。</span><br><span class="line"></span><br><span class="line">provider 接口提供了两个方法</span><br></pre></td></tr></table></figure></p><p>public interface Provider {<br>    Object getPresenter(Object obj);<br>    int getLayoutId();<br>}<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">费了九牛二虎之力，通过注解，拿到了layout的id并创建了presenter。</span><br><span class="line">下面，我们就要使用他们了。 <span class="keyword">fork</span>类上场。为了将这个demo封装起来，作为一个三方框架，我新建了一个android <span class="keyword">library</span></span><br></pre></td></tr></table></figure></p><p>public final class Fork {</p><pre><code>public static void bind(ForkActivity activity) {    Provider provider = null;    try {        try {            provider = (Provider) Class.forName(activity.getClass().getName() + &quot;$$Provider&quot;).newInstance();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }    } catch (ClassNotFoundException e) {        e.printStackTrace();    }    if (provider != null) {        activity.binding = DataBindingUtil.setContentView(activity, provider.getLayoutId());        activity.mvpPresenter = provider.getPresenter(activity);    }}</code></pre><p>}<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过加载器，创建了Provider的一个实例。这样我们就可以得到layout <span class="built_in">id</span> 和presenter了</span><br><span class="line"></span><br><span class="line">为了实现封装，我创建了一个ForkActivity</span><br></pre></td></tr></table></figure></p><p>public class ForkActivity<b extends="" viewdatabinding,="" p=""> extends Activity {<br>    protected B binding;<br>    protected P mvpPresenter;<br>}<br><code>`</code><br>这里就是为什么要进行强转了，因为想把binding和mvpPresenter这两个属性封装起来，放进父类。但我们自动生成的代码的报名却和ForkActivity 不在同一个包下。总不能把两个属性全公有吧。</b></p><p>此外，还有一个坑，Provider 并不是我们自己生成的，所以不可能知道Activity的名字，这里也就只有写Object 了。会涉及几处的强转。</p><p>再Fork.java中传递的是MainActivity，再注解创建presenter是，我们知道这是MainActivity，所以将其强转创建一个presenter，但是mvpPresenter又被抽取再ForkActivity中，我们并不知道实际的activity是Main，所以又强转成ForkActivity，并赋值mvpPresenter。我们再MainActivity中使用mvpPresenter，通过泛型，声明了他的类型是MainActivity</p><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/LavenderStream/fork" target="_blank" rel="noopener">https://github.com/LavenderStream/fork</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- 修复Android系统软件盘带来的泄露问题</title>
      <link href="/2017/05/05/Android-%E4%BF%AE%E5%A4%8DAndroid%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E7%9B%98%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98/"/>
      <url>/2017/05/05/Android-%E4%BF%AE%E5%A4%8DAndroid%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E7%9B%98%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>android 在使用软键盘之后， 可能会导致这个activity无法释放，造成泄露，提供一个解决办法</p><p>代码示例<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> fixInputMethodManagerLeak(Context context) &#123;</span><br><span class="line">       <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">       <span class="keyword">if</span> (imm == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">String</span>[] arr = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"mCurRootView"</span>, <span class="string">"mServedView"</span>, <span class="string">"mNextServedView"</span>&#125;;</span><br><span class="line">       Field f = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">Object</span> obj = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           <span class="keyword">String</span> param = arr[i];</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               f = imm.getClass().getDeclaredField(param);</span><br><span class="line">               <span class="keyword">if</span> (f.isAccessible() == <span class="keyword">false</span>) &#123;</span><br><span class="line">                   f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               obj = f.<span class="built_in">get</span>(imm);</span><br><span class="line">               <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; obj <span class="keyword">instanceof</span> View) &#123;</span><br><span class="line">                   View vGet = (View) obj;</span><br><span class="line">                   <span class="keyword">if</span> (vGet.getContext() == context) &#123;</span><br><span class="line">                       f.<span class="built_in">set</span>(imm, <span class="keyword">null</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- 系统分屏模式学习笔记</title>
      <link href="/2017/05/04/Android-%E7%B3%BB%E7%BB%9F%E5%88%86%E5%B1%8F%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/05/04/Android-%E7%B3%BB%E7%BB%9F%E5%88%86%E5%B1%8F%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>今天特意关注了一下 android 7.0的分屏模式，发现分屏模式后，自己的应用基本上不能运行了</p><p>1、生命周期</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-5d147a911ef62789.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>说多窗口模式不会影响activity的生命周期，那好。</p><p>按下菜单键之后</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-e93094309686e215.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>应用分屏了<br><img src="http://upload-images.jianshu.io/upload_images/1285832-8994b478328dc31b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>从分屏模式展开到正常模式<br><img src="http://upload-images.jianshu.io/upload_images/1285832-c9d8222fc6867e33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>第二张图， 最后的onPause和onResume是什么鬼？</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-2c375e26b4930e60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2、fragment<br>变成分屏模式之后,fragment的状态会被保存起来。我在程序中直接new fragment 然后add 进去了。这。。。<br>每次进来就两个fragment了。</p><p>问题1、2都不是问题，都可以解决，but，每次切换模式的时候都要重新执行所有网络请求么。</p><p>暂时还是<code>android:resizeableActivity=&quot;false&quot;</code>老老实实做一个低端应用吧</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- Android 动态换肤插件</title>
      <link href="/2017/04/28/Android-Android-%E5%8A%A8%E6%80%81%E6%8D%A2%E8%82%A4%E6%8F%92%E4%BB%B6/"/>
      <url>/2017/04/28/Android-Android-%E5%8A%A8%E6%80%81%E6%8D%A2%E8%82%A4%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>之前写了一个android夜间模式的框架，只能修改黑夜和白天。但需求总是不轻易满足现状，随随便便就能整出一个动态换肤的幺蛾子来，而且是插件式的。</p><p>跟之前夜间模式的想法一样，不能接受对现有代码入侵，最好别再java文件里写东西，最好少改代码……</p><p>无图言吊，所以先上图</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-bee0e7fe4bcb0e89.gif?imageMogr2/auto-orient/strip" alt="ezgif-3-a0265ceb11.gif"></p><p>再撸这套动态换肤之前，我参考hyman大神的几篇博客， 实现思路基本上相同，但是还是有些改动的，这是大神的项目<br><a href="https://github.com/hongyangAndroid/ChangeSkin" target="_blank" rel="noopener">https://github.com/hongyangAndroid/ChangeSkin</a></p><p>先不说逻辑了， 先记录一下框架的使用方法，之后再详细讲一下思路，请看下面华丽的分割线</p><hr><h4 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Night</span><span class="selector-class">.getInstance</span>()<span class="selector-class">.initNight</span>(<span class="selector-tag">this</span>, <span class="selector-tag">S_SKIN_PATH</span>, <span class="selector-tag">DEFAULT_SKIN</span>, <span class="selector-tag">R</span><span class="selector-class">.color</span><span class="selector-class">.class</span>);</span><br></pre></td></tr></table></figure><p>调用这个方法进行初始化<br>第一个是上下文，获取的是application的上下文<br>二，存放皮肤的目录，sd卡上的，路径后面要有\ 看起来得是sdcard/xxx/xxx/才中<br>下面是皮肤名字，只是个代号而已，填什么程序就会去找什么，当然默认值是固定的<br>最后一个参数很重要，基本上，传R.drawable.class 和  R.color.class 就够用了，R是本应用的R.java</p><h4 id="2、注册监听"><a href="#2、注册监听" class="headerlink" title="2、注册监听"></a>2、注册监听</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Night</span><span class="selector-class">.getInstance</span>()<span class="selector-class">.addListener</span>(<span class="selector-tag">this</span>);</span><br><span class="line"><span class="selector-tag">Night</span><span class="selector-class">.getInstance</span>()<span class="selector-class">.addError</span>(<span class="selector-tag">this</span>);</span><br></pre></td></tr></table></figure><p>第一个接口会在模式发生改变时调用<br>第二个会在错误时调用<br>最好是写个base， 把这些放进去，用到的时候直接复写。想那些改变布局状态时不存在的界面，就用不到这两个回调了</p><h4 id="3、使用databindning创建布局"><a href="#3、使用databindning创建布局" class="headerlink" title="3、使用databindning创建布局"></a>3、使用databindning创建布局</h4><p>hongyang大神的代码，在xml设置了tag。 问题就在这里，要是这个view set了tag，这不就尴尬了， 所以用了databinding，再设置tag时前面填了一个id。所以再setContentView的时候， 要调用<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">DataBindingUtil</span><span class="selector-class">.setContentView</span>(<span class="selector-tag">this</span>, <span class="selector-tag">R</span><span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</span><br></pre></td></tr></table></figure></p><h4 id="4、更改皮肤"><a href="#4、更改皮肤" class="headerlink" title="4、更改皮肤"></a>4、更改皮肤</h4><p>在要更改皮肤的地方调用<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Night</span><span class="selector-class">.getInstance</span>()<span class="selector-class">.setNight</span>(<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure></p><p>参数是资源包的名字</p><h4 id="5、响应更改"><a href="#5、响应更改" class="headerlink" title="5、响应更改"></a>5、响应更改</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNightChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Night.getInstance().change(mBinding.clLayout);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在回掉中把根ViewGroup传过去，然后程序就会递归调用，设置皮肤颜色。但哪个颜色找不到了，就会再error中回掉，之后怎么处理就随便了（因为是递归调用，只会在找不到相应属性的时候回掉error，要是资源能找到，就会直接更改了）</p><h4 id="6、皮肤包的制作"><a href="#6、皮肤包的制作" class="headerlink" title="6、皮肤包的制作"></a>6、皮肤包的制作</h4><p>又到了做手工的时候了</p><p>再主程序中，我们的color会这样<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"bg"</span>&gt;</span>#2e4cef<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"bg_night"</span>&gt;</span>#2c3878<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"h"</span>&gt;</span>#ffffff<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"h_night"</span>&gt;</span>#f4d300<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>解释一下吧，bg是一个颜色，bg_night是当他在夜晚模式时的颜色。皮肤中的颜色和他相同。</p><p>皮肤实际上就是一个apk， 我们拿eclipse创建一个android项目， 除了图片资源，其他的什么都不要</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-e80de554712c935e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-44d29a67e485038e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>这里规定了一下包名，以org开头，后面跟皮肤的名字，算是硬性规定吧<br>之后写颜色<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"bg"</span>&gt;</span>#ff31d2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"bg_night"</span>&gt;</span>#8f1481<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"h"</span>&gt;</span>#00aeff<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"h_night"</span>&gt;</span>#ffffff<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>一定要跟主程序中的一一对应，不然就找不到资源了</p><p>一切都是这么平静， 弄好之后，直接运行项目，导出apk，然后把后缀去掉。最后将这个包，放到他应该在的目录，这里我就放到sd卡的根目录了。一切也都完成了</p><p>项目的所有代码参考<br><a href="https://github.com/LavenderStream/Night/tree/night2.0" target="_blank" rel="noopener">https://github.com/LavenderStream/Night/tree/night2.0</a><br>两个皮肤包的下载地址<br>pink<br><a href="https://github.com/LavenderStream/Night/blob/night2.0/pink" target="_blank" rel="noopener">https://github.com/LavenderStream/Night/blob/night2.0/pink</a><br>yellow<br><a href="https://github.com/LavenderStream/Night/blob/night2.0/yellow" target="_blank" rel="noopener">https://github.com/LavenderStream/Night/blob/night2.0/yellow</a></p><hr><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>1、在执行动态换肤的逻辑当中，涉及到资源，说破大天，也就是color和drawable这两个东西，只需要知道当前的状态然后给view设置上就可以了。</p><p>2、通过反射AssetManager能获取到插件资源包中的Resources对象，再通过getIdentifier方法就能拿到当前资源的id了</p><p>3、要怎么在布局的时候告诉程序，这个空间要加载什么样的资源呢，这里就用到了databinding<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Deprecated</span></span><br><span class="line"><span class="variable">@BindingAdapter</span>(<span class="string">"drawable"</span>)</span><br><span class="line">public static void setDrawable(View view, String valueName) &#123;</span><br><span class="line">    <span class="selector-tag">Night</span><span class="selector-class">.getInstance</span>()<span class="selector-class">.drawable</span>(view, valueName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面一行valueName是一个string的字段，他标记了控件的属性名<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout</span><br><span class="line">    android:<span class="attribute">id</span>=<span class="string">"@+id/cl_layout"</span></span><br><span class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    night:<span class="attribute">background</span>=<span class="string">'@&#123;"bg"&#125;'</span></span><br><span class="line">    tools:<span class="attribute">background</span>=<span class="string">"@color/bg"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>当我们在设置这个控件时，传递了一个<figure class="highlight plain"><figcaption><span>studio并不会实时渲染这个结果，看不见最后布局的样子，这就大大的增加了错误的概率，万一string填错了那就显示不出来了。还有在剔除无用资源是，这个也不会索引进去。所以再xml增加tools，把每一个要换肤的控件同时添加一行tools就可以了</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4、避免不了的是在java代码动态设置，并不通过xml，像一些动态添加的view。这时我们依然可以像databinding一样，去调用静态的方法</span><br></pre></td></tr></table></figure></p><p>NightBind.setDrawable(mBinding.clLayout, “bg”);<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">依然是个字符串，还是那个问题，bg写错了呢？</span><br><span class="line">解决这个问题的方法就是，再night框架初始化的时候，反射记录了r文件中的<span class="built_in">color</span>和drawable的字段名和值。我们通过值去找字段名字了，第二个参数的<span class="built_in">string</span>就可以改成int了，就是用R.<span class="built_in">color</span>.xx的形式。</span><br><span class="line">经测试，再70ms之内可以把所有的字段反射读取完，要是担心<span class="built_in">map</span>存了太多，可以设置几个关键字，有些是系统的字段，像什么abc_ 、design_ 、 material_  、notification_ 以这些开头的我们不添加到<span class="built_in">map</span>中， 然后自己命名资源文件的时候注意一下就行了，说实话 abc_ 还挺多的。</span><br><span class="line"></span><br><span class="line">图片命名我习惯加ic_ 前缀，颜色的话基本不会有前缀，这样就很好区分了。</span><br></pre></td></tr></table></figure></p><p>NightBind.setDrawable(mBinding.clLayout, R.color.bg);<br><code>`</code><br>这样就大大减少了手抖写错的概率了。</p><p>5、实现流程</p><ul><li>初始化 读取R文件，存放resourceId 和 ResourceName的map对象。并设置好Resource对象和相关资源</li><li>每当状态改变时（初始化状态也是一种改变）xml会通过tag中的string标记，通过当前资源包中的resource和这个tag字段名去找相应的资源；代码动态设置时，会根据传入的id在map中找到相应的string，之后就和在xml中调用的流程一样了</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android -- Rx应用场景记录</title>
      <link href="/2017/04/01/Android-Rx%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/04/01/Android-Rx%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1、debounce"><a href="#1、debounce" class="headerlink" title="1、debounce"></a>1、debounce</h1><h2 id="去抖动、减少不必要的处理"><a href="#去抖动、减少不必要的处理" class="headerlink" title="去抖动、减少不必要的处理"></a>去抖动、减少不必要的处理</h2><p>当所发射数据的时间差小于设定值，debounce滤掉前N-1个节点，也就是说会留下最后一个<br>在做响应式、动态搜索时，可用于减少不必要的网络请求次数</p><h1 id="2、throttleFirst"><a href="#2、throttleFirst" class="headerlink" title="2、throttleFirst"></a>2、throttleFirst</h1><h2 id="防抖动"><a href="#防抖动" class="headerlink" title="防抖动"></a>防抖动</h2><p>获取这段时间内的第一个值，可用于按钮的防抖动，这与debounce不同，debounce是取最后一个，throttleFirst是取第一个</p><p>#3、interval<br>做周期性操作</p><p>#4、timer<br>做定时器相关的操作，貌似已经不推荐使用</p><p>#5、switchMap<br>取消掉无用的数据、结和debounce做响应式优化<br>当发射一个新的数据项时，若之前的旧的订阅没有完成，即取消这些订阅，只返回最后一个</p><p>#6、combineLatest<br>合并最近的N个节点<br>可用于账号、密码、验证码等的统一验证</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- 夜间模式切换</title>
      <link href="/2017/02/17/Android-%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/"/>
      <url>/2017/02/17/Android-%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="黑夜"><a href="#黑夜" class="headerlink" title="黑夜"></a>黑夜</h3><p>在项目中的黑夜模式是这样实现的</p><ul><li>在整个程序中有一个static的list，存放着所有存活的activity或这fragment。</li><li>放黑色模式的按钮发生变化时，存sp，遍历这个list， 向实现这个接口的所有视图，通知黑夜模式有变</li><li>这也页面会根据当前sp中的值重新设置color</li><li>按照这种方式下去， 我们的代码是这样的：<ul><li>每个activity或者fragment实现一个接口</li><li>在这个接口中，把所有涉及到颜色变换的组件，分别设置颜色</li><li>颜色的来源是从sp中读取一个字段，然后根据黑天或者白天， 去加载一下color或者drawable</li><li>项目中有一段java文件， 存放了所有的颜色值，大概会有400多个静态的全局变量，标记着颜色各种颜色和drawable，就像一个R文件一样</li></ul></li></ul><p>带来的几个问题是</p><ul><li>不得不要在整个布局创建的时候先给定一个颜色，通常是默认的白天。当设置成黑夜模式的时候实际上都是先设置成白天， 然后再把布局重新设置成黑天的状态，有种脱裤子放屁的感觉了</li><li>所有的颜色文件要写在colors.xml中一份，为了是能在xml中设置，同时我在java文件中也要同时生命所有的黑夜和白天的属性，一共400多个静态的变量</li><li>每次黑夜和白天的交替，我要把所有涉及到的组件都更新一次，若代码复杂的话，基本GG了。</li></ul><h3 id="凌晨"><a href="#凌晨" class="headerlink" title="凌晨"></a>凌晨</h3><p>项目最小api支持9，4.0的夜间模式是用不上了，不然的话写一个color和一个color-night， 接着把已经存在的界面设置一下， 就可以去喝茶了。</p><p>实现是没那么多时间去把所有的view组件重写一边，就为了实现黑夜和白天的效果也没必要。</p><p>想了想，要是我能知道现在view的属性， 然后我在找到这个属性在黑天的时候是什么样子的，在设置一下不就好了。所以就顺着这个思路一直走下去。</p><h3 id="白天"><a href="#白天" class="headerlink" title="白天"></a>白天</h3><p>大致的思路就是，我先要知道这个view的textcolor或者background再或者drawable什么的，改变颜色不就是他们这几个属性么？我想直接找到view中的这些属性，但是试了试没有办法。没办法通过人r.id去找到对应的名字。但是，我们却能通过名字找到对应的id</p><p>ok， 那我就用view 的tag 存一下这个名字吧，但是还是不能解决两次设置属性，还是就是， 我万一要用tag可怎么办，总不能不用吧。那databinding试试吧</p><hr><p>手动分割线，下面就是思路</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c13282c8811abaa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xml"></p><p>使用binding，就像写了自定义view的attrs一样，这是一个命名空间，写了两个属性，顾名思义了。传入的就是在xml文件中写的color值。这里传的只是代表白天时的key，我们要传个字符串，就要<code>&quot; &#39;&#39; &quot;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-67a3b75ba810cfd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="color.xml"></p><p>以上就是颜色的值了，写到了一个xml文件中了（ps：这里我更喜欢 night_，因为我有alt键）</p><p>用了databinding去加载布局，这里就涉及到了三个方法，当我用databinding去加载布局的时候就会自动的调用对应的方法</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-2e9347daf746dec8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="binding"></p><p>当然，无论如何，都离不开收集一下所有存活的view，oncreate的时候填进去，destory去掉，这个别忘记就行了， 建议观察者吧。</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-33458e494cc05ce3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="view set"></p><p>当黑夜模式发生更改时，去递归更改root下的所有子view的所有子view的所有子view的所有子view……</p><p>但是真对于像recyclerview这个大哥，就不递归了，怕子view太多，根本停不下来（当然还是各种要判断的view），这里只是实现了背景和字体颜色，drawable都差不多，demo上就不写了</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c8954e10501cb95b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="change"></p><p>最后一个就是根据属性的名字得到资源的方法了</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-b9cec024ef184d61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="get resource id"></p><p>基本实现变换的代码就这么多了，下面是正经代码和分割线</p><hr><p>在开始和结束的时候，会注册和取消，一般放在base中就行了<br>在切换的时候会调用下一<code>setNight()</code>方法，就是一个for循环，去一一调用<code>onChange()</code> ，在<code>onChange()</code>中去改变属性，就是上面的那个递归，这里传rootview，别太深起到作用就好</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-263c48d6fe1a9cfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MainAvtivity"></p><p>如果是recyclerview的这种情况，在<code>onCreateViewHolder</code>使用binding哦，不然那三个静态方法是没用的<br><img src="http://upload-images.jianshu.io/upload_images/1285832-7820d1cbb87255f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="recyclerview"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-5ae5fc0b690e26f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="onCreateViewHolder"></p><p><code>onChange()</code>方法中不但设置了change并且notify了， 因为在最开始，我吧recyclerview提出了整个递归，为了不让一下更新太多的view，recyclerview的显示以item为单位吧，在<code>onBindViewHolder()</code>中，在重新设置布局，这个rootview就是item的root。</p><h5 id="gif图怎么做？"><a href="#gif图怎么做？" class="headerlink" title="gif图怎么做？"></a>gif图怎么做？</h5>]]></content>
      
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AndroidStudio -- 将linux 命令放到 android studio 终端</title>
      <link href="/2016/12/28/AndroidStudio-%E5%B0%86linux-%E5%91%BD%E4%BB%A4%E6%94%BE%E5%88%B0-android-studio-%E7%BB%88%E7%AB%AF/"/>
      <url>/2016/12/28/AndroidStudio-%E5%B0%86linux-%E5%91%BD%E4%BB%A4%E6%94%BE%E5%88%B0-android-studio-%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>用mac敲代码固然是好，但也实在是买不起，linux的终端命令大大方便了平时的开发，但是windows 的cmd简直是不能言表。</p><p>今天用了一点时间弄了一下，基本上可以实现使用android studio 提供的终端，完成基本的命令。</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-8decaffd9766091b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-e1658da1f7a54607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-26acf78fe9e953bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>实现方式也很简单<br>在windows都会用到git的工具， 就是git for windows，这里面实现了好多linux下的命令，在安装目录下的usr\bin，下面，我们只需在windows的环境变量中添加这个路径就可以了。</p><p>配置完成之后，在cmd中就可以使用linux命令了，但是差强人意。ls 列出列表不带颜色，无法区分文件的形式。把bin中的ls.exe 新命个名，就叫ls1.exe。然后写个ls.cmd 用于启动这个exe<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@ECHO</span> OFF</span><br><span class="line">ls1 --color %*</span><br><span class="line"><span class="variable">@ECHO</span> ON</span><br></pre></td></tr></table></figure></p><p>ok, 这样在开发中也就方便多了</p>]]></content>
      
      
      <categories>
          
          <category> AndroidStudio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android -- RxAndroid 2.0 学习笔记</title>
      <link href="/2016/12/24/Android-RxAndroid-2-0-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/12/24/Android-RxAndroid-2-0-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Rxjava 2.x正式版出来已经快两个月了。在之前的项目中也在使用Rx。但却一直没有时间对整个的知识进行梳理，恰好今天抽出时间，也系统的再学习一遍RxJava/RxAndroid</p><hr><h1 id="RxJava的使用"><a href="#RxJava的使用" class="headerlink" title="RxJava的使用"></a>RxJava的使用</h1><h3 id="一、观察者-被观察者"><a href="#一、观察者-被观察者" class="headerlink" title="一、观察者/被观察者"></a>一、观察者/被观察者</h3><p>1、前奏：<br>在观察者之前就要先提下<strong>backpressure</strong>这个概念。简单来说，<strong>backpressure</strong>是在异步场景中，被观察者发送事件速度远快于观察者的处理速度时，告诉被观察者降低发送速度的策略。</p><p>2、在2.0中有以下几种观察者</p><ul><li>Observable/Observer</li><li>Flowable/Subscriber</li><li>Single/SingleObserver</li><li>Completable/CompletableObserver</li><li>Maybe/MaybeObserver</li></ul><p>依次的来看一下：</p><h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Observable</span></span><br><span class="line"><span class="selector-class">.just</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="selector-class">.subscribe</span>(new Observer &lt; Integer &gt; () &#123;</span><br><span class="line"><span class="variable">@Override</span> public void onSubscribe(Disposable d) &#123;&#125;</span><br><span class="line"><span class="variable">@Override</span> public void onNext(Integer value) &#123;&#125;</span><br><span class="line"><span class="variable">@Override</span> public void onError(Throwable e) &#123;&#125;</span><br><span class="line"><span class="variable">@Override</span> public void onComplete() &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里要提的就是onSubscribe(Disposable d)，disposable用于取消订阅。<br>就用简单的just这个操作符来分析一下。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="variable">@SchedulerSupport</span>(SchedulerSupport.NONE) </span><br><span class="line">public static &lt; T &gt; Observable &lt; T &gt; just(T item1, T item2, T item3, T item4) &#123;</span><br><span class="line">    <span class="selector-tag">ObjectHelper</span><span class="selector-class">.requireNonNull</span>(item1, <span class="string">"The first item is null"</span>);</span><br><span class="line">    <span class="selector-tag">ObjectHelper</span><span class="selector-class">.requireNonNull</span>(item2, <span class="string">"The second item is null"</span>);</span><br><span class="line">    <span class="selector-tag">ObjectHelper</span><span class="selector-class">.requireNonNull</span>(item3, <span class="string">"The third item is null"</span>);</span><br><span class="line">    <span class="selector-tag">ObjectHelper</span><span class="selector-class">.requireNonNull</span>(item4, <span class="string">"The fourth item is null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">fromArray</span>(item1, item2, item3, item4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE) </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; T &gt; Observable &lt; T &gt; fromArray(T...items) &#123;</span><br><span class="line">    ObjectHelper.requireNonNull(items, <span class="string">"items is null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (items.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(items.length == <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">just</span><span class="params">(items[<span class="number">0</span>])</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableFromArray &lt; T &gt; (items));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer &lt; ?<span class="keyword">super</span> T &gt; s)</span> </span>&#123;</span><br><span class="line">    FromArrayDisposable &lt; T &gt; d = <span class="keyword">new</span> FromArrayDisposable &lt; T &gt; (s, array);</span><br><span class="line">    s.onSubscribe(d);</span><br><span class="line">    <span class="keyword">if</span> (d.fusionMode) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    disposed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isDisposed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> disposed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T[] a = array;</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; !isDisposed(); i++) &#123;</span><br><span class="line">        T value = a[i];</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            actual.onError(<span class="keyword">new</span> NullPointerException(<span class="string">"The "</span> + i + <span class="string">"th element is null"</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        actual.onNext(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">        actual.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>just实际调用了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在取消绑定是我们可以将Disposable添加到CompositeDisposable中或者直接调用Disposable的dispose() 方法在流的任意位置取消。</span><br><span class="line"></span><br><span class="line">此外， 为了简化代码，我使用了Consumer作为观察者（可以当成1.0时候的Action1 、ActionX）```subscribe```的返回值就是一个Disposable (```subscribe``` 的返回值根据传入的参数不同，也有不同)我把这个对象添加到CompositeDisposable，并在中途取消，但发射器仍然会把所有的数据全都发射完。因为LambdaSubscriber（也就是传入Consumer 所构造的观察者）的```dispose``` 和 ``` isDispose ``` 略有不同，并不是简简单单的true/false， 说实话，我没看懂Consumer的这两个方法干了什么...........尴尬</span><br></pre></td></tr></table></figure></p><p>LambdaSubscriber 瞅瞅</p><p>@Override<br>public void dispose() {<br>cancel();<br>}</p><p>@Override<br>public boolean isDisposed() {<br>  return get() == SubscriptionHelper.CANCELLED;<br>}<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Flowable </span><br><span class="line">是2.0之后用的最多的观察者了，他与上一个的区别在于支持背压，也就是说，下游会知道上游有多少数据，所以他Subscriber会是这样</span><br></pre></td></tr></table></figure></p><p>Flowable<br>.just(1, 2, 3, 4)<br>.subscribe(new Subscriber &lt; Integer &gt; () {<br>@Override public void onSubscribe(Subscription s) {<br>  s.request(Long.MAX_VALUE);<br>}<br>@Override public void onNext(Integer integer) {}<br>@Override public void onError(Throwable t) {}<br>@Override public void onComplete() {}<br>});<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```onSubscribe``` 这个回调传出了一个Subscription， 我们要指定他传出数据的大小， 调用他的```request()``` 方法。如没有要求可以传入一个Long的最大数值```Long.MAX_VALUE```。</span><br><span class="line">要说明一下，request这个方法若不调用,下游的onNext与OnComplete都不会调用；若你写的数量小于，只会传你的个数，但是不会调用onComplete方法,可以看下```FlowableFromArray```的```slowPath```方法</span><br></pre></td></tr></table></figure></p><p>@Override void slowPath(long r) {<br>    long e = 0;<br>    T[] arr = array;<br>    int f = arr.length;<br>    int i = index;<br>    Subscriber &lt; ?super T &gt; a = actual;<br>    for (;;) {<br>        while (e != r &amp;&amp; i != f) {<br>            if (cancelled) {<br>                return;<br>            }<br>            T t = arr[i];<br>            if (t == null) {<br>                a.onError(new NullPointerException(“array element is null”));<br>                return;<br>            } else {<br>                a.onNext(t);<br>            }<br>            e++;<br>            i++;<br>        }<br>        if (i == f) {<br>            if (!cancelled) {<br>                a.onComplete();<br>            }<br>            return;<br>        }<br>        r = get();<br>        if (e == r) {<br>            index = i;<br>            r = addAndGet( - e);<br>            if (r == 0L) {<br>                return;<br>            }<br>            e = 0L;<br>        }<br>    }<br>}<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">需要<span class="keyword">if</span> (i == f) f 是这个数据的大小，i是当前发送数据的个数,所以不会调用onComplete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 休息一下</span><br><span class="line">这是几种被观察者实现的接口</span><br><span class="line">* Observable 接口 ObservableSource </span><br><span class="line">* Flowable 接口 Publisher</span><br><span class="line">* Single 接口 SingleSource</span><br><span class="line">* Completable 接口 CompletableSource </span><br><span class="line">* Maybe 接口 MaybeSource</span><br><span class="line"></span><br><span class="line">梳理完了两个被观察者，发现Flowable支持背压，父类是Publisher；Observable不支持背压，父类是ObservableSource，他们的实现方式，与其的操作符，到最后的观察者，都有些不同，他们是完全独立开的。各自之间也互不影响。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Single</span><br><span class="line">单值相应的模式: 就是只有一个值呗？</span><br><span class="line">#### Completable</span><br><span class="line">表示没有任何值但仅指示完成或异常的延迟计算。</span><br><span class="line">#### Maybe</span><br><span class="line">maybe 可以当成上面两个的合体吧！</span><br><span class="line"></span><br><span class="line">后面的三种，就不细掰了，我就是这么不求甚解。</span><br><span class="line"></span><br><span class="line">### 二、操作符</span><br><span class="line">操作符基本就没有改变，但还是会发现，我擦，<span class="keyword">from</span>没了，可以使用fromIterable</span><br><span class="line">之前的actionx 也替换了Action  \ Consumer  \ BiConsumer</span><br><span class="line">Func也跟action一样， 名字改变了Function</span><br><span class="line"></span><br><span class="line">感觉这样是正经Rx了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 三、线程切换</span><br><span class="line">当然现场切换没有发生改变，用法还是一样，但是之前没有看过源码，不知道怎样神奇的把线程切换了，难道是来自东方的神秘力量。趁着还有时间，撸一下代码。</span><br><span class="line">在调用```subscribeOn(Schedulers.io())```之后，会创建ObservableSubscribeOn</span><br></pre></td></tr></table></figure></p><p>parent.setDisposable(scheduler.scheduleDirect(new Runnable() {<br>@Override<br>public void run() {<br>        source.subscribe(parent);<br>    }<br>}<br>));<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在这个过程中，会把source也就是ObservableSource在线程中订阅，同时也把把传入的Observer变成SubscribeOnObserver。若指定的是io线程，可以在```IoScheduler```中看见对线程的管理</span><br><span class="line">在调用```observeOn(AndroidSchedulers.mainThread())```时，会产生一个ObservableObserveOn，同时还会把Observer变成ObserveOnObserver，可以发现在```HandlerScheduler```，在ui线程调用了ObserveOnObserver的```run```方法</span><br><span class="line"></span><br><span class="line">### 四、Rxjava的数据传递</span><br><span class="line">Rxjava是我在工作这几个月最喜欢的框架，没有之一。完全解决了我这个有洁癖的人在打代码时的玻璃心。</span><br><span class="line">虽然重复造轮轮子是没有必要的（我也造不出来），但是为了全面的了解Rxjava，我也准备简单的实现一下，数据在每个操作符之中传输的整个过程。</span><br><span class="line"></span><br><span class="line">在实现之前先猜想一下大概的过程吧：</span><br><span class="line">我的需求是在一个static方法中产生一个数值，并且通过一层层的接口传递下去，下面的操作符的人参是上一个的返回值，最后输出，我就模仿着Rx的 Maybe 的名字实现吧。</span><br><span class="line">* 首先我要一直‘点’下去的话Maybe 一定要返回自己</span><br><span class="line">* 接口要一层层的传进去，这样的话就可以在发射数据时，发原始数据传入这个一堆的接口，然后每个接口计算自己的实现。</span><br><span class="line">* 最后返回结果</span><br><span class="line"></span><br><span class="line">之后就是仿造源码完成这段需求了，当然这些方法也都简单写了，就是为了弄清楚思路：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、创建一个MaybeSource，我们的Maybe 和 各个操作符都会实现它。</span><br></pre></td></tr></table></figure></p><p>public interface MaybeSource {<br>     void subscribe(MaybeObserver observer);<br>}<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、创建一个MaybeObserver， 这就是最后绑定的时候的接口</span><br></pre></td></tr></table></figure></p><p>public interface MaybeObserver {<br>    void onSuccess(int value);<br>}<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>、创建<span class="function"><span class="keyword">Function</span></span>， 这个在操作符中用于实现</span><br></pre></td></tr></table></figure></p><p>public interface Function {<br>    int apply(int t);<br>}<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>、当然少不了Maybe， 这里就实现just和<span class="built_in">map</span>两个方法吧</span><br></pre></td></tr></table></figure></p><p>public abstract class Maybe implements MaybeSource {<br>    public static Maybe just(int item) {<br>        return new MaybeJust(item);<br>    }</p><pre><code>public final Maybe map(Function mapper) {    return new MaybeMap(this, mapper);}</code></pre><p>}<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">5、just实际返回的对象是MaybeJust，他的父类是Maybe</span></span><br></pre></td></tr></table></figure></p><p>public class MaybeJust extends Maybe {<br>    final int value;</p><pre><code>public MaybeJust(int value) {    this.value = value;}@Overridepublic void subscribe(MaybeObserver observer) {    observer.onSuccess(value);}</code></pre><p>}<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">6</span>、<span class="built_in">map</span>实际返回的对象是MaybeMap，他的父类是Maybe</span><br></pre></td></tr></table></figure></p><p>public class MaybeMap extends Maybe {<br>    final Function mapper;<br>    final MaybeSource source;</p><pre><code>public MaybeMap(MaybeSource source, Function mapper) {    this.source = source;    this.mapper = mapper;}@Overridepublic void subscribe(MaybeObserver observer) {    source.subscribe(new MapMaybeObserver(observer, mapper));}static final class MapMaybeObserver implements MaybeObserver {    final MaybeObserver actual;    final Function mapper;    MapMaybeObserver(MaybeObserver actual, Function mapper) {        this.actual = actual;        this.mapper = mapper;    }    @Override    public void onSuccess(int value) {        this.actual.onSuccess(this.mapper.apply(value));    }}</code></pre><p>}<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>、在main中可以这么运行</span><br></pre></td></tr></table></figure></p><p>Maybe<br>.just(1)<br>.map(new Function() {</p><pre><code>@Overridepublic int apply(int t) {    return t + 1;}</code></pre><p>}).map(new Function() {</p><pre><code>@Overridepublic int apply(int t) {    return t * 4;}</code></pre><p>}).subscribe(new MaybeObserver() {</p><pre><code>@Overridepublic void onSuccess(int value) {    System.out.println(value);}</code></pre><p>});<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">8、运行结果，传入1，先+1， 在 * 4，最后结果应该是8</span><br><span class="line"></span><br><span class="line">![<span class="string">Paste_Image.png</span>](<span class="link">http://upload-images.jianshu.io/upload_images/1285832-459853eb386d986c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span>)</span><br><span class="line"></span><br><span class="line">得到了期望的结果</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section"># RxJava 2.0 + Retrofit 2 .0</span></span><br><span class="line">之前做过一个项目，没用什么架构，也没什么封装。但对我帮助最大的是，之前是不能接受这样的代码的，感觉看上去脑袋都大了。但看习惯了， 也就习惯了。</span><br><span class="line">但平时自己弄个小项目还是使用mvp，自己的洁癖可能更加强烈一点</span><br><span class="line"></span><br><span class="line">在Retrofit 中选择了Flowable作为返回值，支持背压，在2.0之后应该最为常用</span><br></pre></td></tr></table></figure></p><p>@GET(“/“)<br>Flowable<responsebody> getText();<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在<span class="selector-tag">RxJava</span> 2<span class="selector-class">.0</span> 中使用<span class="selector-tag">CompositeDisposable</span>做解除绑定的操作， <span class="selector-tag">Consumer</span> 回调中使用了三个<span class="selector-tag">Consumer</span>，作为成功、失败、完成的回调</span><br></pre></td></tr></table></figure></responsebody></p><pre><code>public &lt;T&gt; void addSubscription(Flowable flowable,    final RxSubscriber&lt;T&gt; subscriber) {    if (mCompositeDisposable == null) {        mCompositeDisposable = new CompositeDisposable();    }    if (subscriber == null) {        Log.e(TAG, &quot;rx callback is null&quot;);        return;    }    Disposable disposable = flowable.subscribeOn(Schedulers.io())                                    .observeOn(AndroidSchedulers.mainThread())                                    .subscribe(new Consumer&lt;T&gt;() {                @Override                public void accept(T o) throws Exception {                    subscriber.onNext(o);                }            },            new Consumer&lt;Throwable&gt;() {                @Override                public void accept(Throwable throwable)                    throws Exception {                    subscriber.onError(throwable);                }            },            new Action() {                @Override                public void run() throws Exception {                    subscriber.onComplete();                }            });</code></pre><p><code>`</code></p><p>此外，之前的项目后台接口也是奇葩，同一个人写的接口，接口的返回格式更是多种多样，还不改，没办法，客户端只能将就着服务端，谁叫我们是新来的呢。遇到这种问题，就不直接转成对象格式了，先转成ResponseBody得到Body，再拿出string来。<br>okhttp中response的body对象就是这个ResponseBody，他的string() 方法就可以获得整个body，然后再做json解析吧</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-79b2c34ae347d7a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-79ec842b4f155cb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android -- 使用微信登入退出的时候应用闪屏</title>
      <link href="/2016/12/08/Android-%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%85%A5%E9%80%80%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E5%BA%94%E7%94%A8%E9%97%AA%E5%B1%8F/"/>
      <url>/2016/12/08/Android-%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%85%A5%E9%80%80%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E5%BA%94%E7%94%A8%E9%97%AA%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<p>项目中集成了微信登入，从微信登入界面退出或者侧滑退出的时候，屏幕会先变黑然后在变成正常。<br>用之前公司的侧滑退出的时候，也会出现这种一样的问题。可后来，想想又不对，这个项目可没有侧滑退出。紧接着看看是不是微信这个activity主题的关系。把这个WXEntryActivity主题改成android:theme=”@android:style/Theme.Translucent”<br>我擦，竟然好了。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- Glide 学习笔记</title>
      <link href="/2016/11/29/Android-Glide-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/11/29/Android-Glide-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>入行一年半的android程序员，半个月前的一个上午还在跟同事讨论发不发年终奖，下午就被裁了。找工作快两个礼拜了，连面试的都没有，更别说找个好工作了。估计再呆下去真得抑郁症了</p><p>同理，上来先喷一下，横线之后开始写内容</p><hr><h3 id="Glide的基本用法"><a href="#Glide的基本用法" class="headerlink" title="Glide的基本用法"></a>Glide的基本用法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(this)<span class="selector-class">.load</span>(<span class="string">""</span>)<span class="selector-class">.into</span>();</span><br></pre></td></tr></table></figure><h3 id="Glide-with"><a href="#Glide-with" class="headerlink" title="Glide :: with"></a>Glide :: with</h3><p>创建了一个RequestManagerRetriever 的实例，调用了get方法<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span>(<span class="params">FragmentActivity activity</span>)</span> &#123;</span><br><span class="line">    RequestManagerRetriever retriever = RequestManagerRetriever.<span class="keyword">get</span>();</span><br><span class="line">    <span class="keyword">return</span> retriever.<span class="keyword">get</span>(activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="RequestManagerRetriever-get"><a href="#RequestManagerRetriever-get" class="headerlink" title="RequestManagerRetriever :: get"></a>RequestManagerRetriever :: get</h3><p>先检查一下线程，如果不在主线程，执行get方法 。 ps： 不过我记得，加载图片，是不能放在线程里的，这里却放过了线程<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RequestManager <span class="keyword">get</span>(FragmentActivity activity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">get</span>(activity.getApplicationContext());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        assertNotDestroyed(activity);</span><br><span class="line">        FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class="line">        <span class="keyword">return</span> supportFragmentGet(activity, fm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="RequestManager-supportFragmentGet"><a href="#RequestManager-supportFragmentGet" class="headerlink" title="RequestManager :: supportFragmentGet"></a>RequestManager :: supportFragmentGet</h3><ul><li>从FragmentManager中取出当前页面的fragment<br>(SupportRequestManagerFragment 这个fragment主要的功能就是同步activity的生命周期)</li><li>要是activity没有这个fragment的话，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 还没有的话创建一个fragment</span><br><span class="line"></span><br><span class="line">ps：这里有个问题，每次创建完之后，发一个handler，把存储在pendingSupportRequestManagerFragments中的fragment干掉了，不知道是干嘛的，猜测是避免重复创建frgment的一个手段吧</span><br></pre></td></tr></table></figure></li></ul><p>RequestManager supportFragmentGet(Context context, FragmentManager fm) {<br>    SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm);<br>    RequestManager requestManager = current.getRequestManager();<br>    if (requestManager == null) {<br>        requestManager = new RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());<br>        current.setRequestManager(requestManager);<br>    }<br>    return requestManager;<br>}<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="type">SupportRequestManagerFragment</span> getSupportRequestManagerFragment(final <span class="type">FragmentManager</span> fm) &#123;</span><br><span class="line">    <span class="type">SupportRequestManagerFragment</span> current = (<span class="type">SupportRequestManagerFragment</span>) fm.findFragmentByTag(</span><br><span class="line"></span><br><span class="line">    <span class="type">FRAGMENT_TAG</span>);</span><br><span class="line">    <span class="keyword">if</span> (current == null) &#123;</span><br><span class="line">        current = pendingSupportRequestManagerFragments.get(fm);</span><br><span class="line">        <span class="keyword">if</span> (current == null) &#123;</span><br><span class="line">            current = <span class="function"><span class="keyword">new</span> <span class="title">SupportRequestManagerFragment</span>();</span></span><br><span class="line"><span class="function">            <span class="title">pendingSupportRequestManagerFragments</span>.<span class="title">put</span>(fm, current);</span></span><br><span class="line"><span class="function">            <span class="title">fm</span>.<span class="title">beginTransaction</span>().<span class="title">add</span>(current, <span class="type">FRAGMENT_TAG</span>).<span class="title">commitAllowingStateLoss</span>();</span></span><br><span class="line"><span class="function">            <span class="title">handler</span>.<span class="title">obtainMessage</span>(<span class="type">ID_REMOVE_SUPPORT_FRAGMENT_MANAGER</span>, fm).<span class="title">sendToTarget</span>();</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">current</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>接下来最主要的就是RequestManager 了</p><h3 id="RequestManager"><a href="#RequestManager" class="headerlink" title="RequestManager"></a>RequestManager</h3><p>RequestManager管理了每个acitivity上的图片请求，RequestManager 含有了activity的生命周期，并且含有一个RequestTracker这样的请求栈，这个栈是一个包含有请求（request）的arrayList</p><h3 id="RequestManager-load"><a href="#RequestManager-load" class="headerlink" title="RequestManager :: load"></a>RequestManager :: load</h3><p>还记得上面说到的request吗？这里就根据传入的资源去构建一个request build，这里就是构建了一个DrawableTypeRequest 。在RequestManager 中有各种load，load调用了各种from，但都调用了一个loadGeneric方法<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DrawableTypeRequest &lt; <span class="keyword">Integer</span> &gt; load(<span class="keyword">Integer</span> resourceId) &#123;</span><br><span class="line">    <span class="keyword">return</span> (DrawableTypeRequest &lt; <span class="keyword">Integer</span> &gt; ) fromResource().load(resourceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="RequestManager-loadGeneric"><a href="#RequestManager-loadGeneric" class="headerlink" title="RequestManager :: loadGeneric"></a>RequestManager :: loadGeneric</h3><p>从代码上看，主要创建了两个modelLoader 和调用了 optionsApplier.apply。(这里要打一个大大的问号了……)这段代码不是很懂，结合这注释看，总之这里创建了DrawableTypeRequest （具体过程先不管了），调用父类的load方法，也就是GenericRequestBuilder的load<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt; T &gt; DrawableTypeRequest &lt; T &gt; loadGeneric(Class &lt; T &gt; modelClass) &#123;</span><br><span class="line">    ModelLoader &lt; T, InputStream &gt; streamModelLoader = Glide.buildStreamModelLoader(modelClass, context);</span><br><span class="line">    ModelLoader &lt; T,ParcelFileDescriptor &gt; fileDescriptorModelLoader = Glide.buildFileDescriptorModelLoader(modelClass, context);</span><br><span class="line">    <span class="keyword">if</span> (modelClass != <span class="literal">null</span> &amp;&amp; streamModelLoader == <span class="literal">null</span> &amp;&amp; fileDescriptorModelLoader == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"Unknown type "</span> + modelClass + <span class="string">". You must provide a Model of a type for"</span> + <span class="string">" which there is a registered ModelLoader, if you are using a custom model, you must first call"</span> + <span class="string">" Glide#register with a ModelLoaderFactory for your custom model class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> optionsApplier.apply(<span class="keyword">new</span> <span class="type">DrawableTypeRequest</span> &lt; T &gt; (modelClass, streamModelLoader, fileDescriptorModelLoader, context, glide, requestTracker, lifecycle, optionsApplier));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="GenericRequestBuilder-into"><a href="#GenericRequestBuilder-into" class="headerlink" title="GenericRequestBuilder :: into"></a>GenericRequestBuilder :: into</h3><p>GenericRequestBuilder中的into方法，首先进行了线程的检查，等异常的处理和transform的几种缩放处理，之后统一调用了into方法<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Target &lt; TranscodeType &gt; into(ImageView view) &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must pass in a non null View"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isTransformationSet &amp;&amp; view.getScaleType() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getScaleType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">CENTER_CROP:</span></span><br><span class="line">            applyCenterCrop();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">FIT_CENTER:</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">FIT_START:</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">FIT_END:</span></span><br><span class="line">            applyFitCenter();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//$CASES-OMITTED$</span></span><br><span class="line"><span class="symbol">        default:</span></span><br><span class="line">            <span class="comment">// Do nothing.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> into(glide.buildImageViewTarget(view, transcodeClass));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="GenericRequestBuilder-into-target"><a href="#GenericRequestBuilder-into-target" class="headerlink" title="GenericRequestBuilder :: into(target)"></a>GenericRequestBuilder :: into(target)</h3><p>这个方法主要看target有没有请求，若有的话清掉，在构建一个请求，添加到生命周期，并执行请求<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt; Y <span class="keyword">extends</span> Target &lt; TranscodeType &gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(Y <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">target</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must pass in a non null Target"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isModelSet) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must first set a model (try #load())"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Request previous = <span class="keyword">target</span>.getRequest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        previous.clear();</span><br><span class="line">        requestTracker.removeRequest(previous);</span><br><span class="line">        previous.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Request request = buildRequest(<span class="keyword">target</span>);</span><br><span class="line">    <span class="keyword">target</span>.setRequest(request);</span><br><span class="line">    lifecycle.addListener(<span class="keyword">target</span>);</span><br><span class="line">    requestTracker.runRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">target</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过obtainRequest 去获得Request<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function">Request <span class="title">obtainRequest</span><span class="params">(Target &lt; TranscodeType &gt; <span class="keyword">target</span>, <span class="keyword">float</span> sizeMultiplier, Priority priority, RequestCoordinator requestCoordinator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GenericRequest.obtain(loadProvider, model, signature, context, priority, <span class="keyword">target</span>, sizeMultiplier, placeholderDrawable, placeholderId, errorPlaceholder, errorId, fallbackDrawable, fallbackResource, requestListener, requestCoordinator, glide.getEngine(), transformation, transcodeClass, isCacheable, animationFactory, overrideWidth, overrideHeight, diskCacheStrategy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="RequestTracker-runRequest"><a href="#RequestTracker-runRequest" class="headerlink" title="RequestTracker :: runRequest"></a>RequestTracker :: runRequest</h3><p>将请求添加到请求队列中，如果没有暂停，将Request开始，并且添加到挂起的队列<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void runRequest(<span class="built_in">Request</span> <span class="built_in">request</span>) &#123;</span><br><span class="line">    requests.add(<span class="built_in">request</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isPaused) &#123;</span><br><span class="line">        <span class="built_in">request</span>.begin();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pendingRequests.add(<span class="built_in">request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="GenericRequest-begin"><a href="#GenericRequest-begin" class="headerlink" title="GenericRequest :: begin"></a>GenericRequest :: begin</h3><p>begin 方法中onSizeReady() 是主要的方法，与此之外，这里还调用了target的一些方法，主要是添加占位和错误的图片，基本上就是调用了view 的设置图片，就不粘代码了。主要还是看onSizeReady<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    startTime = LogTime.getLogTime();</span><br><span class="line">    <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</span><br><span class="line">        onException(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = Status.WAITING_FOR_SIZE;</span><br><span class="line">    <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class="line">        onSizeReady(overrideWidth, overrideHeight);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">target</span>.getSize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isComplete() &amp;&amp; !isFailed() &amp;&amp; canNotifyStatusChanged()) &#123;</span><br><span class="line">        <span class="keyword">target</span>.onLoadStarted(getPlaceholderDrawable());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        logV(<span class="string">"finished run method in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Override <span class="keyword">public</span> <span class="keyword">void</span> onSizeReady(<span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> <span class="built_in">height</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        logV(<span class="string">"Got onSizeReady in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status != Status.WAITING_FOR_SIZE) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    status = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">width</span> = Math.<span class="built_in">round</span>(sizeMultiplier * <span class="built_in">width</span>);</span><br><span class="line">    <span class="built_in">height</span> = Math.<span class="built_in">round</span>(sizeMultiplier * <span class="built_in">height</span>);</span><br><span class="line"></span><br><span class="line">    ModelLoader &lt; A,</span><br><span class="line">    T &gt; modelLoader = loadProvider.getModelLoader();</span><br><span class="line">    <span class="keyword">final</span> DataFetcher &lt; T &gt; dataFetcher = modelLoader.getResourceFetcher(model, <span class="built_in">width</span>, <span class="built_in">height</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dataFetcher == <span class="keyword">null</span>) &#123;</span><br><span class="line">        onException(<span class="keyword">new</span> Exception(<span class="string">"Failed to load model: \'"</span> + model + <span class="string">"\'"</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ResourceTranscoder &lt; Z,</span><br><span class="line">    R &gt; transcoder = loadProvider.getTranscoder();</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        logV(<span class="string">"finished setup for calling load in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">    loadedFromMemoryCache = <span class="keyword">true</span>;</span><br><span class="line">    loadStatus = engine.load(signature, <span class="built_in">width</span>, <span class="built_in">height</span>, dataFetcher, loadProvider, transformation, transcoder, priority, isMemoryCacheable, diskCacheStrategy, <span class="keyword">this</span>);</span><br><span class="line">    loadedFromMemoryCache = resource != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        logV(<span class="string">"finished onSizeReady in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的是这一段<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadStatus = engine.load(signature, <span class="built_in">width</span>, <span class="built_in">height</span>, dataFetcher, loadProvider, transformation, transcoder, priority, isMemoryCacheable, diskCacheStrategy, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p><p>调用loadFromCache从内存加载，若返回值为空再次从活动的资源中加载，若再次为空查看jobs是否提交过任务，若没有提交则创建EngineRunnable，并将任务提交到engineJob中<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt; T,Z,R &gt; LoadStatus load(Key signature, <span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> <span class="built_in">height</span>, DataFetcher &lt; T &gt; fetcher, DataLoadProvider &lt; T, Z &gt; loadProvider, Transformation &lt; Z &gt; transformation, ResourceTranscoder &lt; Z, R &gt; transcoder, Priority priority, <span class="built_in">boolean</span> isMemoryCacheable, DiskCacheStrategy diskCacheStrategy, ResourceCallback cb) &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="keyword">long</span> startTime = LogTime.getLogTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> id = fetcher.getId();</span><br><span class="line">    EngineKey <span class="built_in">key</span> = keyFactory.buildKey(id, signature, <span class="built_in">width</span>, <span class="built_in">height</span>, loadProvider.getCacheDecoder(), loadProvider.getSourceDecoder(), transformation, loadProvider.getEncoder(), transcoder, loadProvider.getSourceEncoder());</span><br><span class="line"></span><br><span class="line">    EngineResource &lt; ?&gt;cached = loadFromCache(<span class="built_in">key</span>, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">        cb.onResourceReady(cached);</span><br><span class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">            logWithTimeAndKey(<span class="string">"Loaded resource from cache"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineResource &lt; ?&gt;active = loadFromActiveResources(<span class="built_in">key</span>, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</span><br><span class="line">        cb.onResourceReady(active);</span><br><span class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">            logWithTimeAndKey(<span class="string">"Loaded resource from active resources"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineJob current = jobs.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        current.addCallback(cb);</span><br><span class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">            logWithTimeAndKey(<span class="string">"Added to existing load"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineJob engineJob = engineJobFactory.build(<span class="built_in">key</span>, isMemoryCacheable);</span><br><span class="line">    DecodeJob &lt; T,Z, R &gt; decodeJob = <span class="keyword">new</span> DecodeJob &lt; T, Z,R &gt; (<span class="built_in">key</span>, <span class="built_in">width</span>, <span class="built_in">height</span>, fetcher, loadProvider, transformation, transcoder, diskCacheProvider, diskCacheStrategy, priority);</span><br><span class="line">    EngineRunnable runnable = <span class="keyword">new</span> EngineRunnable(engineJob, decodeJob, priority);</span><br><span class="line">    jobs.put(<span class="built_in">key</span>, engineJob);</span><br><span class="line">    engineJob.addCallback(cb);</span><br><span class="line">    engineJob.start(runnable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Started new load"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看一下EngineRunnable的run方法,对资源进行解码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Override </span><br><span class="line"><span class="keyword">public</span> void run() &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Exception</span> <span class="keyword">exception</span> = <span class="keyword">null</span>;</span><br><span class="line">    Resource &lt; <span class="meta">?&gt;</span>resource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resource = decode();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">            Log.v(TAG, <span class="string">"Exception decoding"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">exception</span> = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">        <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resource.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resource == <span class="keyword">null</span>) &#123;</span><br><span class="line">        onLoadFailed(<span class="keyword">exception</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onLoadComplete(resource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是从缓存中拿到还是从资源中拿到，应该在decodeFromCache指的是缓存，FromSource拉取资源。缓存是通过DiskLruCache进行获取的。继续跟到decodeFromSource中，最后到了decodeSource这个方法中</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private<span class="built_in"> Resource </span>&lt; ?&gt;decode() throws Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDecodingFromCache()) &#123;</span><br><span class="line">        return decodeFromCache();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        return decodeFromSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最主要的是fetcher的loadData方法，从注释上来看，fetcher是一个用于加载资源的接口，实现这个接口的类很多， 取一个最常用的  HttpUrlFetcher 试着去看看<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private<span class="built_in"> Resource </span>&lt; T &gt; decodeSource() throws Exception &#123;</span><br><span class="line">   <span class="built_in"> Resource </span>&lt; T &gt; decoded = <span class="literal">null</span>;</span><br><span class="line">    try &#123;</span><br><span class="line">        long startTime = LogTime.getLogTime();</span><br><span class="line">        final A data = fetcher.loadData(priority);</span><br><span class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">            logWithTimeAndKey(<span class="string">"Fetched data"</span>, startTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">            return <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        decoded = decodeFromSourceData(data);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        fetcher.cleanup();</span><br><span class="line">    &#125;</span><br><span class="line">    return decoded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-adbd02e4c29ed421.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>最后关注了一下loadDataWithRedirects中的联网请求</p><h3 id="HttpUrlFetcher-loadDataWithRedirects"><a href="#HttpUrlFetcher-loadDataWithRedirects" class="headerlink" title="HttpUrlFetcher ::loadDataWithRedirects"></a>HttpUrlFetcher ::loadDataWithRedirects</h3><p>在代码中使用了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![Paste_Image.png](http://upload-images.jianshu.io/upload_images/1285832-9a31dbab95f1bcf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">基本上glide的流程都走了一遍，但每个模块都没有深入的研究，有时间再去看看几个有疑问地方的代码实现。</span><br><span class="line">这里贴一张网络图片，记录一下glide的总体设计</span><br><span class="line"></span><br><span class="line">![Paste_Image.png](http://upload-images.jianshu.io/upload_images/1285832-3bf921b1d935acd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">### Glide 怎么加载的okhttp作为网络请求的 ？</span><br><span class="line">在一个app，为了保持网络请求的一致性，通常也会把Glide的数据加载换成与本来项目中的网络请求一致的框架，glide也支持这些，这是官方的文档 https://github.com/bumptech/glide/wiki/Integration-Libraries。</span><br><span class="line">比如我用的ide是android studio， 当我添加了这个依赖</span><br></pre></td></tr></table></figure></p><p>dependencies {<br>compile ‘com.github.bumptech.glide:okhttp-integration:1.4.0@aar’ //compile ‘com.squareup.okhttp:okhttp:2.2.0’<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle会自动在```AndroidManifest.xml```中添加一下这段标签，ant 或者 maven就得手动添加</span><br></pre></td></tr></table></figure></p><p><meta-data android:name="com.bumptech.glide.integration.okhttp.OkHttpGlideModule" android:value="GlideModule"><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Glide创建RequestManager时，RequestManager的构造方法会调用Glide的```get```方法。 这里读取了ManifestParser的标签，去找到```GlideModule```标签对应的```android:name</span><br></pre></td></tr></table></figure></meta-data></p><p>在代码指定的是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最后通过```ManifestParser::parseModule()```去创建一个GlideModule， 这里实现GlideModule接口的是OkHttpGlideModule</span><br><span class="line"></span><br><span class="line">在for循环中， 调用了applyOptions方法，但是什么都没干，最后调用了registerComponents方法，创建了一个OkHttpUrlLoader.Factory()， 去注册一个 GenericLoaderFactory loaderFactory。在上面看的源码中，看不太懂的modeloader()那里， 正好获得了这个OkHttpUrlLoader。</span><br></pre></td></tr></table></figure></p><p>public static Glide get(Context context) {<br>    if (glide == null) {<br>        synchronized(Glide.class) {<br>            if (glide == null) {<br>                Context applicationContext = context.getApplicationContext();<br>                List &lt; GlideModule &gt; modules = new ManifestParser(applicationContext).parse();</p><pre><code>            GlideBuilder builder = new GlideBuilder(applicationContext);            for (GlideModule module: modules) {                module.applyOptions(applicationContext, builder);            }            glide = builder.createGlide();            for (GlideModule module: modules) {                module.registerComponents(applicationContext, glide);            }        }    }}return glide;</code></pre><p>}</p><p>private static GlideModule parseModule(String className) {<br>    Class &lt; ?&gt;clazz;<br>    try {<br>        clazz = Class.forName(className);<br>    } catch(ClassNotFoundException e) {<br>        throw new IllegalArgumentException(“Unable to find GlideModule implementation”, e);<br>    }</p><pre><code>Object module;try {    module = clazz.newInstance();} catch(InstantiationException e) {    throw new RuntimeException(&quot;Unable to instantiate GlideModule implementation for &quot; + clazz, e);} catch(IllegalAccessException e) {    throw new RuntimeException(&quot;Unable to instantiate GlideModule implementation for &quot; + clazz, e);}if (! (module instanceof GlideModule)) {    throw new RuntimeException(&quot;Expected instanceof GlideModule, but found: &quot; + module);}return (GlideModule) module;</code></pre><p>}<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> &#123;</span><span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> applyOptions(Context context, GlideBuilder builder) &#123;</span><br><span class="line">        <span class="comment">// Do nothing.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> registerComponents(Context context, Glide glide) &#123;</span><br><span class="line">        glide.register(GlideUrl.<span class="keyword">class</span>, InputStream.<span class="keyword">class</span>, <span class="keyword">new</span> OkHttpUrlLoader.Factory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> &#123;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> applyOptions(Context context, GlideBuilder builder) &#123;</span><br><span class="line">        <span class="comment">// Do nothing.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> registerComponents(Context context, Glide glide) &#123;</span><br><span class="line">        glide.register(GlideUrl.<span class="keyword">class</span>, InputStream.<span class="keyword">class</span>, <span class="keyword">new</span> OkHttpUrlLoader.Factory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Glide-怎么实现对生命周期的处理"><a href="#Glide-怎么实现对生命周期的处理" class="headerlink" title="Glide 怎么实现对生命周期的处理?"></a>Glide 怎么实现对生命周期的处理?</h3><p>Glide 使用创建一个fragment的方式，监视了activity的生命周期。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager <span class="attr">fm</span> = getSupportFragmentManager();</span><br><span class="line">FeedFragment <span class="attr">current</span> = (FeedFragment) fm.findFragmentByTag(FRAGMENT_TAG);</span><br><span class="line"><span class="keyword">if</span> (<span class="attr">current</span> == <span class="literal">null</span>)&#123;    </span><br><span class="line">    <span class="attr">current</span> = new FeedFragment();   </span><br><span class="line">    fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以同步activity的生命周期</p><ul><li><h5 id="当启动一个应用"><a href="#当启动一个应用" class="headerlink" title="当启动一个应用"></a>当启动一个应用</h5><p>Activity onCreate:<br>Fragment onAttach:<br>Fragment onCreate:<br>Fragment onCreateView:<br>Fragment onActivityCreated<br>Fragment onStart:<br>Activity onStart:<br>Activity onResume:<br>Fragment onResume: </p></li><li><h5 id="按下home"><a href="#按下home" class="headerlink" title="按下home"></a>按下home</h5><p>Fragment onPause:<br>Activity onPause:<br>Fragment onStop:<br>Activity onStop: </p></li><li><h5 id="重新唤醒"><a href="#重新唤醒" class="headerlink" title="重新唤醒"></a>重新唤醒</h5><p>Fragment onStart:<br>Activity onStart:<br>Activity onResume:<br>Fragment onResume: </p></li><li><h5 id="退出应用"><a href="#退出应用" class="headerlink" title="退出应用"></a>退出应用</h5><p>Fragment onPause:<br>Activity onPause:<br>Fragment onStop:<br>Activity onStop:<br>Fragment onDestroyView:<br>Fragment onDestroy:<br>Fragment onDetach:<br>Activity onDestroy: </p></li></ul><h3 id="Glide怎么判断的图片大小？"><a href="#Glide怎么判断的图片大小？" class="headerlink" title="Glide怎么判断的图片大小？"></a>Glide怎么判断的图片大小？</h3><p>根据上面的流程，我定位到了<figure class="highlight plain"><figcaption><span>:: begin```方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里先对宽高，进行判断，若不合法，走target的getSize， getSize也会对宽高判断，失败了就会抛出异常（throw new IllegalArgumentException(&quot;You cannot set the tag id more than once or change&quot;    + &quot; the tag id after the first request has been made&quot;);）我准备沿着代码逻辑向前走，看看是哪里来的overrideWidth。</span><br></pre></td></tr></table></figure></p><p>@Override<br>public void begin() {<br>    startTime = LogTime.getLogTime();<br>    if (model == null) {<br>        onException(null);<br>        return;<br>    }</p><pre><code>status = Status.WAITING_FOR_SIZE;if (Util.isValidDimensions(overrideWidth, overrideHeight)) {    onSizeReady(overrideWidth, overrideHeight);} else {    target.getSize(this);}if (!isComplete() &amp;&amp; !isFailed() &amp;&amp; canNotifyStatusChanged()) {    target.onLoadStarted(getPlaceholderDrawable());}if (Log.isLoggable(TAG, Log.VERBOSE)) {    logV(&quot;finished run method in &quot; + LogTime.getElapsedMillis(startTime));}</code></pre><p>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在```GenericRequestBuilder```中对宽和高进行初始化，初始化的值是<span class="number">-1</span>，发现以下这些类都调用了对宽高进行了赋值，这些类都是GenericRequestBuilder的子类，都会调用```GenericRequestBuilder :: override()</span><br></pre></td></tr></table></figure></p><p>方法<br><img src="http://upload-images.jianshu.io/upload_images/1285832-e58c54822a3b4ad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>在<figure class="highlight plain"><figcaption><span>:: loadGeneric```创建了DrawableTypeRequest， DrawableTypeRequest是DrawableRequestBuilder的子类， DrawableRequestBuilder这个继续调用父类的构造。最后找到```Glide :: 的buildImageViewTarget```到```ImageViewTargetFactory :: buildTarget```拿</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DrawableImageViewTarget分析，一直跟到ViewTarget的构造， 这里创建了一个```SizeDeterminer```，最上面的代码```target.getSize(this);```实际上调用了就是这个SizeDeterminer的getSize.看了一圈， 又回到了GenericRequest类；</span><br><span class="line">所以，在GenericRequest的begin中，当指定了override时， 直接调用onSizeReady；没有则调用了target（target理解成view就好）getSize，看当前的view是否已经有宽高了，若没有则去监听view的宽高，再去调用onSizeReady</span><br><span class="line">#### ViewTarget :: getSize</span><br></pre></td></tr></table></figure></p><p>public void getSize(SizeReadyCallback cb) {<br>    int currentWidth = getViewWidthOrParam();<br>    int currentHeight = getViewHeightOrParam();<br>    if (isSizeValid(currentWidth) &amp;&amp; isSizeValid(currentHeight)) {<br>        cb.onSizeReady(currentWidth, currentHeight);<br>    } else {<br>        // We want to notify callbacks in the order they were added and we only expect one or two callbacks to<br>        // be added a time, so a List is a reasonable choice.<br>        if (!cbs.contains(cb)) {<br>            cbs.add(cb);<br>        }<br>        if (layoutListener == null) {<br>            final ViewTreeObserver observer = view.getViewTreeObserver();<br>            layoutListener = new SizeDeterminerLayoutListener(this);<br>            observer.addOnPreDrawListener(layoutListener);<br>        }<br>    }<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Glide 设置缩略图之后回莫名其妙的‘闪’一下</span><br><span class="line"></span><br><span class="line">在加载一个列表页的时候，通常会添加一个占位图，并设置crossfade这个属性，能让显示更加平稳，显示效果也比较好看。但出现一个问题。图片加载的时候， 图片不仅仅回做透明度的变化，并且大小也改变了， 显示效果页比较难看。</span><br><span class="line"></span><br><span class="line">#### GlideDrawableImageViewTarget::onResourceReady</span><br><span class="line"></span><br><span class="line">最终图片加载会走到这里，中间一堆注释先不看（看不懂）</span><br><span class="line"></span><br><span class="line">![](http:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-1f376f1dbff2f716.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line">看一下父类的onResourceReady方法</span><br><span class="line"></span><br><span class="line">![](http:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-b1a39dd8c2eec382.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![Paste_Image.png](http:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-1cf21ad3cea9bcbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line">能看到这里new 了一个TransitionDrawwable， 这个drawable正式能显示渐变动画的drawable</span><br><span class="line"></span><br><span class="line">![](http:<span class="comment">//upload-images.jianshu.io/upload_images/1285832-c32625d6b0f13eb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line">getCurrentDrawable 是view当前的drawale</span><br><span class="line"></span><br><span class="line">再看下  ```#### GenericRequest::begin()</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c0422e3ba3f8ae3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>当未完成未失败的情况下，加载了placeholder，这时候view显示的占位图试placeholder， currentDrawable却是占位图的， 但进行动画之后glide回按照imageview的宽高裁剪图片，这样一来，必然会出现闪一下的这种情况了</p><h3 id="Glide本地缓存是什么样的？"><a href="#Glide本地缓存是什么样的？" class="headerlink" title="Glide本地缓存是什么样的？"></a>Glide本地缓存是什么样的？</h3>]]></content>
      
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android -- 知乎客户端淡入淡出的Banner的一种实现</title>
      <link href="/2016/11/28/Android-%E7%9F%A5%E4%B9%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA%E7%9A%84Banner%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/"/>
      <url>/2016/11/28/Android-%E7%9F%A5%E4%B9%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA%E7%9A%84Banner%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="新版知乎客户端发现页面上有一个淡入淡出的banner"><a href="#新版知乎客户端发现页面上有一个淡入淡出的banner" class="headerlink" title="新版知乎客户端发现页面上有一个淡入淡出的banner"></a>新版知乎客户端发现页面上有一个淡入淡出的banner</h4><p>最初的想法就是拿viewpager实现，重写protected void onPageScrolled(int position, float offset, int offsetPixels)方法，但是应该我得拿到所有page，去改变两个page的不同状态。转念一想，ViewPager有一个PageTransformer，不如拿这个去实现</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-8e8b569c05acee22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20161128125301.png"></p><p>position返回的是front-and-center，可以理解为0是中心0~1是右边的page；-1~0是左边的page</p><p>大概的代码会是<br>左边的page得叠加他的位置，让他看起来会向左移动， 右边的page应该先移动到位，然后阻止他的移动，最后改变两个page的透明度。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int pageWidth = <span class="built_in">view</span>.getWidth();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">position</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">position</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">view</span>.setTranslationX( - pageWidth * <span class="built_in">position</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">view</span>.setTranslationX(pageWidth);</span><br><span class="line">        <span class="built_in">view</span>.setTranslationX( - pageWidth * <span class="built_in">position</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">float</span> alpha = Math.<span class="built_in">max</span>(<span class="number">0</span>, <span class="number">1</span> - Math.<span class="built_in">abs</span>(<span class="built_in">position</span>));</span><br><span class="line">    <span class="built_in">view</span>.setAlpha(alpha);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">view</span>.setAlpha(<span class="number">0f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就完成了viewpager的淡入淡出，感觉比重写onPageScrolled方便</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- Fresco、Glide、Picasso的比较</title>
      <link href="/2016/11/15/Android-Fresco%E3%80%81Glide%E3%80%81Picasso%E7%9A%84%E6%AF%94%E8%BE%83/"/>
      <url>/2016/11/15/Android-Fresco%E3%80%81Glide%E3%80%81Picasso%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>昨天去面试，谈到了几个图片加载框架。Fresco；Glide；Picasso<br>面试官问起了那个框架更好一点，我说Glide吧，并说了几个在之前项目中实际应用的例子，和glide的一些原理。阐述了一下我的观点。<br>回到家总觉得是没有完全的阐述好我的观点，也是因为我没看过Fresco和Picasso的源码，只留心过glide的原理。因为水平有限，分析三个框架的源码不太现实，我觉得还是要拿出数据来证明（碰巧最近待业在家）。</p><p>加载资源：<br>每一种框架都分别尝试了2种图片<br>第一张图是501x428、找了一个平时项目中较平均的分辨率吧<br><a href="http://www.youxiping.com/data/attachment/portal/201509/11/144756yp966fkf07173v4z.jpg" target="_blank" rel="noopener">http://www.youxiping.com/data/attachment/portal/201509/11/144756yp966fkf07173v4z.jpg</a><br>第二张图是1440*2560、整一个大一点的图片加载试试看吧<br><a href="http://bizhi.cnanzhi.com/upload/bizhi/2014/1202/14175104904742.jpg" target="_blank" rel="noopener">http://bizhi.cnanzhi.com/upload/bizhi/2014/1202/14175104904742.jpg</a></p><h3 id="1、先说Fresco"><a href="#1、先说Fresco" class="headerlink" title="1、先说Fresco"></a>1、先说Fresco</h3><p>配置按照官方的教程，姑且称之为0配置吧：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;<span class="meta">@Override</span> public void onCreate() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="type">Fresco</span>.initialize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;com<span class="selector-class">.facebook</span><span class="selector-class">.drawee</span><span class="selector-class">.view</span><span class="selector-class">.SimpleDraweeView</span></span><br><span class="line">    android:layout_centerInParent=<span class="string">"true"</span></span><br><span class="line">    android:id=<span class="string">"@+id/my_image_view"</span></span><br><span class="line">    android:layout_width=<span class="string">"130dp"</span></span><br><span class="line">    android:layout_height=<span class="string">"130dp"</span></span><br><span class="line">    /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageView.setImageURI(<span class="string">"xxxx"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这是加载图片的例子<br>加载第一张图片时看一下内存的使用率</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-a293cd203d8665c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>比较大分辨率的图片</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-446b23a2bbc8a8a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h3 id="2、Glide"><a href="#2、Glide" class="headerlink" title="2、Glide"></a>2、Glide</h3><p>glide 的使用相对来说更为简单<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span></span><br><span class="line"><span class="selector-class">.with</span>(this)</span><br><span class="line"><span class="selector-class">.load</span>(<span class="string">"http://www.youxiping.com/data/attachment/portal/201509/11/144756yp966fkf07173v4z.jpg"</span>)</span><br><span class="line"><span class="selector-class">.into</span>(imageView);</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-a504f70899a98051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-60a00870fbdbceeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h3 id="3、Picasso"><a href="#3、Picasso" class="headerlink" title="3、Picasso"></a>3、Picasso</h3><p>就使用上来讲，Picasso和Glide差别很小了<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Picasso</span></span><br><span class="line"><span class="selector-class">.with</span>(this)</span><br><span class="line"><span class="selector-class">.load</span>(<span class="string">"http://www.youxiping.com/data/attachment/portal/201509/11/144756yp966fkf07173v4z.jpg"</span>)</span><br><span class="line"><span class="selector-class">.into</span>(imageView);</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-fd848b20ff195071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1285832-b3e2953866c9065e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h3 id="3、最后看下依赖包大小"><a href="#3、最后看下依赖包大小" class="headerlink" title="3、最后看下依赖包大小"></a>3、最后看下依赖包大小</h3><p><img src="http://upload-images.jianshu.io/upload_images/1285832-f93912fe7a5dfee9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-467fdcaf90b2511c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-7f9007b39b2a0f55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- 修改状态栏文字颜色</title>
      <link href="/2016/06/17/Android-%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2/"/>
      <url>/2016/06/17/Android-%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.<span class="keyword">VERSION</span>.SDK_INT &gt;= Build.VERSION_CODES.<span class="keyword">M</span>)</span><br><span class="line">&#123;   </span><br><span class="line"> <span class="keyword">Window</span> <span class="keyword">window</span> = getWindow();</span><br><span class="line"> <span class="keyword">window</span>.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);   </span><br><span class="line"> <span class="keyword">window</span>.setStatusBarColor(getResources().getColor(R.color.black));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有人会说， tmd逗人玩呢，这不是设置背景色么？大兄弟，先别急往下看，这个属性 android:windowLightStatusBar。<br>true 为浅色 ，字体就是深色</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- RxAndroid and Retrofit 2.0学习笔记</title>
      <link href="/2016/04/08/Android-RxAndroid-and-Retrofit-2-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/04/08/Android-RxAndroid-and-Retrofit-2-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="RxAndroid-and-Retrofit-2-0"><a href="#RxAndroid-and-Retrofit-2-0" class="headerlink" title="RxAndroid and Retrofit 2.0"></a>RxAndroid and Retrofit 2.0</h1><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>关于Rx的学习我参考了这篇博客，是我在网上看到的博客中写的比较全的<br><a href="http://blog.csdn.net/meegomeego/article/details/49155989/" target="_blank" rel="noopener">http://blog.csdn.net/meegomeego/article/details/49155989/</a></p><p>Retrofit 2.0还是测试版， 主要是‘领导’说Retrofit 比okHttp 和 Volley要好，今天弄了下，例子是照retrofit官网敲的。<br><a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">http://square.github.io/retrofit/</a></p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>设计还在弄设计图，闲的没什么事，翻译一下retrofit的官网吧</p><h1 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h1><p>A type-safe <strong>HTTP client</strong> for Android and Java（蛋疼，这句怎么翻译）</p><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>Retrofit让你的http api 变成java接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface GitHubService &#123; </span><br><span class="line">  @GET(&quot;users/&#123;user&#125;/repos&quot;)</span><br><span class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Retrofit会生成一个GitHubService接口的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder() </span><br><span class="line">.baseUrl(&quot;https://api.github.com/&quot;) </span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">GitHubService service = retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure></p><p>每一个GitHubService的回调，都会make一个同步或者异步的http请求到远程的webserver<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(&quot;octocat&quot;);</span><br></pre></td></tr></table></figure></p><p>使用注解去描述http请求</p><ul><li>url参数支持替换和查询</li><li>对象转换到请求体</li><li>复合的请求体和文件上传</li></ul><h4 id="API-Declaration"><a href="#API-Declaration" class="headerlink" title="API Declaration"></a>API Declaration</h4><p>注解的方法和他的参数怎样处理一个请求</p><h5 id="REQUEST-METHOD"><a href="#REQUEST-METHOD" class="headerlink" title="REQUEST METHOD"></a>REQUEST METHOD</h5><p>每一个方法必须有一个http的注解，他提供了一个请求的方法和一个相对的url。一共有5中注解GET, POST, PUT, DELETE, and HEAD。资源的相对url在注解中规定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;users/list&quot;)</span><br></pre></td></tr></table></figure></p><p>还可以指定url的查询参数<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;users/list?sort=desc&quot;)</span><br></pre></td></tr></table></figure></p><h4 id="URL-MANIPULATION"><a href="#URL-MANIPULATION" class="headerlink" title="URL MANIPULATION"></a>URL MANIPULATION</h4><p>一个请求的url中的参数和blocks可以被动态的替换，这个blocks要被{}包围。这个参数要使用@Path注解，并且使用同一个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</span><br><span class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId);</span><br></pre></td></tr></table></figure></p><p>查寻参数也可以被添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</span><br><span class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId, @Query(&quot;sort&quot;) String sort);</span><br></pre></td></tr></table></figure></p><p>对于相对复杂的查询参数也可以使用map<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</span><br><span class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId, @QueryMap Map&lt;String, String&gt; options);</span><br></pre></td></tr></table></figure></p><h4 id="REQUEST-BODY"><a href="#REQUEST-BODY" class="headerlink" title="REQUEST BODY"></a>REQUEST BODY</h4><p>使用@Body注解可以指定一个对象作为HTTP请求体。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@POST(&quot;users/new&quot;)</span><br><span class="line">Call&lt;User&gt; createUser(@Body User user);</span><br></pre></td></tr></table></figure></p><p>这个对象也可以使用一个Retrofit的实例指定的一个转换器转换，如果没有添加这个转换器，就会使用RequestBody（没看懂）</p><h4 id="FORM-ENCODED-AND-MULTIPART"><a href="#FORM-ENCODED-AND-MULTIPART" class="headerlink" title="FORM ENCODED AND MULTIPART"></a>FORM ENCODED AND MULTIPART</h4><p>方法也可以用来生命发送表单编码和符合数据<br>表单编码的数据发送当@FormUrlEncoded存在的方法。每个键-值对注释@Field包含名称和对象提供的价值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@FormUrlEncoded</span><br><span class="line">@POST(&quot;user/edit&quot;)</span><br><span class="line">Call&lt;User&gt; updateUser(@Field(&quot;first_name&quot;) String first, @Field(&quot;last_name&quot;) String last);</span><br></pre></td></tr></table></figure></p><p>多部分请求时使用@Multipart存在的方法。部分使用@Part注释声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Multipart</span><br><span class="line">@PUT(&quot;user/photo&quot;)</span><br><span class="line">Call&lt;User&gt; updateUser(@Part(&quot;photo&quot;) RequestBody photo, @Part(&quot;description&quot;)</span><br><span class="line">RequestBody description);</span><br></pre></td></tr></table></figure></p><p>部分部件采用改造的转换器，也可以实现RequestBody处理自己的序列化。</p><h4 id="HEADER-MANIPULATION"><a href="#HEADER-MANIPULATION" class="headerlink" title="HEADER MANIPULATION"></a>HEADER MANIPULATION</h4><p>可以使用@Headers注释的方法设置静态头。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Headers(&quot;Cache-Control: max-age=640000&quot;)</span><br><span class="line">@GET(&quot;widget/list&quot;)</span><br><span class="line">Call&lt;List&lt;Widget&gt;&gt; widgetList();</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Headers(&#123; &quot;Accept: application/vnd.github.v3.full+json&quot;, &quot;User-Agent: Retrofit-Sample-App&quot;&#125;)</span><br><span class="line">@GET(&quot;users/&#123;username&#125;&quot;)</span><br><span class="line">Call&lt;User&gt; getUser(@Path(&quot;username&quot;) String username);</span><br></pre></td></tr></table></figure><p>注意,头不会互相覆盖。具有相同名称的所有头文件都包括在请求</p><h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4><p>后面的说的就不往上粘了，因为我也看不懂</p><p>在运行例子的时候遇见了一些问题，当时看了一些其他的博客，GitHubService 是作为参数回掉的，返回值是空，运行的过程提示GitHubService 的返回值不能使空了， 不知道是不是2.0和之前的差别<br>接下来就是在Rx中使用Retrofit了</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>按照官网的做法<br>创建了一个GitHubService，这个接口简单的写了两个方法，第一个方法在RX中使用了Retrofit，要注意的就是每个请求前面都是/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface GitHubService</span><br><span class="line"> &#123;</span><br><span class="line">    @GET(&quot;/&#123;users&#125;/mobilesiri&quot;)</span><br><span class="line">    Observable&lt;Repo&gt; getUser(@Path(&quot;users&quot;) String user);</span><br><span class="line"></span><br><span class="line">    @GET(&quot;/users/mobilesiri&quot;)</span><br><span class="line">    Call&lt;Repo&gt; getUser2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里没使用官网上给的api接口，用的是<a href="https://api.github.com/users/mobilesiri" target="_blank" rel="noopener">https://api.github.com/users/mobilesiri</a><br>官网上面的数据太多了，然后用JsonFromat生成了一个bean 叫 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">接着就是主要的内容了</span><br><span class="line">baseUrl是请求的通用的部分，这里设定的就是</span><br></pre></td></tr></table></figure></p><p>private static final String URI = “<a href="https://api.github.com&quot;" target="_blank" rel="noopener">https://api.github.com&quot;</a>;<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addConverterFactory 这个是设置用Gson转换，也可以自定义， 但自定义这个后面再说吧</span><br><span class="line">addCallAdapterFactory 这个在Rx中使用的话要添加</span><br><span class="line">还有提个坑就是这个依赖，一定要对应，版本不对，网又不好，在这弄了半天</span><br><span class="line">```gradle</span><br><span class="line">compile <span class="string">'com.squareup.retrofit:retrofit:2.0.0-beta2'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit:converter-gson:2.0.0-beta2'</span></span><br></pre></td></tr></table></figure></p><p>Rx也跟最新的版本就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">.baseUrl(URI)</span><br><span class="line">.addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GitHubService gitHubService = retrofit.create(GitHubService.class);</span><br><span class="line">Call&lt;Repo&gt; repos2 = gitHubService.getUser2();</span><br><span class="line"></span><br><span class="line">repos2.enqueue(<span class="keyword">new</span> Callback&lt;Repo&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> onResponse(Response&lt;Repo&gt; response,</span><br><span class="line">                    Retrofit retrofit) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>以上是没有用Rx的代码<br>下面就是在Rx中使用Retrofit的代码了，完成一次网络请求，从实现上来说还是很简单的<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gitHubService</span><span class="selector-class">.getUser</span>(<span class="string">"users"</span>)<span class="selector-class">.subscribeOn</span>(Schedulers.io())</span><br><span class="line">             <span class="selector-class">.observeOn</span>(AndroidSchedulers.mainThread())</span><br><span class="line">             <span class="selector-class">.subscribe</span>(new Action1&lt;Repo&gt;() &#123;</span><br><span class="line">                  <span class="variable">@Override</span></span><br><span class="line">                  public void call(Repo repo) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></p><p>subscribeOn 指定的是observe运行线程；observeOn是subscribe的运行线程，呃……<br>当然subscribe中new 一个 Subscriber去实现<figure class="highlight plain"><figcaption><span>```onError``` ```onNext```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">以上就是在Rx中使用Retrofit做网络请求的基本方法了</span><br><span class="line"></span><br><span class="line">——————————————————————————————--</span><br><span class="line"> # RxAndroid</span><br><span class="line"> ##### Observable （被观察者）</span><br><span class="line">##### Subscribers （订阅者）</span><br><span class="line">Observable 我理解成了事件的发送者，Subscribers为事件的处理，这样方便理解吧……默背十遍，记住这两个概念，省得记混。</span><br><span class="line">下面就照网上的教程敲一个小例子吧！！！</span><br><span class="line">### 一、尝试</span><br><span class="line">* 导入rx所需要的包</span><br><span class="line">```android</span><br><span class="line">compile &apos;io.reactivex:rxandroid:1.2.1&apos;</span><br><span class="line">compile &apos;io.reactivex:rxjava:1.1.6&apos;</span><br></pre></td></tr></table></figure></p><ul><li>大概的思路是创建一个消息的发送者和接收者，然后将他们链接起来，和大象一样，也是分三步：<br>第一个例子啥也不说了，直接上代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tiny.rxandrioddemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"><span class="keyword">import</span> rx.Subscriber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> Observable&lt;String&gt; mObservable;</span><br><span class="line">    <span class="keyword">private</span> Subscriber&lt;String&gt; mSubscriber;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        createObservable();</span><br><span class="line">        createSubscriber();</span><br><span class="line">        bindEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mObservable.subscribe(mSubscriber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createSubscriber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mSubscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"onNext: "</span> + s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createObservable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mObservable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;?<span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                        subscriber.onNext(<span class="string">"haha"</span>);</span><br><span class="line">                        subscriber.onCompleted();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、继续尝试"><a href="#二、继续尝试" class="headerlink" title="二、继续尝试"></a>二、继续尝试</h3><p>看到了rx中有from just ……这些东西， 看看这个是干嘛的吧， 之后一顿百度：<br>rx提供了一些快捷创建事件队列的方式，就上上面一行中提到的just和from了</p><ul><li>just(T…): 将传入的参数依次发送出来。</li><li>from(T[])/ from(Iterable&lt;? extends T&gt;): 将传入的数组或 Iterable拆分成具体对象后，依次发送出来。<br>依然还是先上代码了，上面的方法简化成下边这样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private void createObservable() &#123;</span><br><span class="line">    mObservable = Observable.just(&quot;ha1&quot;, &quot;ha2&quot;, &quot;ha3&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>程序调用了三次doNext 一次 onComleted<br><img src="http://upload-images.jianshu.io/upload_images/1285832-1c12f1c35d7054d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>再将上面的代码改成这样, 也是ok的<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createObservable</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">List&lt;String&gt; eventList = <span class="keyword">new</span> ArrayList&lt;&gt;();    </span><br><span class="line">eventList.<span class="keyword">add</span>(<span class="string">"haha1"</span>); </span><br><span class="line">eventList.<span class="keyword">add</span>(<span class="string">"haha2"</span>);    </span><br><span class="line">eventList.<span class="keyword">add</span>(<span class="string">"haha3"</span>);   </span><br><span class="line">mObservable = Observable.<span class="keyword">from</span>(eventList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三、呃……还是尝试"><a href="#三、呃……还是尝试" class="headerlink" title="三、呃……还是尝试"></a>三、呃……还是尝试</h3><p>和上面一样，事件的发送者简化了，那么还想简化一下事件的处理，之后发现了actionx 这个方法，那么就改一下createSubscriber()<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="literal">void</span> createSubscriber()&#123;</span><br><span class="line">    mSubscriberAction = <span class="literal">new</span> Action1&lt;<span class="built_in">String</span>&gt;()&#123; </span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">String</span> s)&#123;</span><br><span class="line">            <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">"call: "</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是输出结果</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-77e240dc8ab5101a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h3 id="三、迷之变幻"><a href="#三、迷之变幻" class="headerlink" title="三、迷之变幻"></a>三、迷之变幻</h3><ul><li>map(): 事件对象的直接变换，可以将一个对象转变成另一个对象。它是 RxJava 最常用的变换</li><li>flatMap()：这个事件比较复杂，就举个网上的例子来说明吧<br>参考了博客<a href="http://blog.csdn.net/daditao/article/details/50606228" target="_blank" rel="noopener">http://blog.csdn.net/daditao/article/details/50606228</a><br>首先假设这么一种需求：假设有一个<a href="http://lib.csdn.net/base/datastructure" target="_blank" rel="noopener">数据结构</a>『学生』，现在需要打印出一组学生的名字。实现方式很简单：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1285832-10d3d6caafcf99e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>很简单。那么再假设：如果要打印出每个学生所需要修的所有课程的名称呢？（需求的区别在于，每个学生只有一个名字，但却有多个课程。）首先可以这样实现：</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-4dbef7bcf0d76aa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>我哟啊是不想用for循环来输出也可以这么写</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-7ce8b379720d41c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>这样就简单了<br>具体详细的可以看上面链接中的博客，就比较全面了</p><ul><li>Funcx：在变换中，使用了Funcx这个方法，这个方法同Actionx一样理解，但是Funcx一些列的方法是带有返回值的</li></ul><h3 id="四、线程切换"><a href="#四、线程切换" class="headerlink" title="四、线程切换"></a>四、线程切换</h3><p>写代码测试之后，发现RxAndroid 中可以使用observeOn 方法来切换线程，但是还没有摸清subscribeOn方法是干什么用的。<br>之前以为observeOn是设置Observable的运行线程；而subscribeOn是规定了subscribe的线程</p><h5 id="总结-初学到这了，基本上可以拿Rxandroid写一个例子，在写例子的时候在慢慢学习Rx吧"><a href="#总结-初学到这了，基本上可以拿Rxandroid写一个例子，在写例子的时候在慢慢学习Rx吧" class="headerlink" title="总结:初学到这了，基本上可以拿Rxandroid写一个例子，在写例子的时候在慢慢学习Rx吧"></a>总结:初学到这了，基本上可以拿Rxandroid写一个例子，在写例子的时候在慢慢学习Rx吧</h5><h1 id="大概一个月之前看了看Retrofit进行网络接口，-这把手里的这个应用的网络层改成Retrofit，但是公司的应用，请求的时候都要改header和post，弄了一下，随后就又开始加班了（艹）。之前打的都快忘了，还是趁着空闲的时间先记下来吧。"><a href="#大概一个月之前看了看Retrofit进行网络接口，-这把手里的这个应用的网络层改成Retrofit，但是公司的应用，请求的时候都要改header和post，弄了一下，随后就又开始加班了（艹）。之前打的都快忘了，还是趁着空闲的时间先记下来吧。" class="headerlink" title="大概一个月之前看了看Retrofit进行网络接口， 这把手里的这个应用的网络层改成Retrofit，但是公司的应用，请求的时候都要改header和post，弄了一下，随后就又开始加班了（艹）。之前打的都快忘了，还是趁着空闲的时间先记下来吧。"></a>大概一个月之前看了看Retrofit进行网络接口， 这把手里的这个应用的网络层改成Retrofit，但是公司的应用，请求的时候都要改header和post，弄了一下，随后就又开始加班了（艹）。之前打的都快忘了，还是趁着空闲的时间先记下来吧。</h1><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tiny.rxandrioddemo.mkmy.net.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.FormBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Interceptor;</span><br><span class="line"><span class="keyword">import</span> okhttp3.MediaType;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> retrofit2.CallAdapter;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Converter;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Retrofit;</span><br><span class="line"><span class="keyword">import</span> retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;</span><br><span class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</span><br><span class="line"><span class="keyword">import</span> tiny.rxandrioddemo.App;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitUtil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">String</span> TAG = <span class="string">"RetrofitUtil"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final Converter.Factory gsonConverterFactory = GsonConverterFactory.create();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final CallAdapter.Factory rxJavaCallAdapterFactory = RxJavaCallAdapterFactory.create();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final MediaType JSON</span><br><span class="line">            = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Retrofit getRetrofit(<span class="keyword">String</span> baseUrl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Retrofit</span>.Builder()</span><br><span class="line">                .client(okHttpClientConfig())</span><br><span class="line">                .baseUrl(baseUrl)</span><br><span class="line">                .addConverterFactory(gsonConverterFactory)</span><br><span class="line">                .addCallAdapterFactory(rxJavaCallAdapterFactory)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient okHttpClientConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">OkHttpClient</span>.Builder()</span><br><span class="line">                .addInterceptor(<span class="keyword">new</span> <span class="type">LogInterceptor</span>())</span><br><span class="line">                .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void cancel()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInterceptor</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Interceptor</span></span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> okhttp3.Response intercept(Chain chain) throws IOException</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Request originalRequest = chain.request();</span><br><span class="line"></span><br><span class="line">            Request.Builder originalRequestBuilder = chain.request().<span class="keyword">new</span><span class="type">Builder</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//  headers</span></span><br><span class="line">            <span class="keyword">String</span> userAgent = System.getProperty(<span class="string">"http.agent"</span>);</span><br><span class="line">            userAgent = App.getInstance().getChannelName() +</span><br><span class="line">                    <span class="string">"/"</span> + App.getInstance().getVersionName()</span><br><span class="line">                    + <span class="string">" "</span> + userAgent;</span><br><span class="line">            Log.d(TAG, <span class="string">"intercept userAgent : "</span> + userAgent);</span><br><span class="line">            originalRequestBuilder.addHeader(<span class="string">"User-Agent"</span>, userAgent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">String</span> session = App.getInstance().getSp(<span class="string">"PHPSESSID"</span>);</span><br><span class="line">            Log.d(TAG, <span class="string">"intercept session : "</span> + session);</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(session))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//originalRequestBuilder.addHeader("Cookie", "PHPSESSID=ndi4uke0r1thf9m1taimv078u3");</span></span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(TAG, <span class="string">"intercept body: "</span> + (originalRequest.body() instanceof FormBody));</span><br><span class="line">            <span class="keyword">if</span> (originalRequest.body() instanceof FormBody)</span><br><span class="line">            &#123;</span><br><span class="line">                FormBody originalBody = (FormBody) originalRequest.body();</span><br><span class="line">                FormBody.Builder <span class="keyword">new</span><span class="type">FormBody</span> = <span class="keyword">new</span> <span class="type">FormBody</span>.Builder();</span><br><span class="line"></span><br><span class="line">                Log.d(TAG, <span class="string">"intercept POST sizer: "</span> + originalBody.size());</span><br><span class="line">                <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; originalBody.size(); i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"intercept fied: "</span> + originalBody.encodedName(i));</span><br><span class="line">                    <span class="keyword">if</span> (!originalBody.encodedName(i).equals(<span class="string">"nu"</span>))</span><br><span class="line">                        <span class="keyword">new</span><span class="type">FormBody</span>.addEncoded(originalBody.encodedName(i), originalBody.encodedValue(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">String</span>[] values = App.getInstance().getNetInfo();</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(values[<span class="number">0</span>]) &amp;&amp; !TextUtils.isEmpty(values[<span class="number">1</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span><span class="type">FormBody</span>.add(<span class="string">"sig"</span>, values[<span class="number">0</span>]);</span><br><span class="line">                    Log.d(TAG, <span class="string">"intercept sig: "</span> + values[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">new</span><span class="type">FormBody</span>.add(<span class="string">"timestamp"</span>, values[<span class="number">1</span>]);</span><br><span class="line">                    Log.d(TAG, <span class="string">"intercept timestamp: "</span> + values[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                originalRequestBuilder.method(originalRequest.method(), <span class="keyword">new</span><span class="type">FormBody</span>.build());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Request req = originalRequestBuilder.build();</span><br><span class="line">            Log.d(TAG, <span class="string">"intercept: x: "</span> + req.headers().toString());</span><br><span class="line">            Log.d(TAG, <span class="string">"intercept: method: "</span> + req.method());</span><br><span class="line">            Log.d(TAG, <span class="string">"intercept: url: "</span> + req.url());</span><br><span class="line">            Log.d(TAG, <span class="string">"intercept: body: "</span> + req.body());</span><br><span class="line"></span><br><span class="line">            okhttp3.Response response = chain.proceed(req);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (response.body() != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">String</span> mHeader = response.headers().toString();</span><br><span class="line">                    Log.i(TAG, <span class="string">"intercept: header1: "</span> + mHeader);</span><br><span class="line">                    Pattern pattern = Pattern.compile(<span class="string">"Set-Cookie.*?;"</span>);</span><br><span class="line">                    Matcher m = pattern.matcher(mHeader);</span><br><span class="line">                    <span class="keyword">String</span> cookieFromResponse = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">if</span> (m.find())</span><br><span class="line">                    &#123;</span><br><span class="line">                        cookieFromResponse = m.group();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Log.i(TAG, <span class="string">"intercept: header2: "</span> + cookieFromResponse);</span><br><span class="line">                    <span class="comment">// 去掉cookie末尾的分号</span></span><br><span class="line">                    <span class="comment">// cookieFromResponse = cookieFromResponse.substring(11, cookieFromResponse.length() - 1);</span></span><br><span class="line">                    App.getInstance().setSp(<span class="string">"PHPSESSID"</span>, cookieFromResponse);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android -- 应用差量更新</title>
      <link href="/2016/01/20/Android-%E5%BA%94%E7%94%A8%E5%B7%AE%E9%87%8F%E6%9B%B4%E6%96%B0/"/>
      <url>/2016/01/20/Android-%E5%BA%94%E7%94%A8%E5%B7%AE%E9%87%8F%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>#android增量更新<br>android 4.1开始 google引入了应用程序的增量更新。增量更新的原理实际上是使用服务器最新的apk进行对比，并得到罪行的差分包，当应用程序需要更新是，下载差分包就好了，通过它和现在本机上的版本形成一个新的apk</p><p>#服务端形成差分包<br>拆分包可以在服务端生成，用的是在网上找的一个例子<br>SmartAppUpdates-master<br>当然，我没有编译java服务端的例子，又在网上找了某个大神打包好的项目，直接在本地就直接能打包好apk的拆分</p><p>这是关于拆分的详细介绍，我就是在这篇博客上学习怎么增量更新的<br><a href="https://github.com/cundong/SmartAppUpdates" target="_blank" rel="noopener">https://github.com/cundong/SmartAppUpdates</a></p><p>这里有一个实验包， 使用它就可以在windows中直接完成拆分<br><a href="http://download.csdn.net/detail/hmg25/4676737" target="_blank" rel="noopener">http://download.csdn.net/detail/hmg25/4676737</a></p><p>我今天做个记录吧， 省得以后用到之后又忘了，我水平不行，先会用就行了</p><p>#实现<br>首先我下载了SmartAppUpdates项目，项目是使用eclipse编的， 直接运行这个没什么意思，最近一直再用android studio，所以现在studio 上编一下。<br>jni的代码不是很多，其中用到了一个库叫 bzip2，但是在编译的时候遇到了一个问题， 这里记录一下吧，等之后找一下答案。<br>我在android studio上搭建了一个ndk项目， 我先试着自己写一个c函数，这个是可以编译过的，也返回了正确的结果，但是例子上的代码（图中）就仅仅是调用了applypatch，在编译的时候android studio提示各种的</p><pre><code>multiple definition of `xxxxxx&apos;</code></pre><p>我后来又在eclipse下重新编译了项目，是可以生成so文件的，查了一会没有结果也就放弃了，直接就用github上提供so库了， 今天找到了解决问题的方法，写在了文章的最后了</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-6393dd936e729b99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>用人家的so库包名就不能改，直接把这个文件放进去就可以了, 在android studio 使用so库有一种简单的办法，就是在项目中的java文件夹的统计目录创建一个jniLibs文件夹， 然后把so放进去就可以了</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-5745eaa696da85fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-cf4e43e3095e0f87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>然后再activity中直接调用就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package org.chitarra.tiny.myapplication.view;</span><br><span class="line"></span><br><span class="line">import android.content.Intent;</span><br><span class="line"></span><br><span class="line">import android.net.Uri;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.Environment;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.os.Message;</span><br><span class="line"></span><br><span class="line">import android.support.design.widget.FloatingActionButton;</span><br><span class="line"></span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import android.view.View;</span><br><span class="line"></span><br><span class="line">import android.widget.Toast;</span><br><span class="line">import static com.cundong.utils.PatchUtils.patch;</span><br><span class="line"></span><br><span class="line">import org.chitarra.tiny.myapplication.R;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">public class UpdataActivity extends AppCompatActivity &#123;</span><br><span class="line">    public static final String PATH = Environment.getExternalStorageDirectory() +</span><br><span class="line">        File.separator;</span><br><span class="line"></span><br><span class="line">    public static final String NEW_APK_PATH = PATH + &quot;new.apk&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String PATCH_PATH = PATH + &quot;test.patch&quot;;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(&quot;ApkPatchLibrary&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private FloatingActionButton mBut;</span><br><span class="line">    Handler mHandler = new Handler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleMessage(Message msg) &#123;</span><br><span class="line">                switch (msg.what) &#123;</span><br><span class="line">                case 0:</span><br><span class="line">                    Toast.makeText(UpdataActivity.this, &quot;OK&quot;, Toast.LENGTH_SHORT)</span><br><span class="line">                         .show();</span><br><span class="line">                    installApk();</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case -1:</span><br><span class="line">                    Toast.makeText(UpdataActivity.this, &quot;error&quot;,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                default:</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                super.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_updata);</span><br><span class="line"></span><br><span class="line">        this.mBut = (FloatingActionButton) findViewById(R.id.fab);</span><br><span class="line">        this.mBut.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(View view) &#123;</span><br><span class="line">                    File patchFile = new File(PATCH_PATH);</span><br><span class="line">                    if (!patchFile.exists()) &#123;</span><br><span class="line">                        Toast.makeText(UpdataActivity.this, &quot;patch not exists&quot;,</span><br><span class="line">                            Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        new PatchThread().start();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void installApk() &#123;</span><br><span class="line">        File file = new File(NEW_APK_PATH);</span><br><span class="line"></span><br><span class="line">        if (file.exists()) &#123;</span><br><span class="line">            Uri uri = Uri.fromFile(file);</span><br><span class="line">            Intent installIntent = new Intent(Intent.ACTION_VIEW);</span><br><span class="line">            installIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            installIntent.setDataAndType(uri,</span><br><span class="line">                &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">            this.startActivity(installIntent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class PatchThread extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            String oldAppPatch = getApplicationContext().getApplicationInfo().sourceDir;</span><br><span class="line"></span><br><span class="line">            int patchResult = patch(oldAppPatch, NEW_APK_PATH, PATCH_PATH);</span><br><span class="line"></span><br><span class="line">            if (patchResult == 0) &#123;</span><br><span class="line">                mHandler.sendEmptyMessage(0);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mHandler.sendEmptyMessage(-1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码不是很复杂， 就没写注释了，但是还要记录几点，省得以后忘记<br>NEW_APK_PATH ：是与差分文件合并生成的apk，在指定目录下，就会生成一个new.apk<br>PATCH_PATH ：拆分文件， xxxx.patch的格式的<br>patch： 这是一个本地方法，其中三个变量都是需要传的，第一个变量可以通过<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">getApplicationContext</span>()<span class="selector-class">.getApplicationInfo</span>()<span class="selector-class">.sourceDir</span>;</span><br></pre></td></tr></table></figure></p><p>这种方式得到</p><p>最后的最后的最后， 重要的事情说三遍，在AndroidManifest.xml中要加入权限</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-a5044bc949b7f8a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>好了， 基本上能记录的就这么多了， 下面试程序运行时的效果图</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-f7e08164337715d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-12f1db3101e08be1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-4170584628049992.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>这是项目中使用到的全部文件，csdn 上传代码太慢了，传到了百度云上<br><a href="http://pan.baidu.com/s/1hru9FDU" target="_blank" rel="noopener">http://pan.baidu.com/s/1hru9FDU</a></p><hr><p>今天我有重新拿android studio 重新编译了一下以上的代码， 发现昨天的代码中间会有基础错误，今天修正了之后就能编译出so的库了</p><p>#创建一个android studio jni的项目<br>在项目中新建一个jni文件夹</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-0c99ce17f24b3c6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>这个时候，android studio会自动的在这个项目中的build.gradle生成一个<br>sourceSets { main { jni.srcDirs = [‘src/main/jni’] } }<br>至于是生成.h 在activity中引入native这些都没有变，紧接着我们就把bzip2的源码拖进来，因为直接在org_chitarra_tiny_jniresr_Patch.c这个文件中引入的是#include “bzlib.c” 这样就会发生很多重复定义的错误</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-402dd431765805f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>等我把#include “bzlib.c”改成#include “bzlib.h” 错误就不会出现了，程序也会正常的执行了，证明昨天的做法是没有问题的，只是没有改这个</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- Android客户端的差量更新</title>
      <link href="/2016/01/20/Android-Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%B7%AE%E9%87%8F%E6%9B%B4%E6%96%B0/"/>
      <url>/2016/01/20/Android-Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%B7%AE%E9%87%8F%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>#android增量更新<br>android 4.1开始 google引入了应用程序的增量更新。增量更新的原理实际上是使用服务器最新的apk进行对比，并得到罪行的差分包，当应用程序需要更新是，下载差分包就好了，通过它和现在本机上的版本形成一个新的apk</p><p>#服务端形成差分包<br>拆分包可以在服务端生成，用的是在网上找的一个例子<br>SmartAppUpdates-master<br>当然，我没有编译java服务端的例子，又在网上找了某个大神打包好的项目，直接在本地就直接能打包好apk的拆分</p><p>这是关于拆分的详细介绍，我就是在这篇博客上学习怎么增量更新的<br><a href="https://github.com/cundong/SmartAppUpdates" target="_blank" rel="noopener">https://github.com/cundong/SmartAppUpdates</a></p><p>这里有一个实验包， 使用它就可以在windows中直接完成拆分<br><a href="http://download.csdn.net/detail/hmg25/4676737" target="_blank" rel="noopener">http://download.csdn.net/detail/hmg25/4676737</a></p><p>我今天做个记录吧， 省得以后用到之后又忘了，我水平不行，先会用就行了</p><p>#实现<br>首先我下载了SmartAppUpdates项目，项目是使用eclipse编的， 直接运行这个没什么意思，最近一直再用android studio，所以现在studio 上编一下。<br>jni的代码不是很多，其中用到了一个库叫 bzip2，但是在编译的时候遇到了一个问题， 这里记录一下吧，等之后找一下答案。<br>我在android studio上搭建了一个ndk项目， 我先试着自己写一个c函数，这个是可以编译过的，也返回了正确的结果，但是例子上的代码（图中）就仅仅是调用了applypatch，在编译的时候android studio提示各种的</p><pre><code>multiple definition of `xxxxxx&apos;</code></pre><p>我后来又在eclipse下重新编译了项目，是可以生成so文件的，查了一会没有结果也就放弃了，直接就用github上提供so库了， 今天找到了解决问题的方法，写在了文章的最后了</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-6393dd936e729b99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>用人家的so库包名就不能改，直接把这个文件放进去就可以了, 在android studio 使用so库有一种简单的办法，就是在项目中的java文件夹的统计目录创建一个jniLibs文件夹， 然后把so放进去就可以了</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-5745eaa696da85fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-cf4e43e3095e0f87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>然后再activity中直接调用就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package org.chitarra.tiny.myapplication.view;</span><br><span class="line"></span><br><span class="line">import android.content.Intent;</span><br><span class="line"></span><br><span class="line">import android.net.Uri;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.Environment;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.os.Message;</span><br><span class="line"></span><br><span class="line">import android.support.design.widget.FloatingActionButton;</span><br><span class="line"></span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import android.view.View;</span><br><span class="line"></span><br><span class="line">import android.widget.Toast;</span><br><span class="line">import static com.cundong.utils.PatchUtils.patch;</span><br><span class="line"></span><br><span class="line">import org.chitarra.tiny.myapplication.R;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">public class UpdataActivity extends AppCompatActivity &#123;</span><br><span class="line">    public static final String PATH = Environment.getExternalStorageDirectory() +</span><br><span class="line">        File.separator;</span><br><span class="line"></span><br><span class="line">    public static final String NEW_APK_PATH = PATH + &quot;new.apk&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String PATCH_PATH = PATH + &quot;test.patch&quot;;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(&quot;ApkPatchLibrary&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private FloatingActionButton mBut;</span><br><span class="line">    Handler mHandler = new Handler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleMessage(Message msg) &#123;</span><br><span class="line">                switch (msg.what) &#123;</span><br><span class="line">                case 0:</span><br><span class="line">                    Toast.makeText(UpdataActivity.this, &quot;OK&quot;, Toast.LENGTH_SHORT)</span><br><span class="line">                         .show();</span><br><span class="line">                    installApk();</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case -1:</span><br><span class="line">                    Toast.makeText(UpdataActivity.this, &quot;error&quot;,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                default:</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                super.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_updata);</span><br><span class="line"></span><br><span class="line">        this.mBut = (FloatingActionButton) findViewById(R.id.fab);</span><br><span class="line">        this.mBut.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(View view) &#123;</span><br><span class="line">                    File patchFile = new File(PATCH_PATH);</span><br><span class="line">                    if (!patchFile.exists()) &#123;</span><br><span class="line">                        Toast.makeText(UpdataActivity.this, &quot;patch not exists&quot;,</span><br><span class="line">                            Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        new PatchThread().start();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void installApk() &#123;</span><br><span class="line">        File file = new File(NEW_APK_PATH);</span><br><span class="line"></span><br><span class="line">        if (file.exists()) &#123;</span><br><span class="line">            Uri uri = Uri.fromFile(file);</span><br><span class="line">            Intent installIntent = new Intent(Intent.ACTION_VIEW);</span><br><span class="line">            installIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            installIntent.setDataAndType(uri,</span><br><span class="line">                &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">            this.startActivity(installIntent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class PatchThread extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            String oldAppPatch = getApplicationContext().getApplicationInfo().sourceDir;</span><br><span class="line"></span><br><span class="line">            int patchResult = patch(oldAppPatch, NEW_APK_PATH, PATCH_PATH);</span><br><span class="line"></span><br><span class="line">            if (patchResult == 0) &#123;</span><br><span class="line">                mHandler.sendEmptyMessage(0);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mHandler.sendEmptyMessage(-1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码不是很复杂， 就没写注释了，但是还要记录几点，省得以后忘记<br>NEW_APK_PATH ：是与差分文件合并生成的apk，在指定目录下，就会生成一个new.apk<br>PATCH_PATH ：拆分文件， xxxx.patch的格式的<br>patch： 这是一个本地方法，其中三个变量都是需要传的，第一个变量可以通过<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">getApplicationContext</span>()<span class="selector-class">.getApplicationInfo</span>()<span class="selector-class">.sourceDir</span>;</span><br></pre></td></tr></table></figure></p><p>这种方式得到</p><p>最后的最后的最后， 重要的事情说三遍，在AndroidManifest.xml中要加入权限</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-a5044bc949b7f8a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>好了， 基本上能记录的就这么多了， 下面试程序运行时的效果图</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-f7e08164337715d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-12f1db3101e08be1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-4170584628049992.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>这是项目中使用到的全部文件，csdn 上传代码太慢了，传到了百度云上<br><a href="http://pan.baidu.com/s/1hru9FDU" target="_blank" rel="noopener">http://pan.baidu.com/s/1hru9FDU</a></p><hr><p>今天我有重新拿android studio 重新编译了一下以上的代码， 发现昨天的代码中间会有基础错误，今天修正了之后就能编译出so的库了</p><p>#创建一个android studio jni的项目<br>在项目中新建一个jni文件夹</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-0c99ce17f24b3c6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>这个时候，android studio会自动的在这个项目中的build.gradle生成一个<br>sourceSets { main { jni.srcDirs = [‘src/main/jni’] } }<br>至于是生成.h 在activity中引入native这些都没有变，紧接着我们就把bzip2的源码拖进来，因为直接在org_chitarra_tiny_jniresr_Patch.c这个文件中引入的是#include “bzlib.c” 这样就会发生很多重复定义的错误</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-402dd431765805f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>等我把#include “bzlib.c”改成#include “bzlib.h” 错误就不会出现了，程序也会正常的执行了，证明昨天的做法是没有问题的，只是没有改这个</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AndroidStudio -- 五彩缤纷的Logcat</title>
      <link href="/2016/01/05/AndroidStudio/"/>
      <url>/2016/01/05/AndroidStudio/</url>
      
        <content type="html"><![CDATA[<h1 id="一、先看下效果"><a href="#一、先看下效果" class="headerlink" title="一、先看下效果"></a>一、先看下效果</h1><p><img src="http://upload-images.jianshu.io/upload_images/1285832-f27056f5258781c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>听说彩色的logcat和彩虹键盘更配哦, 在设置里面就可以修改， 找不到的话可以搜一下</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-c871b927bf3e86b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h5 id="配色方案在这里"><a href="#配色方案在这里" class="headerlink" title="配色方案在这里"></a>配色方案在这里</h5><p>VERBOSE    BBBBBB</p><p>DEBUG    0070BB</p><p>INFO    48BB31</p><p>WARN    BBBB23</p><p>ERROR    FF0006</p><p>ASSERT    8F0005</p>]]></content>
      
      
      <categories>
          
          <category> AndroidStudio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android -- Android Bluetooth Low Energy 学习笔记</title>
      <link href="/2015/12/29/Android-Android-Bluetooth-Low-Energy-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/12/29/Android-Android-Bluetooth-Low-Energy-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>#Android Bluetooth Low Energy 基础</p><p>1、关于Android平台的BLE</p><p>蓝牙4.0于2010年发布，相对于上个版本3.0，它的特点是更省电、成本低 延迟低等特点，现在最新的蓝牙协议是2013年底发布的蓝牙4.1，蓝牙4.1在4.0 基础上进行升级，使得可穿戴设备的批量数据传输速度更高。Android是从4.3 才开始提供BLE API,这也就限定了BLE的应用只能运行在Android 4.3及其以上 的系统。在Android平台上的蓝牙4.0主要有两种工作模式:经典蓝牙(classic bluetooth) 、低功耗蓝牙(bluetooth low energy,缩写为BLE)</p><p>2、角色与职责</p><p> 当一个Android设备与一个BLE设备进行交互通信时，主要存在以下两种关系<br>中心设备与外围设备：中心设备扮演扫描的角色，寻找外围设备的广播消息。Android设备 作为中心设备，与之连接通信的设备作为外围设备。</p><p>GATT服务器与GATT客户端：这种关系决定了当连接建立后两个设备如何通信。</p><p>注：目前Android系统提供的API使得Android设备只能作为中心设备</p><p>3、组成部分</p><p> BLE分为三个部分Service、Characteristic、Descriptor，每个部分都拥有不同的 UUID来标识。一个BLE设备可以拥有多个Service，一个Service可以包含多个Characteristic， 一个Characteristic包含一个Value和多个Descriptor，一个Descriptor包含一个Value。 通信数据一般存储在Characteristic内，目前一个Characteristic中存储的数据最大为20 byte。 与Characteristic相关的权限字段主要有READ、WRITE、WRITE_NO_RESPONSE、NOTIFY。 Characteristic具有的权限属性可以有一个或者多个。</p><p>4、核心代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private BluetoothAdapter mBtAdapter = null;</span><br><span class="line">private BluetoothGatt mBtGatt = null;</span><br><span class="line">private int mState = 0;</span><br><span class="line">private Context mContext;</span><br><span class="line">private BluetoothGattCharacteristic mWriteCharacteristic = null;</span><br><span class="line">private BluetoothGattCharacteristic mReadCharacteristric = null;</span><br><span class="line"> </span><br><span class="line">private final String TAG = &quot;BLE_Demo&quot;;</span><br><span class="line"> </span><br><span class="line">// 设备连接状态</span><br><span class="line">private final int CONNECTED = 0x01;</span><br><span class="line">private final int DISCONNECTED = 0x02;</span><br><span class="line">private final int CONNECTTING = 0x03;</span><br><span class="line"> </span><br><span class="line">// 读写相关的Service、Characteristic的UUID</span><br><span class="line">public static final UUID TRANSFER_SERVICE_READ = UUID.fromString(&quot;34567817-2432-5678-1235-3c1d5ab44e17&quot;);</span><br><span class="line">public static final UUID TRANSFER_SERVICE_WRITE = UUID.fromString(&quot;34567817-2432-5678-1235-3c1d5ab44e18&quot;);</span><br><span class="line">public static final UUID TRANSFER_CHARACTERISTIC_READ = UUID.fromString(&quot;23487654-5678-1235-2432-3c1d5ab44e94&quot;);</span><br><span class="line">public static final UUID TRANSFER_CHARACTERISTIC_WRITE = UUID.fromString(&quot;23487654-5678-1235-2432-3c1d5ab44e93&quot;);</span><br><span class="line"> </span><br><span class="line">// BLE设备连接通信过程中回调</span><br><span class="line">private BluetoothGattCallback mBtGattCallback = new BluetoothGattCallback() &#123;</span><br><span class="line"> </span><br><span class="line">    // 连接状态发生改变时的回调</span><br><span class="line">    @Override</span><br><span class="line">    public void onConnectionStateChange(BluetoothGatt gatt, int status,</span><br><span class="line">                int newState) &#123;</span><br><span class="line"> </span><br><span class="line">        if (status == BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">            mState = CONNECTED;</span><br><span class="line">            Log.d(TAG, &quot;connected OK&quot;);</span><br><span class="line">            mBtGatt.discoverServices();</span><br><span class="line">        &#125; else if (newState == BluetoothGatt.GATT_FAILURE) &#123;</span><br><span class="line">            mState = DISCONNECTED;</span><br><span class="line">            Log.d(TAG, &quot;connect failed&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 远端设备中的服务可用时的回调</span><br><span class="line">    @Override</span><br><span class="line">    public void onServicesDiscovered(BluetoothGatt gatt, int status) &#123;</span><br><span class="line"> </span><br><span class="line">        if (status == BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">            BluetoothGattService btGattWriteService = mBtGatt</span><br><span class="line">                    .getService(TRANSFER_SERVICE_WRITE);</span><br><span class="line">            BluetoothGattService btGattReadService = mBtGatt</span><br><span class="line">                    .getService(TRANSFER_SERVICE_READ);</span><br><span class="line">            if (btGattWriteService != null) &#123;</span><br><span class="line">                mWriteCharacteristic = btGattWriteService</span><br><span class="line">                        .getCharacteristic(TRANSFER_CHARACTERISTIC_WRITE);</span><br><span class="line">            &#125;</span><br><span class="line">            if (btGattReadService != null) &#123;</span><br><span class="line">                mReadCharacteristric = btGattReadService</span><br><span class="line">                        .getCharacteristic(TRANSFER_CHARACTERISTIC_READ);</span><br><span class="line">                if (mReadCharacteristric != null) &#123;</span><br><span class="line">                    mBtGatt.readCharacteristic(mReadCharacteristric);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 某Characteristic的状态为可读时的回调</span><br><span class="line">    @Override</span><br><span class="line">    public void onCharacteristicRead(BluetoothGatt gatt,</span><br><span class="line">            BluetoothGattCharacteristic characteristic, int status) &#123;</span><br><span class="line"> </span><br><span class="line">        if (status == BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">            readCharacterisricValue(characteristic);</span><br><span class="line"> </span><br><span class="line">            // 订阅远端设备的characteristic，</span><br><span class="line">            // 当此characteristic发生改变时当回调mBtGattCallback中的onCharacteristicChanged方法</span><br><span class="line">            mBtGatt.setCharacteristicNotification(mReadCharacteristric,</span><br><span class="line">                    true);</span><br><span class="line">            BluetoothGattDescriptor descriptor = mReadCharacteristric</span><br><span class="line">                    .getDescriptor(UUID</span><br><span class="line">                            .fromString(&quot;00002902-0000-1000-8000-00805f9b34fb&quot;));</span><br><span class="line">            if (descriptor != null) &#123;</span><br><span class="line">                byte[] val = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE;</span><br><span class="line">                descriptor.setValue(val);</span><br><span class="line">                mBtGatt.writeDescriptor(descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 写入Characteristic成功与否的回调</span><br><span class="line">    @Override</span><br><span class="line">    public void onCharacteristicWrite(BluetoothGatt gatt,</span><br><span class="line">            BluetoothGattCharacteristic characteristic, int status) &#123;</span><br><span class="line"> </span><br><span class="line">        switch (status) &#123;</span><br><span class="line">        case BluetoothGatt.GATT_SUCCESS:</span><br><span class="line">            Log.d(TAG, &quot;write data success&quot;);</span><br><span class="line">            break;// 写入成功</span><br><span class="line">        case BluetoothGatt.GATT_FAILURE:</span><br><span class="line">            Log.d(TAG, &quot;write data failed&quot;);</span><br><span class="line">            break;// 写入失败</span><br><span class="line">        case BluetoothGatt.GATT_WRITE_NOT_PERMITTED:</span><br><span class="line">            Log.d(TAG, &quot;write not permitted&quot;);</span><br><span class="line">            break;// 没有写入的权限</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 订阅了远端设备的Characteristic信息后，</span><br><span class="line">    // 当远端设备的Characteristic信息发生改变后,回调此方法</span><br><span class="line">    @Override</span><br><span class="line">    public void onCharacteristicChanged(BluetoothGatt gatt,</span><br><span class="line">            BluetoothGattCharacteristic characteristic) &#123;</span><br><span class="line">        readCharacterisricValue(characteristic);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 读取BluetoothGattCharacteristic中的数据</span><br><span class="line"> * </span><br><span class="line"> * @param characteristic</span><br><span class="line"> */</span><br><span class="line">private void readCharacterisricValue(</span><br><span class="line">        BluetoothGattCharacteristic characteristic) &#123;</span><br><span class="line">    byte[] data = characteristic.getValue();</span><br><span class="line">    StringBuffer buffer = new StringBuffer(&quot;0x&quot;);</span><br><span class="line">    int i;</span><br><span class="line">    for (byte b : data) &#123;</span><br><span class="line">        i = b &amp; 0xff;</span><br><span class="line">        buffer.append(Integer.toHexString(i));</span><br><span class="line">    &#125;</span><br><span class="line">    Log.d(TAG, &quot;read data:&quot; + buffer.toString());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 与指定的设备建立连接</span><br><span class="line"> * </span><br><span class="line"> * @param device</span><br><span class="line"> */</span><br><span class="line">public void connect(BluetoothDevice device) &#123;</span><br><span class="line"> </span><br><span class="line">    mBtGatt = device.connectGatt(mContext, false, mBtGattCallback);</span><br><span class="line">    mState = CONNECTTING;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 初始化</span><br><span class="line"> * </span><br><span class="line"> * @param context</span><br><span class="line"> * @return 如果初始化成功则返回true</span><br><span class="line"> */</span><br><span class="line">public boolean init(Context context) &#123;</span><br><span class="line">    BluetoothManager btMrg = (BluetoothManager) context</span><br><span class="line">            .getSystemService(Context.BLUETOOTH_SERVICE);</span><br><span class="line">    if (btMrg == null)</span><br><span class="line">        return false;</span><br><span class="line">    mBtAdapter = btMrg.getAdapter();</span><br><span class="line">    if (mBtAdapter == null)</span><br><span class="line">        return false;</span><br><span class="line">    mContext = context;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// BLE设备搜索过程中的回调，在此可以根据外围设备广播的消息来对设备进行过滤</span><br><span class="line">private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() &#123;</span><br><span class="line">     </span><br><span class="line">    @Override</span><br><span class="line">    public void onLeScan(final BluetoothDevice device, int rssi,</span><br><span class="line">            byte[] scanRecord) &#123;</span><br><span class="line">         </span><br><span class="line">        ArrayUtils.reverse(scanRecord);// 数组反转</span><br><span class="line">        // 将Byte数组的数据以十六进制表示并拼接成字符串</span><br><span class="line">        StringBuffer str = new StringBuffer();</span><br><span class="line">        int i = 0;</span><br><span class="line">        for (byte b : scanRecord) &#123;</span><br><span class="line">            i = (b &amp; 0xff);</span><br><span class="line">            str.append(Integer.toHexString(i));</span><br><span class="line">        &#125;</span><br><span class="line">        String discoveryServceID = str.toString();</span><br><span class="line">        Log.d(TAG, device.getName() + &quot; scanRecord:\n&quot; + discoveryServceID);</span><br><span class="line">         </span><br><span class="line">        // 查询是否含有指定的Service UUID信息</span><br><span class="line">        if (discoveryServceID.indexOf(TRANSFER_SERVICE_WRITE.toString()</span><br><span class="line">                .replace(&quot;-&quot;, &quot;&quot;)) != -1) &#123;</span><br><span class="line"> </span><br><span class="line">            Log.d(TAG, device.getName() + &quot; has available service UUID&quot;);</span><br><span class="line"> </span><br><span class="line">            // 在这是处理匹配的设备……</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 开始BLE设备扫描</span><br><span class="line"> */</span><br><span class="line">public void startScan() &#123;</span><br><span class="line">    mBtAdapter.startLeScan(mLeScanCallback);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 停止BLE设备扫描</span><br><span class="line"> */</span><br><span class="line">public void stopScan() &#123;</span><br><span class="line">    mBtAdapter.stopLeScan(mLeScanCallback);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 发送数据</span><br><span class="line"> * </span><br><span class="line"> * @param data</span><br><span class="line"> *            待发送的数据,最大长度为20</span><br><span class="line"> */</span><br><span class="line">private void sendData(byte[] data) &#123;</span><br><span class="line"> </span><br><span class="line">    if (data != null &amp;&amp; data.length &gt; 0 &amp;&amp; data.length &lt; 21) &#123;</span><br><span class="line">        if (mWriteCharacteristic.setValue(data)</span><br><span class="line">                &amp;&amp; mBtGatt.writeCharacteristic(mWriteCharacteristic)) &#123;</span><br><span class="line">            Log.d(TAG, &quot;send data OK&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#Android Bluetooth Low Energy 数据的写入与读取 第一天<br>1 、启动ble设备连接的方法首先要得到一个BluetoothDevice， 这个可以通过，android搜索一配对或者为配对的蓝牙设备获取得到BluetoothDevice的对象，也可以通过搜索ble设备去得到一个BluetoothDevice的对象（下面会仔细说索搜ble设备）需要注意的是，当一个ble设备作为一个蓝牙设备连接到了android 设备上的话，我们通过搜索ble设备的api是搜索不到的。</p><p>2、得到一个蓝牙已配对设备<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mBluetoothAdapter = <span class="keyword">BluetoothAdapter.getDefaultAdapter();</span></span><br><span class="line"><span class="keyword">mBluetoothAdapter.startDiscovery();</span></span><br><span class="line"><span class="keyword"> </span></span><br><span class="line">Set&lt;<span class="keyword">BluetoothDevice&gt; </span><span class="keyword">bledevices </span>= mBluetoothAdapter.getBondedDevices()<span class="comment">;</span></span><br><span class="line">if (<span class="keyword">bledevices.size() </span>&gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    for (<span class="keyword">BluetoothDevice </span><span class="keyword">bluetoothDevice </span>: <span class="keyword">bledevices)</span></span><br><span class="line"><span class="keyword"> </span>   &#123;</span><br><span class="line">        if (<span class="keyword">bluetoothDevice.getAddress().toString()</span></span><br><span class="line"><span class="keyword"> </span>               .equals(<span class="keyword">BLUETOOTH_DEVICE_MAC))</span></span><br><span class="line"><span class="keyword"> </span>       &#123;</span><br><span class="line">            Log.v(TAG, <span class="string">"find with old: "</span> + <span class="keyword">bluetoothDevice.getAddress());</span></span><br><span class="line"><span class="keyword"> </span>           <span class="keyword">bluetoothDevice.connectGatt(getActivity(), </span>false,</span><br><span class="line">                    mGattCallback)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、如何索搜ble设备 ：</p><pre><code>使用BluetoothAdapter 的 startLeScan 方法， </code></pre><p>startLeScan 的参数是一个回调。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BluetoothAdapter.LeScanCallback mLeScanCallback = <span class="keyword">new</span> BluetoothAdapter.LeScanCallback()</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onLeScan(<span class="keyword">final</span> BluetoothDevice device, <span class="keyword">int</span> rssi,</span><br><span class="line">            <span class="keyword">byte</span>[] scanRecord)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.v(TAG, <span class="string">"device: "</span> + device);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在这个回调里可以索搜到BLE设备</p><p>4、使用索搜到的设备连接：</p><p>当我们搜索到设备的时候， 可以使用<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">device.<span class="keyword">connect</span>Gatt<span class="params">(getActivity()</span>, <span class="literal">false</span>, mGattCallback);</span><br></pre></td></tr></table></figure></p><p>进行连接，其中 mGattCallback 也是个回调方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattCallback mGattCallback = <span class="keyword">new</span> BluetoothGattCallback()</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 设备发生读操作时的回调</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> onCharacteristicRead(BluetoothGatt gatt,</span><br><span class="line">               BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span><br><span class="line">       &#123;</span><br><span class="line">           Log.v(TAG, <span class="string">"onCharacteristicRead: "</span> + characteristic.getUuid());</span><br><span class="line">       &#125;</span><br><span class="line">                 </span><br><span class="line">       <span class="comment">// 设备发生写操作是的回调</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> onCharacteristicWrite(BluetoothGatt gatt,</span><br><span class="line">               BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (BluetoothGatt.GATT_SUCCESS == status)</span><br><span class="line">           &#123;</span><br><span class="line">               Log.v(TAG, <span class="string">"onCharacteristicWrite: "</span> + characteristic.getUuid());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">super</span>.onCharacteristicWrite(gatt, characteristic, status);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 设备连接状态发生更改时的回调</span></span><br><span class="line">       <span class="comment">// 我们要在这里进行discoverServices()</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> onConnectionStateChange(BluetoothGatt gatt, <span class="keyword">int</span> status,</span><br><span class="line">               <span class="keyword">int</span> newState)</span><br><span class="line">       &#123;</span><br><span class="line">           gatt.discoverServices();</span><br><span class="line">           <span class="keyword">super</span>.onConnectionStateChange(gatt, status, newState);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 当BLE设备中的服务被找到时，回调如下方法</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> onServicesDiscovered(BluetoothGatt gatt, <span class="keyword">int</span> status)</span><br><span class="line">       &#123;</span><br><span class="line">           Log.v(TAG, <span class="string">"onServicesDiscovered: "</span> + gatt.getServices().size());</span><br><span class="line"></span><br><span class="line">           <span class="keyword">super</span>.onServicesDiscovered(gatt, status);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></p><p>5、重点：数据的IO<br>无论数据或是写，都需要</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BluetoothGattService mSVC = gatt.getService(UUID</span><br><span class="line">                    .fromString("0000dfb0<span class="string">-0000</span><span class="string">-1000</span><span class="string">-8000</span><span class="string">-00805</span>f9b34fb"));</span><br><span class="line">BluetoothGattCharacteristic mCH = mSVC.getCharacteristic(UUID</span><br><span class="line">                    .fromString("0000dfb1<span class="string">-0000</span><span class="string">-1000</span><span class="string">-8000</span><span class="string">-00805</span>f9b34fb"));</span><br></pre></td></tr></table></figure><p>得到一个BluetoothGattCharacteristic ， 如上， 我们同过一个指定uuid的方式，在</p><p>public<br> void<br> onServicesDiscovered() 方法中</p><p>得到gatt ，调用gatt的读操作<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatt.readCharacteristic(mCH)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>执行这部操作之后， 我们会在 onCharacteristicRead 方法回掉这个 Characteristic 的所带有的value</p><p>写操作则是<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mCH.setValue(GAME_MODE)<span class="comment">;</span></span><br><span class="line">gatt.writeCharacteristic(mCH)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>同理，在 onCharacteristicWrite 方法中可以获得操作的提示。</p><pre><code>20151120 ， 目前我可以读到 </code></pre><p>Characteristic 里的数据，结果也正确， 但是无法语言写入是否正确，目前执行了write的操作，系统显示写入正常， 但是看不到相应的变化，</p><p>指环的模式并没有变化。ps：我在提供的demo中执行写操作，指环的状态也为改变（之前改过机会，目前不知道情况）</p><h1 id="Android-Bluetooth-Low-Energy-数据的写入与读取-第二天"><a href="#Android-Bluetooth-Low-Energy-数据的写入与读取-第二天" class="headerlink" title="Android Bluetooth Low Energy 数据的写入与读取 第二天"></a>Android Bluetooth Low Energy 数据的写入与读取 第二天</h1><p>1、使用<br> writeCharacteristic 读写数据，（顺便说一句，今天反复的调试之后，公司这边的蓝牙设备终于可以切换模式了，不知道为什么之前尝试的总是不行），今天做下总结。</p><p>2、由于android ble 的接口都是异步的， 所以我们所调用的方法都要在回掉函数中进行，写一个简单的流程图， 方便理解：(图画的不专业， 凑合看看)</p><p><img src="http://upload-images.jianshu.io/upload_images/1285832-a69e3e90f24e5fbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>3、写数据的时候将值这样写 ch.setValue(new byte[] { (byte) 0x00, (byte) 0xff });<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> youten.redo.ble.readwrite;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> youten.redo.ble.util.BleUtil;</span><br><span class="line"><span class="keyword">import</span> youten.redo.ble.util.BleUuid;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothAdapter;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothDevice;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothGatt;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothGattCallback;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothGattCharacteristic;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothGattService;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothManager;</span><br><span class="line"><span class="keyword">import</span> android.bluetooth.BluetoothProfile;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.Window;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BLEDevice"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_BLUETOOTH_DEVICE = <span class="string">"BT_DEVICE"</span>;</span><br><span class="line">    <span class="keyword">private</span> BluetoothAdapter mBTAdapter;</span><br><span class="line">    <span class="keyword">private</span> BluetoothDevice mDevice;</span><br><span class="line">    <span class="keyword">private</span> BluetoothGatt mConnGatt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStatus;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Button mReadManufacturerNameButton;</span><br><span class="line">    <span class="keyword">private</span> Button mReadSerialNumberButton;</span><br><span class="line">    <span class="keyword">private</span> Button mWriteAlertLevelButton;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattCallback mGattcallback = <span class="keyword">new</span> BluetoothGattCallback()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionStateChange</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> newState)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newState == BluetoothProfile.STATE_CONNECTED)</span><br><span class="line">            &#123;</span><br><span class="line">                mStatus = newState;</span><br><span class="line">                Log.v(TAG, <span class="string">"connected and discoverServices"</span>);</span><br><span class="line">                mConnGatt.discoverServices();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newState == BluetoothProfile.STATE_DISCONNECTED)</span><br><span class="line">            &#123;</span><br><span class="line">                mStatus = newState;</span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable()</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                    </span>&#123;</span><br><span class="line">                        mReadManufacturerNameButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                        mReadSerialNumberButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                        mWriteAlertLevelButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServicesDiscovered</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Log.v(TAG, <span class="string">"is have services"</span>);</span><br><span class="line">            <span class="keyword">for</span> (BluetoothGattService service : gatt.getServices())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((service == <span class="keyword">null</span>) || (service.getUuid() == <span class="keyword">null</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (BleUuid.SERVICE_DEVICE_INFORMATION.equalsIgnoreCase(service</span><br><span class="line">                        .getUuid().toString()))</span><br><span class="line">                &#123;</span><br><span class="line">                    mReadManufacturerNameButton</span><br><span class="line">                            .setTag(service.getCharacteristic(UUID</span><br><span class="line">                                    .fromString(BleUuid.CHAR_MANUFACTURER_NAME_STRING)));</span><br><span class="line">                    mReadSerialNumberButton</span><br><span class="line">                            .setTag(service.getCharacteristic(UUID</span><br><span class="line">                                    .fromString(BleUuid.CHAR_SERIAL_NUMBEAR_STRING)));</span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable()</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        </span>&#123;</span><br><span class="line">                            mReadManufacturerNameButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">                            mReadSerialNumberButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (BleUuid.SERVICE_IMMEDIATE_ALERT.equalsIgnoreCase(service</span><br><span class="line">                        .getUuid().toString()))</span><br><span class="line">                &#123;</span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable()</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        </span>&#123;</span><br><span class="line">                            mWriteAlertLevelButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    mWriteAlertLevelButton.setTag(service</span><br><span class="line">                            .getCharacteristic(UUID</span><br><span class="line">                                    .fromString(BleUuid.CHAR_ALERT_LEVEL)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            runOnUiThread(<span class="keyword">new</span> Runnable()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    setProgressBarIndeterminateVisibility(<span class="keyword">false</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicRead</span><span class="params">(BluetoothGatt gatt,</span></span></span><br><span class="line"><span class="function"><span class="params">                BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (status == BluetoothGatt.GATT_SUCCESS)</span><br><span class="line">            &#123;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">byte</span>[] bytes = characteristic.getValue();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes)</span><br><span class="line">                &#123;</span><br><span class="line">                    Log.v(<span class="string">""</span>, <span class="string">"------characteristic------"</span> + b);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (BleUuid.CHAR_MANUFACTURER_NAME_STRING</span><br><span class="line">                        .equalsIgnoreCase(characteristic.getUuid().toString()))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">final</span> String name = characteristic.getStringValue(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable()</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        </span>&#123;</span><br><span class="line">                            mReadManufacturerNameButton.setText(name);</span><br><span class="line">                            setProgressBarIndeterminateVisibility(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BleUuid.CHAR_SERIAL_NUMBEAR_STRING</span><br><span class="line">                        .equalsIgnoreCase(characteristic.getUuid().toString()))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">final</span> String name = characteristic.getStringValue(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable()</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        </span>&#123;</span><br><span class="line">                            mReadSerialNumberButton.setText(name);</span><br><span class="line">                            setProgressBarIndeterminateVisibility(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicWrite</span><span class="params">(BluetoothGatt gatt,</span></span></span><br><span class="line"><span class="function"><span class="params">                BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (BluetoothGatt.GATT_SUCCESS == status)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.v(TAG,</span><br><span class="line">                        <span class="string">"write - characteristic: "</span> + characteristic.getUuid());</span><br><span class="line">                Log.v(TAG, <span class="string">"write - service "</span></span><br><span class="line">                        + characteristic.getService().getUuid());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 再读取一次， 验证一下值是不是对的</span></span><br><span class="line">            gatt.readCharacteristic(characteristic);</span><br><span class="line"> </span><br><span class="line">            runOnUiThread(<span class="keyword">new</span> Runnable()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    setProgressBarIndeterminateVisibility(<span class="keyword">false</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);</span><br><span class="line">        setContentView(R.layout.activity_device);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// state</span></span><br><span class="line">        mStatus = BluetoothProfile.STATE_DISCONNECTED;</span><br><span class="line">        mReadManufacturerNameButton = (Button) findViewById(R.id.read_manufacturer_name_button);</span><br><span class="line">        mReadManufacturerNameButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mReadSerialNumberButton = (Button) findViewById(R.id.read_serial_number_button);</span><br><span class="line">        mReadSerialNumberButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mWriteAlertLevelButton = (Button) findViewById(R.id.write_alert_level_button);</span><br><span class="line">        mWriteAlertLevelButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line"> </span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (mConnGatt != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mStatus != BluetoothProfile.STATE_DISCONNECTING)</span><br><span class="line">                    &amp;&amp; (mStatus != BluetoothProfile.STATE_DISCONNECTED))</span><br><span class="line">            &#123;</span><br><span class="line">                mConnGatt.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">            mConnGatt.close();</span><br><span class="line">            mConnGatt = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.read_manufacturer_name_button)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v.getTag() != <span class="keyword">null</span>)</span><br><span class="line">                    &amp;&amp; (v.getTag() <span class="keyword">instanceof</span> BluetoothGattCharacteristic))</span><br><span class="line">            &#123;</span><br><span class="line">                BluetoothGattCharacteristic ch = (BluetoothGattCharacteristic) v</span><br><span class="line">                        .getTag();</span><br><span class="line">                <span class="keyword">if</span> (mConnGatt.readCharacteristic(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    setProgressBarIndeterminateVisibility(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v.getId() == R.id.read_serial_number_button)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v.getTag() != <span class="keyword">null</span>)</span><br><span class="line">                    &amp;&amp; (v.getTag() <span class="keyword">instanceof</span> BluetoothGattCharacteristic))</span><br><span class="line">            &#123;</span><br><span class="line">                BluetoothGattCharacteristic ch = (BluetoothGattCharacteristic) v</span><br><span class="line">                        .getTag();</span><br><span class="line">                <span class="keyword">if</span> (mConnGatt.readCharacteristic(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    setProgressBarIndeterminateVisibility(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v.getId() == R.id.write_alert_level_button)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v.getTag() != <span class="keyword">null</span>)</span><br><span class="line">                    &amp;&amp; (v.getTag() <span class="keyword">instanceof</span> BluetoothGattCharacteristic))</span><br><span class="line">            &#123;</span><br><span class="line">                BluetoothGattCharacteristic ch = (BluetoothGattCharacteristic) v</span><br><span class="line">                        .getTag();</span><br><span class="line">                ch.setValue(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; (<span class="keyword">byte</span>) <span class="number">0x00</span>, (<span class="keyword">byte</span>) <span class="number">0xff</span> &#125;);</span><br><span class="line">                <span class="keyword">if</span> (mConnGatt.writeCharacteristic(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    Log.v(TAG, <span class="string">"1st wirte had readly"</span>);</span><br><span class="line">                    setProgressBarIndeterminateVisibility(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// BLE check</span></span><br><span class="line">        <span class="keyword">if</span> (!BleUtil.isBLESupported(<span class="keyword">this</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, R.string.ble_not_supported, Toast.LENGTH_SHORT)</span><br><span class="line">                    .show();</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// BT check</span></span><br><span class="line">        BluetoothManager manager = BleUtil.getManager(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (manager != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mBTAdapter = manager.getAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mBTAdapter == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, R.string.bt_unavailable, Toast.LENGTH_SHORT)</span><br><span class="line">                    .show();</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// check BluetoothDevice</span></span><br><span class="line">        <span class="keyword">if</span> (mDevice == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mDevice = getBTDeviceExtra();</span><br><span class="line">            <span class="keyword">if</span> (mDevice == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                finish();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// button disable</span></span><br><span class="line">        mReadManufacturerNameButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        mReadSerialNumberButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        mWriteAlertLevelButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// connect to Gatt</span></span><br><span class="line">        <span class="keyword">if</span> ((mConnGatt == <span class="keyword">null</span>)</span><br><span class="line">                &amp;&amp; (mStatus == BluetoothProfile.STATE_DISCONNECTED))</span><br><span class="line">        &#123;</span><br><span class="line">            Log.v(TAG, <span class="string">"try to connect with connectGatt"</span>);</span><br><span class="line">            <span class="comment">// try to connect</span></span><br><span class="line">            mConnGatt = mDevice.connectGatt(<span class="keyword">this</span>, <span class="keyword">false</span>, mGattcallback);</span><br><span class="line">            mStatus = BluetoothProfile.STATE_CONNECTING;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (mConnGatt != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// re-connect and re-discover Services</span></span><br><span class="line">                Log.v(TAG, <span class="string">"try to connect with connect..."</span>);</span><br><span class="line">                mConnGatt.connect();</span><br><span class="line">                mConnGatt.discoverServices();</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"state error"</span>);</span><br><span class="line">                finish();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setProgressBarIndeterminateVisibility(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> BluetoothAdapter mBluetoothAdapter;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 读取一个固定的mac 地址， 进行验证</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BLUETOOTH_DEVICE_MAC = <span class="string">"D0:06:8E:75:56:16"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> BluetoothDevice <span class="title">getBTDeviceExtra</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BluetoothDevice bleDevice = <span class="keyword">null</span>;</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        <span class="keyword">if</span> (intent == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Bundle extras = intent.getExtras();</span><br><span class="line">        <span class="keyword">if</span> (extras == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line">        mBluetoothAdapter.startDiscovery();</span><br><span class="line"> </span><br><span class="line">        Set&lt;BluetoothDevice&gt; bledevices = mBluetoothAdapter.getBondedDevices();</span><br><span class="line">        <span class="keyword">if</span> (bledevices.size() &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (BluetoothDevice bluetoothDevice : bledevices)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.v(TAG,</span><br><span class="line">                        <span class="string">"bletoothdevice mac address: "</span></span><br><span class="line">                                + bluetoothDevice.getAddress());</span><br><span class="line">                <span class="keyword">if</span> (bluetoothDevice.getAddress().toString()</span><br><span class="line">                        .equals(BLUETOOTH_DEVICE_MAC))</span><br><span class="line">                &#123;</span><br><span class="line">                    bleDevice = bluetoothDevice;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> bleDevice;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Arduino -- lcd </title>
      <link href="/2015/12/29/Arduino-lcd/"/>
      <url>/2015/12/29/Arduino-lcd/</url>
      
        <content type="html"><![CDATA[<p>how to connect lcd 1602 IIC to your arduino</p><p><a href="http://www.lab-z.com/arduino-%E4%BD%BF%E7%94%A8i2c%E7%9A%841602-lcd/" target="_blank" rel="noopener">http://www.lab-z.com/arduino-%E4%BD%BF%E7%94%A8i2c%E7%9A%841602-lcd/</a><br>example:<br>//YWROBOT</p><p>#include &lt;Wire.h&gt;</p><p>#include “LiquidCrystal_I2C.h”</p><p>LiquidCrystal_I2C lcd(0x27,16,2); // set the LCD address to 0x27 for a 16 chars and 2 line display</p><p>void setup()<br>{<br>  lcd.init(); // initialize the lcd</p><p>  // Print a message to the LCD.<br>  lcd.backlight();<br>  lcd.print(“Hello, world!”);<br>  lcd.setCursor(1,1);<br>  lcd.print(“<a href="http://www.lab-z.com&quot;)" target="_blank" rel="noopener">www.lab-z.com&quot;)</a>;<br>}</p><p>void loop()<br>{<br>}</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Arduino -- 基于 arduino 蓝牙模块</title>
      <link href="/2015/12/29/Arduino-%E5%9F%BA%E4%BA%8E-arduino-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97/"/>
      <url>/2015/12/29/Arduino-%E5%9F%BA%E4%BA%8E-arduino-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/rayray/p/3157601.html" target="_blank" rel="noopener">Arduino蓝牙模块与Android实现通信</a></p><p><a href="http://www.cnblogs.com/rayray/p/3157601.html" target="_blank" rel="noopener">http://www.cnblogs.com/rayray/p/3157601.html</a><br>VCC：接Arduino的5V。GND：接Arduino的GND。<br>TXD：发送端，一般表示为自己的发送端，接Arduino的RX。RXD：接收端，一般表示为自己的接收端，接Arduino的TX。</p><p><a href="http://blog.csdn.net/think_embed/article/details/17335505" target="_blank" rel="noopener">android设备终端与蓝牙模块（HC-06）的通讯编程思路</a><br><a href="http://blog.csdn.net/think_embed/article/details/17335505" target="_blank" rel="noopener">http://blog.csdn.net/think_embed/article/details/17335505</a><br><strong>arduino 模块的AT模式—-arduino端</strong></p><hr><p><strong>以 Arduino 與 HC-06 連線</strong>第二種方式是利用 Arduino 的 SoftwareSerial 來和 HC-06 通訊，顯示訊息及輸入指令的工作交給 Arduino 的序列埠，再由 Arduino 幫我將指令透過我們自訂的腳位寫入 HC-06 並由 HC-06 擷取回應的訊息。HC-06 和 Arduino 的腳位對應如下：HC-06 VCC → Arduino 5VHC-06 GND → Arduino GNDHC-06 TXD → Arduino pin 10HC-06 RXD → Arduino pin 11<br>接好硬體後，將下面改自 Hazim Bitar (techbitar) 給 HC-05 的 firmware 程式碼 upload 到 Arduino：#include &lt;SoftwareSerial.h&gt;SoftwareSerial BTSerial(10, 11); // RX | TXvoid setup(){  Serial.begin(9600);  Serial.println(“Enter AT commands:”);  BTSerial.begin(<strong>9600</strong>);  // HC-06 current bound rate (default 9600)}void loop(){  // Keep reading from HC-06 and send to Arduino Serial Monitor  if (BTSerial.available())    Serial.write(BTSerial.read());  // Keep reading from Arduino Serial Monitor and send to HC-06  if (Serial.available())    BTSerial.write(Serial.read());}<br>上面紅色的 9600 是 HC-06 出廠後的預設 baud rate，如果已經改過了，必須自己置換掉，不然，可能無法正常連線。Arduino firmware upload 完畢，關掉 Arduino IDE 程式後，我們就可以用終端機軟體連 Arduino 的序列埠(以 9600 來連線)。成功和 Arduino 連上線，畫面上應該會出現Enter AT commands:」的訊息，如果輸入「AT」，HC-06 應該會回應「OK」，如果沒有回應，就要檢查一下接腳是否正確，或是將「BTSerial.begin(9600)」中的 9600 要換成別的連線速率試試。<strong>HC-06 的 AT command</strong>HC-06 的 AT command 只有簡單的幾項，而且不像 HC-05 必須按 Enter 鍵送出「\r\n」才會執行並回應。所以，我們一按完「AT」兩個按鍵，它馬上就回應「OK」了。試了一下，它的指定一定要用大寫字母，也沒有什麼查詢的 AT 指令，底下就列出在玩 S4A 可能會用到的 AT commands。AT：測試，回應「OK」<br>AT+VERSION：回應靭體的版本。<br>AT+NAMExyz：將裝置名稱改為「xyz」。n<br>AT+PIN1234：將連線密碼換為「1234」。<br>AT+BAUD4：將 baud rate 換為 9600。<br>AT+BAUD5：將 baud rate 換為 19200<br>AT+BAUD6：將 baud rate 換為 38400<br>AT+BAUD7：將 baud rate 換為 57600</p><p>更換 baud rate 的指定可以由 BAUD1~BAUDC ，有需要再自行上網找說明。</p><p>因為 HC-06 一輸入完「AT」就馬上會回應了，建議上面的指令用複製貼上的方法，不然，很難跟晶片比快啦！</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- jni 形参以及返回值</title>
      <link href="/2015/12/27/Android-jni-%E5%BD%A2%E5%8F%82%E4%BB%A5%E5%8F%8A%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
      <url>/2015/12/27/Android-jni-%E5%BD%A2%E5%8F%82%E4%BB%A5%E5%8F%8A%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>原网页：<a href="http://www.blogjava.net/china-qd/archive/2006/04/29/44002.html" target="_blank" rel="noopener">http://www.blogjava.net/china-qd/archive/2006/04/29/44002.html</a><br>Jni中C++和Java的参数传递</p><p>如何使用JNI的一些基本方法和过程在网上多如牛毛，如果你对Jni不甚了解，不知道Jni是做什么的，如何建立一个基本的jni程序，或许可以参考下面下面这些文章:<br>利用VC++6.0实现JNI的最简单的例子<br>JNI入门教程之HelloWorld篇<br>SUN JNI Tutorial</p><p>这些资料的例子中，大多数只是输入一些简单的参数，获取没有参数。而在实际的使用过程中，往往需要对参数进行处理转换。才可以被C/C++程序识别。比如我们在C++中有一个结构（Struct）DiskInfo ,需要传递一个类似于DiskInfo *pDiskInfo的参数，类似于在C++这样参数如何传递到Java中呢？下面我们就来讨论C++到Java中方法的一些常见参数的转换:<br>定义Native Java类：</p><p>如果你习惯了使用JNI，你就不会觉得它难了。既然本地方法是由其他语言实现的，它们在Java中没有函数体。但是，所有本地代码必须用本地关键词声明，成为Java类的成员。假设我们在C++中有这么一个结构，它用来描述硬盘信息：<br> // 硬盘信息<br> struct    {<br>     char  name[ 256 ];<br>     int  serial;<br>} DiskInfo;<br>那么我们需要在Java中定义一个类来与之匹配，声明可以写成这样：<br> class  DiskInfo  {<br>     // 名字<br>      public  String name;</p><pre><code>// 序列号  public   int  serial;</code></pre><p>}<br>在这个类中，申明一些Native的本地方法，来测试方法参数的传递，分别定义了一些函数，用来传递结构或者结构数组，具体定义如下面代码：<br> /<em> <strong><strong><strong><em>**</em></strong></strong></strong></em> 定义本地方法 <strong><strong><strong><strong>***</strong></strong></strong></strong> */<br>     // 输入常用的数值类型(Boolean,Byte,Char,Short,Int,Float,Double)<br>      public  native  void  displayParms(String showText,  int  i, boolean bl);</p><pre><code>// 调用一个静态方法  public  native  int  add( int  a,  int  b);// 输入一个数组  public  native  void  setArray(boolean[] blList);// 返回一个字符串数组  public  native String[] getStringArray();// 返回一个结构  public  native DiskInfo getStruct();// 返回一个结构数组  public  native DiskInfo[] getStructArray();</code></pre><p>编译生成C/C++头文件 </p><p>定义好了Java类之后，接下来就要写本地代码。本地方法符号提供一个满足约定的头文件，使用Java工具Javah可以很容易地创建它而不用手动去创建。你对Java的class文件使用javah命令，就会为你生成一个对应的C/C++头文件。<br>1、在控制台下进入工作路径，本工程路径为：E:\work\java\workspace\JavaJni。<br>2、运行javah 命令：javah -classpath E:\work\java\workspace\JavaJni com.sundy.jnidemo ChangeMethodFromJni<br>本文生成的C/C++头文件名为: com_sundy_jnidemo_ChangeMethodFromJni.h </p><p>在C/C++中实现本地方法</p><p>生成C/C++头文件之后，你就需要写头文件对应的本地方法。注意：所有的本地方法的第一个参数都是指向JNIEnv结构的。这个结构是用来调用JNI函数的。第二个参数jclass的意义，要看方法是不是静态的（static）或者实例（Instance）的。前者，jclass代表一个类对象的引用，而后者是被调用的方法所属对象的引用。<br>返回值和参数类型根据等价约定映射到本地C/C++类型，如表JNI类型映射所示。有些类型，在本地代码中可直接使用，而其他类型只有通过JNI调用操作。<br>表A<br>Java 类型    本地类型    描述<br>boolean    jboolean    C/C++8位整型<br>byte    jbyte    C/C++带符号的8位整型<br>char    jchar    C/C++无符号的16位整型<br>short    jshort    C/C++带符号的16位整型<br>int    jint    C/C++带符号的32位整型<br>long    jlong    C/C++带符号的64位整型e<br>float    jfloat    C/C++32位浮点型<br>double    jdouble    C/C++64位浮点型<br>Object    jobject    任何Java对象，或者没有对应java类型的对象<br>Class    jclass    Class对象<br>String    jstring    字符串对象<br>Object[]    jobjectArray    任何对象的数组<br>boolean[]    jbooleanArray    布尔型数组<br>byte[]    jbyteArray    比特型数组<br>char[]    jcharArray    字符型数组<br>short[]    jshortArray    短整型数组<br>int[]    jintArray    整型数组<br>long[]    jlongArray    长整型数组<br>float[]    jfloatArray    浮点型数组<br>double[]    jdoubleArray    双浮点型数组<br>※     JNI类型映射<br>使用数组：</p><p>JNI通过JNIEnv提供的操作Java数组的功能。它提供了两个函数：一个是操作java的简单型数组的，另一个是操作对象类型数组的。<br>因为速度的原因，简单类型的数组作为指向本地类型的指针暴露给本地代码。因此，它们能作为常规的数组存取。这个指针是指向实际的Java数组或者Java数组的拷贝的指针。另外，数组的布置保证匹配本地类型。<br>为了存取Java简单类型的数组，你就要要使用GetXXXArrayElements函数（见表B），XXX代表了数组的类型。这个函数把Java数组看成参数，返回一个指向对应的本地类型的数组的指针。<br>表B<br>函数    Java 数组类型    本地类型<br>GetBooleanArrayElements    jbooleanArray    jboolean<br>GetByteArrayElements    jbyteArray    jbyte<br>GetCharArrayElements    jcharArray    jchar<br>GetShortArrayElements    jshortArray    jshort<br>GetIntArrayElements    jintArray    jint<br>GetLongArrayElements    jlongArray    jlong<br>GetFloatArrayElements    jfloatArray    jfloat<br>GetDoubleArrayElements    jdoubleArray    jdouble<br>JNI数组存取函数<br>当你对数组的存取完成后，要确保调用相应的ReleaseXXXArrayElements函数，参数是对应Java数组和GetXXXArrayElements返回的指针。如果必要的话，这个释放函数会复制你做的任何变化（这样它们就反射到java数组），然后释放所有相关的资源。<br>为了使用java对象的数组，你必须使用GetObjectArrayElement函数和SetObjectArrayElement函数，分别去get，set数组的元素。GetArrayLength函数会返回数组的长度。<br>使用对象</p><p>JNI提供的另外一个功能是在本地代码中使用Java对象。通过使用合适的JNI函数，你可以创建Java对象，get、set 静态(static)和实例（instance）的域，调用静态(static)和实例（instance）函数。JNI通过ID识别域和方法，一个域或方法的ID是任何处理域和方法的函数的必须参数。<br>表C列出了用以得到静态(static)和实例（instance）的域与方法的JNI函数。每个函数接受（作为参数）域或方法的类，它们的名称，符号和它们对应返回的jfieldID或jmethodID。<br>表C<br>函数    描述<br>GetFieldID    得到一个实例的域的ID<br>GetStaticFieldID    得到一个静态的域的ID<br>GetMethodID    得到一个实例的方法的ID<br>GetStaticMethodID    得到一个静态方法的ID<br>※域和方法的函数<br>如果你有了一个类的实例，它就可以通过方法GetObjectClass得到，或者如果你没有这个类的实例，可以通过FindClass得到。符号是从域的类型或者方法的参数，返回值得到字符串，如表D所示。<br>表D<br>Java 类型    符号<br>boolean    Z<br>byte    B<br>char    C<br>short    S<br>int    I<br>long    L<br>float    F<br>double    D<br>void    V<br>objects对象    Lfully-qualified-class-name;L类名<br>Arrays数组    [array-type [数组类型<br>methods方法    (argument-types)return-type(参数类型)返回类型<br>※确定域和方法的符号</p><p>下面我们来看看，如果通过使用数组和对象，从C++中的获取到Java中的DiskInfo 类对象，并返回一个DiskInfo数组:<br>//返回一个结构数组，返回一个硬盘信息的结构数组<br>JNIEXPORT jobjectArray JNICALL Java_com_sundy_jnidemo_ChangeMethodFromJni_getStructArray<br>(JNIEnv *env, jobject _obj)<br>{<br>    //申明一个object数组<br>    jobjectArray args = 0;</p><pre><code>//数组大小jsize        len = 5;//获取object所属类,一般为ava/lang/Object就可以了jclass objClass = (env)-&gt;FindClass(&quot;java/lang/Object&quot;);//新建object数组args = (env)-&gt;NewObjectArray(len, objClass, 0);/* 下面为获取到Java中对应的实例类中的变量*///获取Java中的实例类jclass objectClass = (env)-&gt;FindClass(&quot;com/sundy/jnidemo/DiskInfo&quot;);//获取类中每一个变量的定义//名字jfieldID str = (env)-&gt;GetFieldID(objectClass,&quot;name&quot;,&quot;Ljava/lang/String;&quot;);//序列号jfieldID ival = (env)-&gt;GetFieldID(objectClass,&quot;serial&quot;,&quot;I&quot;);//给每一个实例的变量付值，并且将实例作为一个object，添加到objcet数组中for(int  i=0; i &lt; len; i++ ){    //给每一个实例的变量付值    jstring jstr = WindowsTojstring(env,&quot;我的磁盘名字是 D:&quot;);    //(env)-&gt;SetObjectField(_obj,str,(env)-&gt;NewStringUTF(&quot;my name is D:&quot;));    (env)-&gt;SetObjectField(_obj,str,jstr);    (env)-&gt;SetShortField(_obj,ival,10);    //添加到objcet数组中    (env)-&gt;SetObjectArrayElement(args, i, _obj);}//返回object数组return args;</code></pre><p> }</p><p>全部的C/C++方法实现代码如下:<br>/<em></em></p><ul><li>一缕阳光(sundy)版权所有，保留所有权利。<br>*/<br>/**</li><li></li><li>TODO Jni 中一个从Java到C/C++参数传递测试类<br>*</li><li>@author 刘正伟(sundy)</li><li>@see <a href="http://www.cnweblog.com/sundy" target="_blank" rel="noopener">http://www.cnweblog.com/sundy</a></li><li>@see mailto:<a href="mailto:sundy26@126.com" target="_blank" rel="noopener">sundy26@126.com</a></li><li>@version 1.0</li><li>@since 2005-4-30</li><li></li><li>修改记录：</li><li></li><li>日期              修改人                 描述</li><li><hr><em></em><br><em></em>/<br>// JniManage.cpp : 定义 DLL 应用程序的入口点。<br>//<br>package com.sundy.jnidemo;<br>#include “stdafx.h”</li></ul><p>#include &lt;stdio.h&gt;</p><p>#include &lt;math.h&gt;</p><p>#include “jni.h”</p><p>#include “jni_md.h”</p><p>#include “./head/Base.h”</p><p>#include “head/wmi.h”</p><p>#include “head/com_sundy_jnidemo_ChangeMethodFromJni.h” //通过javah –jni javactransfer 生成</p><p>#include &lt;stdio.h&gt;</p><p>#include “stdlib.h”</p><p>#include “string.h”</p><p>#pragma comment (lib,”BaseInfo.lib”)</p><p>#pragma comment (lib,”jvm.lib”)<br>//硬盘信息<br>struct  {<br>    char name[256];<br>    int serial;<br>}DiskInfo;<br>/<em>BOOL APIENTRY DllMain( HANDLE hModule,<br>                       DWORD  ul_reason_for_call,<br>                       LPVOID lpReserved<br>                     )<br>{<br>    LPTSTR  strName = new CHAR[256] ;<br>    (</em>GetHostName)(strName);<br>    printf(“%s\n”,strName);<br>    delete [] strName;</p><pre><code>return TRUE;</code></pre><p>}<em>/<br>//将jstring类型转换成windows类型<br>char</em> jstringToWindows( JNIEnv <em>env, jstring jstr );<br>//将windows类型转换成jstring类型<br>jstring WindowsTojstring( JNIEnv</em> env, char* str );</p><p>//主函数<br>BOOL WINAPI DllMain(HANDLE hHandle, DWORD dwReason, LPVOID lpReserved)<br>{<br>    return TRUE;<br>}<br>//输入常用的数值类型 Boolean,Byte,Char,Short,Int,Float,Double<br>JNIEXPORT void JNICALL Java_com_sundy_jnidemo_ChangeMethodFromJni_displayParms<br>(JNIEnv <em>env, jobject obj, jstring s, jint i, jboolean b)<br>{<br>    const char</em> szStr = (env)-&gt;GetStringUTFChars(s, 0 );<br>    printf( “String = [%s]\n”, szStr );<br>    printf( “int = %d\n”, i );<br>    printf( “boolean = %s\n”, (b==JNI_TRUE ? “true” : “false”) );<br>    (env)-&gt;ReleaseStringUTFChars(s, szStr );<br>}</p><p>//调用一个静态方法,只有一个简单类型输出<br>JNIEXPORT jint JNICALL Java_com_sundy_jnidemo_ChangeMethodFromJni_add<br>(JNIEnv *env, jobject, jint a, jint b)<br>{<br>    int rtn = (int)(a + b);<br>    return (jint)rtn;<br>}</p><p>////输入一个数组,这里输入的是一个Boolean类型的数组<br>JNIEXPORT void JNICALL Java_com_sundy_jnidemo_ChangeMethodFromJni_setArray<br>(JNIEnv <em>env, jobject, jbooleanArray ba)<br>{<br>    jboolean</em> pba = (env)-&gt;GetBooleanArrayElements(ba, 0 );<br>    jsize len = (env)-&gt;GetArrayLength(ba);<br>    int i=0;<br>    // change even array elements<br>    for( i=0; i &lt; len; i+=2 )<br>    {<br>        pba[i] = JNI_FALSE;<br>        printf( “boolean = %s\n”, (pba[i]==JNI_TRUE ? “true” : “false”) );<br>    }<br>    (env)-&gt;ReleaseBooleanArrayElements(ba, pba, 0 );<br>}</p><p>////返回一个字符串数组<br>JNIEXPORT jobjectArray JNICALL Java_com_sundy_jnidemo_ChangeMethodFromJni_getStringArray<br>(JNIEnv <em>env, jobject)<br>{<br>    jstring      str;<br>    jobjectArray args = 0;<br>    jsize        len = 5;<br>    char</em>        sa[] = { “Hello,”, “world!”, “JNI”, “is”, “fun” };<br>    int          i=0;<br>    args = (env)-&gt;NewObjectArray(len,(env)-&gt;FindClass(“java/lang/String”),0);<br>    for( i=0; i &lt; len; i++ )<br>    {<br>        str = (env)-&gt;NewStringUTF(sa[i] );<br>        (env)-&gt;SetObjectArrayElement(args, i, str);<br>    }<br>    return args;<br>}</p><p>//返回一个结构,这里返回一个硬盘信息的简单结构类型<br>JNIEXPORT jobject JNICALL Java_com_sundy_jnidemo_ChangeMethodFromJni_getStruct<br>(JNIEnv <em>env, jobject obj)<br>{<br>    /</em> 下面为获取到Java中对应的实例类中的变量*/</p><pre><code>//获取Java中的实例类jclass objectClass = (env)-&gt;FindClass(&quot;com/sundy/jnidemo/DiskInfo&quot;);//获取类中每一个变量的定义//名字jfieldID str = (env)-&gt;GetFieldID(objectClass,&quot;name&quot;,&quot;Ljava/lang/String;&quot;);//序列号jfieldID ival = (env)-&gt;GetFieldID(objectClass,&quot;serial&quot;,&quot;I&quot;);//给每一个实例的变量付值(env)-&gt;SetObjectField(obj,str,(env)-&gt;NewStringUTF(&quot;my name is D:&quot;));(env)-&gt;SetShortField(obj,ival,10);return obj;</code></pre><p>}</p><p>//返回一个结构数组，返回一个硬盘信息的结构数组<br>JNIEXPORT jobjectArray JNICALL Java_com_sundy_jnidemo_ChangeMethodFromJni_getStructArray<br>(JNIEnv *env, jobject _obj)<br>{<br>    //申明一个object数组<br>    jobjectArray args = 0;</p><pre><code>//数组大小jsize        len = 5;//获取object所属类,一般为ava/lang/Object就可以了jclass objClass = (env)-&gt;FindClass(&quot;java/lang/Object&quot;);//新建object数组args = (env)-&gt;NewObjectArray(len, objClass, 0);/* 下面为获取到Java中对应的实例类中的变量*///获取Java中的实例类jclass objectClass = (env)-&gt;FindClass(&quot;com/sundy/jnidemo/DiskInfo&quot;);//获取类中每一个变量的定义//名字jfieldID str = (env)-&gt;GetFieldID(objectClass,&quot;name&quot;,&quot;Ljava/lang/String;&quot;);//序列号jfieldID ival = (env)-&gt;GetFieldID(objectClass,&quot;serial&quot;,&quot;I&quot;);//给每一个实例的变量付值，并且将实例作为一个object，添加到objcet数组中for(int  i=0; i &lt; len; i++ ){    //给每一个实例的变量付值    jstring jstr = WindowsTojstring(env,&quot;我的磁盘名字是 D:&quot;);    //(env)-&gt;SetObjectField(_obj,str,(env)-&gt;NewStringUTF(&quot;my name is D:&quot;));    (env)-&gt;SetObjectField(_obj,str,jstr);    (env)-&gt;SetShortField(_obj,ival,10);    //添加到objcet数组中    (env)-&gt;SetObjectArrayElement(args, i, _obj);}//返回object数组return args;</code></pre><p> }</p><p>//将jstring类型转换成windows类型<br>char<em> jstringToWindows( JNIEnv  </em>env, jstring jstr )<br>{<br>    int length = (env)-&gt;GetStringLength(jstr );<br>    const jchar<em> jcstr = (env)-&gt;GetStringChars(jstr, 0 );<br>    char</em> rtn = (char<em>)malloc( length</em>2+1 );<br>    int size = 0;<br>    size = WideCharToMultiByte( CP_ACP, 0, (LPCWSTR)jcstr, length, rtn,(length<em>2+1), NULL, NULL );<br>    if( size &lt;= 0 )<br>        return NULL;<br>    (env)-&gt;ReleaseStringChars(jstr, jcstr );<br>    rtn[size] = 0;<br>    return rtn;<br>}<br>//将windows类型转换成jstring类型<br>jstring WindowsTojstring( JNIEnv</em> env, char<em> str )<br>{<br>    jstring rtn = 0;<br>    int slen = strlen(str);<br>    unsigned short </em> buffer = 0;<br>    if( slen == 0 )<br>        rtn = (env)-&gt;NewStringUTF(str );<br>    else<br>    {<br>        int length = MultiByteToWideChar( CP_ACP, 0, (LPCSTR)str, slen, NULL, 0 );<br>        buffer = (unsigned short <em>)malloc( length</em>2 + 1 );<br>        if( MultiByteToWideChar( CP_ACP, 0, (LPCSTR)str, slen, (LPWSTR)buffer, length ) &gt;0 )<br>            rtn = (env)-&gt;NewString(  (jchar*)buffer, length );<br>    }<br>    if( buffer )<br>        free( buffer );<br>    return rtn;<br>}</p><p>Java 测试native代码<br>这没有什么多说的，看代码吧<br>//主测试程序<br>    public static void main(String[] args) {<br>        ChangeMethodFromJni changeJni = new ChangeMethodFromJni();</p><pre><code>    //输入常用的数值类型(string int boolean)    System.out            .println(&quot;------------------输入常用的数值类型(string int boolean)-----------&quot;);    changeJni.displayParms(&quot;Hello World!&quot;, 100, true);    //调用一个静态方法    System.out.println(&quot;------------------调用一个静态方法-----------&quot;);    int ret = changeJni.add(12, 20);    System.out.println(&quot;The result is: &quot; + String.valueOf(ret));    //输入一个数组    System.out.println(&quot;------------------输入一个数组-----------&quot;);    boolean[] blList = new boolean[] { true, false, true };    changeJni.setArray(blList);    //返回一个字符串数组    System.out.println(&quot;------------------返回一个字符串数组-----------&quot;);    String[] strList = changeJni.getStringArray();    for (int i = 0; i &lt; strList.length; i++) {        System.out.print(strList[i]);    }    System.out.println();    System.out.println(&quot;------------------返回一个结构-----------&quot;);    //返回一个结构    DiskInfo disk = changeJni.getStruct();    System.out.println(&quot;name:&quot; + disk.name);    System.out.println(&quot;Serial:&quot; + disk.serial);    //返回一个结构数组    System.out.println(&quot;------------------返回一个结构数组 -----------&quot;);    DiskInfo[] diskList = changeJni.getStructArray();    for (int i = 0; i &lt; diskList.length; i++) {        System.out.println(&quot;name:&quot; + diskList[i].name);        System.out.println(&quot;Serial:&quot; + diskList[i].serial);    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Android -- android sendevent模拟滑动点击事件</title>
      <link href="/2015/12/22/Android-android-sendevent%E6%A8%A1%E6%8B%9F%E6%BB%91%E5%8A%A8%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
      <url>/2015/12/22/Android-android-sendevent%E6%A8%A1%E6%8B%9F%E6%BB%91%E5%8A%A8%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>adb shell input swipe 250 250 300 300<br>模拟事件全部是通过input命令来实现的，首先看一下input命令的使用：<br>usage: input …</p><pre><code>input text &lt;string&gt;input keyevent &lt;key code number or name&gt;input tap &lt;x&gt; &lt;y&gt;input swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt;</code></pre><ol><li>keyevent指的是android对应的keycode，比如home键的keycode=3，back键的keycode=4.</li></ol><p>具体请查阅 <android keycode详解=""> <a href="http://blog.csdn.net/huiguixian/article/details/8550170" target="_blank" rel="noopener">http://blog.csdn.net/huiguixian/article/details/8550170</a></android></p><p>然后使用的话比较简单，比如想模拟home按键：</p><p>adb shell input keyevent 3</p><p>请查阅上述文章，根据具体keycode编辑即可。</p><ol start="2"><li>关于tap的话，他模拟的是touch屏幕的事件，只需给出x、y坐标即可。</li></ol><p>此x、y坐标对应的是真实的屏幕分辨率，所以要根据具体手机具体看，比如你想点击屏幕(x, y) = (250, 250)位置：</p><p>adb shell input tap 250 250</p><ol start="3"><li>关于swipe同tap是一样的，只是他是模拟滑动的事件，给出起点和终点的坐标即可。例如从屏幕(250, 250), 到屏幕(300, 300)即</li></ol><p>adb shell input swipe 250 250 300 300<br>在项目中实现陀螺仪翻页的解决策略</p><p>竖屏</p><p>向右滑 ：input swipe 50 1000 650 1000 -&gt;</p><p>向左滑： input swipe 650 1000 50 1000 &lt;-</p><hr><p>横屏</p><p>默认点击屏幕在横屏状态下的中心位置 input tap 627 283 （可以完成例如在相册页面的）</p><p>向右滑 ：input swipe 600 300 800 300 -&gt; (适用于小范围的移动。 例如相册的展示页面)</p><p>向左滑 ：input swipe 800 300 60 300 &lt;- (适用于小范围的移动。 例如相册的展示页面)</p><p>向右滑 ：input swipe 200 300 1200 300 -&gt; (适用于大范围的移动。 例如相册的单张浏览模式)</p><p>向右滑 ：input swipe 1200 300 200 300 &lt;- (适用于大范围的移动。 例如相册的单张浏览模式)</p><p>superbar中使用命令在不申请root的条件下打开设备文件节点的权限<br>打开设备文件节点的权限：chmod 666 /dev/input/*<br>查看设备文节点的权限： ll /dev/input</p><p>android RingSDK 的事件注入<br><a href="https://code.google.com/p/android-event-injector/" target="_blank" rel="noopener">https://code.google.com/p/android-event-injector/</a></p><p>ps：在没有OTG线的情况下连接电脑，通过命令打开任意的app<br>adb shell am start com.wormhole.glass1/com.wormhole.glass.MainActivit</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
